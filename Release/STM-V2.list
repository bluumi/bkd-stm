
STM-V3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004618  080001e0  080001e0  000101e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080047f8  080047f8  000147f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08004864  08004864  00014864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800486c  0800486c  0001486c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08004870  08004870  00014870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001f0  20000000  08004874  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001958  200001f0  08004a64  000201f0  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20001b48  08004a64  00021b48  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001943e  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000359b  00000000  00000000  0003965e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00009035  00000000  00000000  0003cbf9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000ea8  00000000  00000000  00045c2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000d88  00000000  00000000  00046ad6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00024d40  00000000  00000000  0004785e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000f338  00000000  00000000  0006c59e  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000d2476  00000000  00000000  0007b8d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  0014dd4c  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00002670  00000000  00000000  0014ddc8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001f0 	.word	0x200001f0
 80001fc:	00000000 	.word	0x00000000
 8000200:	080047e0 	.word	0x080047e0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001f4 	.word	0x200001f4
 800021c:	080047e0 	.word	0x080047e0

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b972 	b.w	800051c <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	4688      	mov	r8, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	d14b      	bne.n	80002f6 <__udivmoddi4+0xa6>
 800025e:	428a      	cmp	r2, r1
 8000260:	4615      	mov	r5, r2
 8000262:	d967      	bls.n	8000334 <__udivmoddi4+0xe4>
 8000264:	fab2 f282 	clz	r2, r2
 8000268:	b14a      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026a:	f1c2 0720 	rsb	r7, r2, #32
 800026e:	fa01 f302 	lsl.w	r3, r1, r2
 8000272:	fa20 f707 	lsr.w	r7, r0, r7
 8000276:	4095      	lsls	r5, r2
 8000278:	ea47 0803 	orr.w	r8, r7, r3
 800027c:	4094      	lsls	r4, r2
 800027e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000282:	0c23      	lsrs	r3, r4, #16
 8000284:	fbb8 f7fe 	udiv	r7, r8, lr
 8000288:	fa1f fc85 	uxth.w	ip, r5
 800028c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000290:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000294:	fb07 f10c 	mul.w	r1, r7, ip
 8000298:	4299      	cmp	r1, r3
 800029a:	d909      	bls.n	80002b0 <__udivmoddi4+0x60>
 800029c:	18eb      	adds	r3, r5, r3
 800029e:	f107 30ff 	add.w	r0, r7, #4294967295
 80002a2:	f080 811b 	bcs.w	80004dc <__udivmoddi4+0x28c>
 80002a6:	4299      	cmp	r1, r3
 80002a8:	f240 8118 	bls.w	80004dc <__udivmoddi4+0x28c>
 80002ac:	3f02      	subs	r7, #2
 80002ae:	442b      	add	r3, r5
 80002b0:	1a5b      	subs	r3, r3, r1
 80002b2:	b2a4      	uxth	r4, r4
 80002b4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c4:	45a4      	cmp	ip, r4
 80002c6:	d909      	bls.n	80002dc <__udivmoddi4+0x8c>
 80002c8:	192c      	adds	r4, r5, r4
 80002ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ce:	f080 8107 	bcs.w	80004e0 <__udivmoddi4+0x290>
 80002d2:	45a4      	cmp	ip, r4
 80002d4:	f240 8104 	bls.w	80004e0 <__udivmoddi4+0x290>
 80002d8:	3802      	subs	r0, #2
 80002da:	442c      	add	r4, r5
 80002dc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002e0:	eba4 040c 	sub.w	r4, r4, ip
 80002e4:	2700      	movs	r7, #0
 80002e6:	b11e      	cbz	r6, 80002f0 <__udivmoddi4+0xa0>
 80002e8:	40d4      	lsrs	r4, r2
 80002ea:	2300      	movs	r3, #0
 80002ec:	e9c6 4300 	strd	r4, r3, [r6]
 80002f0:	4639      	mov	r1, r7
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d909      	bls.n	800030e <__udivmoddi4+0xbe>
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f000 80eb 	beq.w	80004d6 <__udivmoddi4+0x286>
 8000300:	2700      	movs	r7, #0
 8000302:	e9c6 0100 	strd	r0, r1, [r6]
 8000306:	4638      	mov	r0, r7
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	fab3 f783 	clz	r7, r3
 8000312:	2f00      	cmp	r7, #0
 8000314:	d147      	bne.n	80003a6 <__udivmoddi4+0x156>
 8000316:	428b      	cmp	r3, r1
 8000318:	d302      	bcc.n	8000320 <__udivmoddi4+0xd0>
 800031a:	4282      	cmp	r2, r0
 800031c:	f200 80fa 	bhi.w	8000514 <__udivmoddi4+0x2c4>
 8000320:	1a84      	subs	r4, r0, r2
 8000322:	eb61 0303 	sbc.w	r3, r1, r3
 8000326:	2001      	movs	r0, #1
 8000328:	4698      	mov	r8, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d0e0      	beq.n	80002f0 <__udivmoddi4+0xa0>
 800032e:	e9c6 4800 	strd	r4, r8, [r6]
 8000332:	e7dd      	b.n	80002f0 <__udivmoddi4+0xa0>
 8000334:	b902      	cbnz	r2, 8000338 <__udivmoddi4+0xe8>
 8000336:	deff      	udf	#255	; 0xff
 8000338:	fab2 f282 	clz	r2, r2
 800033c:	2a00      	cmp	r2, #0
 800033e:	f040 808f 	bne.w	8000460 <__udivmoddi4+0x210>
 8000342:	1b49      	subs	r1, r1, r5
 8000344:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000348:	fa1f f885 	uxth.w	r8, r5
 800034c:	2701      	movs	r7, #1
 800034e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fb0e 111c 	mls	r1, lr, ip, r1
 8000358:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800035c:	fb08 f10c 	mul.w	r1, r8, ip
 8000360:	4299      	cmp	r1, r3
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x124>
 8000364:	18eb      	adds	r3, r5, r3
 8000366:	f10c 30ff 	add.w	r0, ip, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x122>
 800036c:	4299      	cmp	r1, r3
 800036e:	f200 80cd 	bhi.w	800050c <__udivmoddi4+0x2bc>
 8000372:	4684      	mov	ip, r0
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	b2a3      	uxth	r3, r4
 8000378:	fbb1 f0fe 	udiv	r0, r1, lr
 800037c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000380:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000384:	fb08 f800 	mul.w	r8, r8, r0
 8000388:	45a0      	cmp	r8, r4
 800038a:	d907      	bls.n	800039c <__udivmoddi4+0x14c>
 800038c:	192c      	adds	r4, r5, r4
 800038e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x14a>
 8000394:	45a0      	cmp	r8, r4
 8000396:	f200 80b6 	bhi.w	8000506 <__udivmoddi4+0x2b6>
 800039a:	4618      	mov	r0, r3
 800039c:	eba4 0408 	sub.w	r4, r4, r8
 80003a0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003a4:	e79f      	b.n	80002e6 <__udivmoddi4+0x96>
 80003a6:	f1c7 0c20 	rsb	ip, r7, #32
 80003aa:	40bb      	lsls	r3, r7
 80003ac:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003b0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003b4:	fa01 f407 	lsl.w	r4, r1, r7
 80003b8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003bc:	fa21 f30c 	lsr.w	r3, r1, ip
 80003c0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003c4:	4325      	orrs	r5, r4
 80003c6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ca:	0c2c      	lsrs	r4, r5, #16
 80003cc:	fb08 3319 	mls	r3, r8, r9, r3
 80003d0:	fa1f fa8e 	uxth.w	sl, lr
 80003d4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d8:	fb09 f40a 	mul.w	r4, r9, sl
 80003dc:	429c      	cmp	r4, r3
 80003de:	fa02 f207 	lsl.w	r2, r2, r7
 80003e2:	fa00 f107 	lsl.w	r1, r0, r7
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b0>
 80003e8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ec:	f109 30ff 	add.w	r0, r9, #4294967295
 80003f0:	f080 8087 	bcs.w	8000502 <__udivmoddi4+0x2b2>
 80003f4:	429c      	cmp	r4, r3
 80003f6:	f240 8084 	bls.w	8000502 <__udivmoddi4+0x2b2>
 80003fa:	f1a9 0902 	sub.w	r9, r9, #2
 80003fe:	4473      	add	r3, lr
 8000400:	1b1b      	subs	r3, r3, r4
 8000402:	b2ad      	uxth	r5, r5
 8000404:	fbb3 f0f8 	udiv	r0, r3, r8
 8000408:	fb08 3310 	mls	r3, r8, r0, r3
 800040c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000410:	fb00 fa0a 	mul.w	sl, r0, sl
 8000414:	45a2      	cmp	sl, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1da>
 8000418:	eb1e 0404 	adds.w	r4, lr, r4
 800041c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000420:	d26b      	bcs.n	80004fa <__udivmoddi4+0x2aa>
 8000422:	45a2      	cmp	sl, r4
 8000424:	d969      	bls.n	80004fa <__udivmoddi4+0x2aa>
 8000426:	3802      	subs	r0, #2
 8000428:	4474      	add	r4, lr
 800042a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800042e:	fba0 8902 	umull	r8, r9, r0, r2
 8000432:	eba4 040a 	sub.w	r4, r4, sl
 8000436:	454c      	cmp	r4, r9
 8000438:	46c2      	mov	sl, r8
 800043a:	464b      	mov	r3, r9
 800043c:	d354      	bcc.n	80004e8 <__udivmoddi4+0x298>
 800043e:	d051      	beq.n	80004e4 <__udivmoddi4+0x294>
 8000440:	2e00      	cmp	r6, #0
 8000442:	d069      	beq.n	8000518 <__udivmoddi4+0x2c8>
 8000444:	ebb1 050a 	subs.w	r5, r1, sl
 8000448:	eb64 0403 	sbc.w	r4, r4, r3
 800044c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000450:	40fd      	lsrs	r5, r7
 8000452:	40fc      	lsrs	r4, r7
 8000454:	ea4c 0505 	orr.w	r5, ip, r5
 8000458:	e9c6 5400 	strd	r5, r4, [r6]
 800045c:	2700      	movs	r7, #0
 800045e:	e747      	b.n	80002f0 <__udivmoddi4+0xa0>
 8000460:	f1c2 0320 	rsb	r3, r2, #32
 8000464:	fa20 f703 	lsr.w	r7, r0, r3
 8000468:	4095      	lsls	r5, r2
 800046a:	fa01 f002 	lsl.w	r0, r1, r2
 800046e:	fa21 f303 	lsr.w	r3, r1, r3
 8000472:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000476:	4338      	orrs	r0, r7
 8000478:	0c01      	lsrs	r1, r0, #16
 800047a:	fbb3 f7fe 	udiv	r7, r3, lr
 800047e:	fa1f f885 	uxth.w	r8, r5
 8000482:	fb0e 3317 	mls	r3, lr, r7, r3
 8000486:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048a:	fb07 f308 	mul.w	r3, r7, r8
 800048e:	428b      	cmp	r3, r1
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x256>
 8000496:	1869      	adds	r1, r5, r1
 8000498:	f107 3cff 	add.w	ip, r7, #4294967295
 800049c:	d22f      	bcs.n	80004fe <__udivmoddi4+0x2ae>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d92d      	bls.n	80004fe <__udivmoddi4+0x2ae>
 80004a2:	3f02      	subs	r7, #2
 80004a4:	4429      	add	r1, r5
 80004a6:	1acb      	subs	r3, r1, r3
 80004a8:	b281      	uxth	r1, r0
 80004aa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ae:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b6:	fb00 f308 	mul.w	r3, r0, r8
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x27e>
 80004be:	1869      	adds	r1, r5, r1
 80004c0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c4:	d217      	bcs.n	80004f6 <__udivmoddi4+0x2a6>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d915      	bls.n	80004f6 <__udivmoddi4+0x2a6>
 80004ca:	3802      	subs	r0, #2
 80004cc:	4429      	add	r1, r5
 80004ce:	1ac9      	subs	r1, r1, r3
 80004d0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004d4:	e73b      	b.n	800034e <__udivmoddi4+0xfe>
 80004d6:	4637      	mov	r7, r6
 80004d8:	4630      	mov	r0, r6
 80004da:	e709      	b.n	80002f0 <__udivmoddi4+0xa0>
 80004dc:	4607      	mov	r7, r0
 80004de:	e6e7      	b.n	80002b0 <__udivmoddi4+0x60>
 80004e0:	4618      	mov	r0, r3
 80004e2:	e6fb      	b.n	80002dc <__udivmoddi4+0x8c>
 80004e4:	4541      	cmp	r1, r8
 80004e6:	d2ab      	bcs.n	8000440 <__udivmoddi4+0x1f0>
 80004e8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ec:	eb69 020e 	sbc.w	r2, r9, lr
 80004f0:	3801      	subs	r0, #1
 80004f2:	4613      	mov	r3, r2
 80004f4:	e7a4      	b.n	8000440 <__udivmoddi4+0x1f0>
 80004f6:	4660      	mov	r0, ip
 80004f8:	e7e9      	b.n	80004ce <__udivmoddi4+0x27e>
 80004fa:	4618      	mov	r0, r3
 80004fc:	e795      	b.n	800042a <__udivmoddi4+0x1da>
 80004fe:	4667      	mov	r7, ip
 8000500:	e7d1      	b.n	80004a6 <__udivmoddi4+0x256>
 8000502:	4681      	mov	r9, r0
 8000504:	e77c      	b.n	8000400 <__udivmoddi4+0x1b0>
 8000506:	3802      	subs	r0, #2
 8000508:	442c      	add	r4, r5
 800050a:	e747      	b.n	800039c <__udivmoddi4+0x14c>
 800050c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000510:	442b      	add	r3, r5
 8000512:	e72f      	b.n	8000374 <__udivmoddi4+0x124>
 8000514:	4638      	mov	r0, r7
 8000516:	e708      	b.n	800032a <__udivmoddi4+0xda>
 8000518:	4637      	mov	r7, r6
 800051a:	e6e9      	b.n	80002f0 <__udivmoddi4+0xa0>

0800051c <__aeabi_idiv0>:
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop

08000520 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000520:	b510      	push	{r4, lr}
 8000522:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000524:	4b0e      	ldr	r3, [pc, #56]	; (8000560 <HAL_InitTick+0x40>)
 8000526:	7818      	ldrb	r0, [r3, #0]
 8000528:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800052c:	fbb3 f3f0 	udiv	r3, r3, r0
 8000530:	4a0c      	ldr	r2, [pc, #48]	; (8000564 <HAL_InitTick+0x44>)
 8000532:	6810      	ldr	r0, [r2, #0]
 8000534:	fbb0 f0f3 	udiv	r0, r0, r3
 8000538:	f000 f89a 	bl	8000670 <HAL_SYSTICK_Config>
 800053c:	b968      	cbnz	r0, 800055a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800053e:	2c0f      	cmp	r4, #15
 8000540:	d901      	bls.n	8000546 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000542:	2001      	movs	r0, #1
 8000544:	e00a      	b.n	800055c <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000546:	2200      	movs	r2, #0
 8000548:	4621      	mov	r1, r4
 800054a:	f04f 30ff 	mov.w	r0, #4294967295
 800054e:	f000 f84f 	bl	80005f0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000552:	4b03      	ldr	r3, [pc, #12]	; (8000560 <HAL_InitTick+0x40>)
 8000554:	605c      	str	r4, [r3, #4]
  }

  /* Return function status */
  return HAL_OK;
 8000556:	2000      	movs	r0, #0
 8000558:	e000      	b.n	800055c <HAL_InitTick+0x3c>
    return HAL_ERROR;
 800055a:	2001      	movs	r0, #1
}
 800055c:	bd10      	pop	{r4, pc}
 800055e:	bf00      	nop
 8000560:	20000000 	.word	0x20000000
 8000564:	20000118 	.word	0x20000118

08000568 <HAL_Init>:
{
 8000568:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800056a:	2003      	movs	r0, #3
 800056c:	f000 f82e 	bl	80005cc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000570:	2000      	movs	r0, #0
 8000572:	f7ff ffd5 	bl	8000520 <HAL_InitTick>
  HAL_MspInit();
 8000576:	f003 fcd1 	bl	8003f1c <HAL_MspInit>
}
 800057a:	2000      	movs	r0, #0
 800057c:	bd08      	pop	{r3, pc}
	...

08000580 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000580:	4a03      	ldr	r2, [pc, #12]	; (8000590 <HAL_IncTick+0x10>)
 8000582:	6811      	ldr	r1, [r2, #0]
 8000584:	4b03      	ldr	r3, [pc, #12]	; (8000594 <HAL_IncTick+0x14>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	440b      	add	r3, r1
 800058a:	6013      	str	r3, [r2, #0]
}
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop
 8000590:	20000220 	.word	0x20000220
 8000594:	20000000 	.word	0x20000000

08000598 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000598:	4b01      	ldr	r3, [pc, #4]	; (80005a0 <HAL_GetTick+0x8>)
 800059a:	6818      	ldr	r0, [r3, #0]
}
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	20000220 	.word	0x20000220

080005a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005a4:	b538      	push	{r3, r4, r5, lr}
 80005a6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80005a8:	f7ff fff6 	bl	8000598 <HAL_GetTick>
 80005ac:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005ae:	f1b4 3fff 	cmp.w	r4, #4294967295
 80005b2:	d002      	beq.n	80005ba <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80005b4:	4b04      	ldr	r3, [pc, #16]	; (80005c8 <HAL_Delay+0x24>)
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80005ba:	f7ff ffed 	bl	8000598 <HAL_GetTick>
 80005be:	1b40      	subs	r0, r0, r5
 80005c0:	42a0      	cmp	r0, r4
 80005c2:	d3fa      	bcc.n	80005ba <HAL_Delay+0x16>
  {
  }
}
 80005c4:	bd38      	pop	{r3, r4, r5, pc}
 80005c6:	bf00      	nop
 80005c8:	20000000 	.word	0x20000000

080005cc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005cc:	4906      	ldr	r1, [pc, #24]	; (80005e8 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 80005ce:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005d0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80005d4:	041b      	lsls	r3, r3, #16
 80005d6:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005d8:	0200      	lsls	r0, r0, #8
 80005da:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005de:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80005e0:	4a02      	ldr	r2, [pc, #8]	; (80005ec <HAL_NVIC_SetPriorityGrouping+0x20>)
 80005e2:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 80005e4:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80005e6:	4770      	bx	lr
 80005e8:	e000ed00 	.word	0xe000ed00
 80005ec:	05fa0000 	.word	0x05fa0000

080005f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005f0:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005f2:	4b15      	ldr	r3, [pc, #84]	; (8000648 <HAL_NVIC_SetPriority+0x58>)
 80005f4:	68db      	ldr	r3, [r3, #12]
 80005f6:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005fa:	f1c3 0407 	rsb	r4, r3, #7
 80005fe:	2c04      	cmp	r4, #4
 8000600:	bf28      	it	cs
 8000602:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000604:	1d1d      	adds	r5, r3, #4
 8000606:	2d06      	cmp	r5, #6
 8000608:	d914      	bls.n	8000634 <HAL_NVIC_SetPriority+0x44>
 800060a:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800060c:	f04f 35ff 	mov.w	r5, #4294967295
 8000610:	fa05 f404 	lsl.w	r4, r5, r4
 8000614:	ea21 0104 	bic.w	r1, r1, r4
 8000618:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800061a:	fa05 f303 	lsl.w	r3, r5, r3
 800061e:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000622:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8000624:	2800      	cmp	r0, #0
 8000626:	db07      	blt.n	8000638 <HAL_NVIC_SetPriority+0x48>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000628:	0109      	lsls	r1, r1, #4
 800062a:	b2c9      	uxtb	r1, r1
 800062c:	4b07      	ldr	r3, [pc, #28]	; (800064c <HAL_NVIC_SetPriority+0x5c>)
 800062e:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000630:	bc30      	pop	{r4, r5}
 8000632:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000634:	2300      	movs	r3, #0
 8000636:	e7e9      	b.n	800060c <HAL_NVIC_SetPriority+0x1c>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000638:	f000 000f 	and.w	r0, r0, #15
 800063c:	0109      	lsls	r1, r1, #4
 800063e:	b2c9      	uxtb	r1, r1
 8000640:	4b03      	ldr	r3, [pc, #12]	; (8000650 <HAL_NVIC_SetPriority+0x60>)
 8000642:	5419      	strb	r1, [r3, r0]
 8000644:	e7f4      	b.n	8000630 <HAL_NVIC_SetPriority+0x40>
 8000646:	bf00      	nop
 8000648:	e000ed00 	.word	0xe000ed00
 800064c:	e000e400 	.word	0xe000e400
 8000650:	e000ed14 	.word	0xe000ed14

08000654 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000654:	2800      	cmp	r0, #0
 8000656:	db07      	blt.n	8000668 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000658:	f000 021f 	and.w	r2, r0, #31
 800065c:	0940      	lsrs	r0, r0, #5
 800065e:	2301      	movs	r3, #1
 8000660:	4093      	lsls	r3, r2
 8000662:	4a02      	ldr	r2, [pc, #8]	; (800066c <HAL_NVIC_EnableIRQ+0x18>)
 8000664:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	e000e100 	.word	0xe000e100

08000670 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000670:	3801      	subs	r0, #1
 8000672:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000676:	d20a      	bcs.n	800068e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000678:	4b06      	ldr	r3, [pc, #24]	; (8000694 <HAL_SYSTICK_Config+0x24>)
 800067a:	6058      	str	r0, [r3, #4]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800067c:	4a06      	ldr	r2, [pc, #24]	; (8000698 <HAL_SYSTICK_Config+0x28>)
 800067e:	21f0      	movs	r1, #240	; 0xf0
 8000680:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000684:	2000      	movs	r0, #0
 8000686:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000688:	2207      	movs	r2, #7
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800068e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	e000e010 	.word	0xe000e010
 8000698:	e000ed00 	.word	0xe000ed00

0800069c <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800069c:	2300      	movs	r3, #0
 800069e:	2b0f      	cmp	r3, #15
 80006a0:	f200 80d6 	bhi.w	8000850 <HAL_GPIO_Init+0x1b4>
{
 80006a4:	b4f0      	push	{r4, r5, r6, r7}
 80006a6:	b082      	sub	sp, #8
 80006a8:	e039      	b.n	800071e <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80006aa:	2207      	movs	r2, #7
 80006ac:	e000      	b.n	80006b0 <HAL_GPIO_Init+0x14>
 80006ae:	2200      	movs	r2, #0
 80006b0:	40b2      	lsls	r2, r6
 80006b2:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 80006b4:	3402      	adds	r4, #2
 80006b6:	4e67      	ldr	r6, [pc, #412]	; (8000854 <HAL_GPIO_Init+0x1b8>)
 80006b8:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80006bc:	4a66      	ldr	r2, [pc, #408]	; (8000858 <HAL_GPIO_Init+0x1bc>)
 80006be:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80006c0:	43ea      	mvns	r2, r5
 80006c2:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80006c6:	684f      	ldr	r7, [r1, #4]
 80006c8:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 80006cc:	d001      	beq.n	80006d2 <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 80006ce:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 80006d2:	4c61      	ldr	r4, [pc, #388]	; (8000858 <HAL_GPIO_Init+0x1bc>)
 80006d4:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 80006d6:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 80006d8:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80006dc:	684f      	ldr	r7, [r1, #4]
 80006de:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 80006e2:	d001      	beq.n	80006e8 <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 80006e4:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 80006e8:	4c5b      	ldr	r4, [pc, #364]	; (8000858 <HAL_GPIO_Init+0x1bc>)
 80006ea:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80006ec:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 80006ee:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80006f2:	684f      	ldr	r7, [r1, #4]
 80006f4:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 80006f8:	d001      	beq.n	80006fe <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 80006fa:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 80006fe:	4c56      	ldr	r4, [pc, #344]	; (8000858 <HAL_GPIO_Init+0x1bc>)
 8000700:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8000702:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8000704:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000706:	684e      	ldr	r6, [r1, #4]
 8000708:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 800070c:	d001      	beq.n	8000712 <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 800070e:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 8000712:	4c51      	ldr	r4, [pc, #324]	; (8000858 <HAL_GPIO_Init+0x1bc>)
 8000714:	60e2      	str	r2, [r4, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000716:	3301      	adds	r3, #1
 8000718:	2b0f      	cmp	r3, #15
 800071a:	f200 8096 	bhi.w	800084a <HAL_GPIO_Init+0x1ae>
    ioposition = ((uint32_t)0x01) << position;
 800071e:	2201      	movs	r2, #1
 8000720:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000722:	680c      	ldr	r4, [r1, #0]
 8000724:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 8000728:	42aa      	cmp	r2, r5
 800072a:	d1f4      	bne.n	8000716 <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800072c:	684c      	ldr	r4, [r1, #4]
 800072e:	2c12      	cmp	r4, #18
 8000730:	bf18      	it	ne
 8000732:	2c02      	cmpne	r4, #2
 8000734:	d110      	bne.n	8000758 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->AFR[position >> 3];
 8000736:	08de      	lsrs	r6, r3, #3
 8000738:	3608      	adds	r6, #8
 800073a:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800073e:	f003 0407 	and.w	r4, r3, #7
 8000742:	00a7      	lsls	r7, r4, #2
 8000744:	240f      	movs	r4, #15
 8000746:	40bc      	lsls	r4, r7
 8000748:	ea2c 0c04 	bic.w	ip, ip, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800074c:	690c      	ldr	r4, [r1, #16]
 800074e:	40bc      	lsls	r4, r7
 8000750:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->AFR[position >> 3] = temp;
 8000754:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 8000758:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800075a:	005f      	lsls	r7, r3, #1
 800075c:	2603      	movs	r6, #3
 800075e:	40be      	lsls	r6, r7
 8000760:	43f6      	mvns	r6, r6
 8000762:	ea06 0c04 	and.w	ip, r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000766:	684c      	ldr	r4, [r1, #4]
 8000768:	f004 0403 	and.w	r4, r4, #3
 800076c:	40bc      	lsls	r4, r7
 800076e:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8000772:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000774:	684c      	ldr	r4, [r1, #4]
 8000776:	f104 3cff 	add.w	ip, r4, #4294967295
 800077a:	2c11      	cmp	r4, #17
 800077c:	bf18      	it	ne
 800077e:	f1bc 0f01 	cmpne.w	ip, #1
 8000782:	d901      	bls.n	8000788 <HAL_GPIO_Init+0xec>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000784:	2c12      	cmp	r4, #18
 8000786:	d111      	bne.n	80007ac <HAL_GPIO_Init+0x110>
        temp = GPIOx->OSPEEDR; 
 8000788:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800078a:	ea06 0c04 	and.w	ip, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 800078e:	68cc      	ldr	r4, [r1, #12]
 8000790:	40bc      	lsls	r4, r7
 8000792:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OSPEEDR = temp;
 8000796:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8000798:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800079a:	ea24 0c02 	bic.w	ip, r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800079e:	684c      	ldr	r4, [r1, #4]
 80007a0:	f3c4 1200 	ubfx	r2, r4, #4, #1
 80007a4:	409a      	lsls	r2, r3
 80007a6:	ea42 020c 	orr.w	r2, r2, ip
        GPIOx->OTYPER = temp;
 80007aa:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 80007ac:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80007ae:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80007b0:	688a      	ldr	r2, [r1, #8]
 80007b2:	40ba      	lsls	r2, r7
 80007b4:	4332      	orrs	r2, r6
      GPIOx->PUPDR = temp;
 80007b6:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80007b8:	684a      	ldr	r2, [r1, #4]
 80007ba:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 80007be:	d0aa      	beq.n	8000716 <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007c0:	4a26      	ldr	r2, [pc, #152]	; (800085c <HAL_GPIO_Init+0x1c0>)
 80007c2:	6c54      	ldr	r4, [r2, #68]	; 0x44
 80007c4:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 80007c8:	6454      	str	r4, [r2, #68]	; 0x44
 80007ca:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80007cc:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80007d0:	9201      	str	r2, [sp, #4]
 80007d2:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 80007d4:	089c      	lsrs	r4, r3, #2
 80007d6:	1ca6      	adds	r6, r4, #2
 80007d8:	4a1e      	ldr	r2, [pc, #120]	; (8000854 <HAL_GPIO_Init+0x1b8>)
 80007da:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80007de:	f003 0203 	and.w	r2, r3, #3
 80007e2:	0096      	lsls	r6, r2, #2
 80007e4:	220f      	movs	r2, #15
 80007e6:	40b2      	lsls	r2, r6
 80007e8:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80007ec:	4a1c      	ldr	r2, [pc, #112]	; (8000860 <HAL_GPIO_Init+0x1c4>)
 80007ee:	4290      	cmp	r0, r2
 80007f0:	f43f af5d 	beq.w	80006ae <HAL_GPIO_Init+0x12>
 80007f4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80007f8:	4290      	cmp	r0, r2
 80007fa:	d01a      	beq.n	8000832 <HAL_GPIO_Init+0x196>
 80007fc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000800:	4290      	cmp	r0, r2
 8000802:	d018      	beq.n	8000836 <HAL_GPIO_Init+0x19a>
 8000804:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000808:	4290      	cmp	r0, r2
 800080a:	d016      	beq.n	800083a <HAL_GPIO_Init+0x19e>
 800080c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000810:	4290      	cmp	r0, r2
 8000812:	d014      	beq.n	800083e <HAL_GPIO_Init+0x1a2>
 8000814:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000818:	4290      	cmp	r0, r2
 800081a:	d012      	beq.n	8000842 <HAL_GPIO_Init+0x1a6>
 800081c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000820:	4290      	cmp	r0, r2
 8000822:	d010      	beq.n	8000846 <HAL_GPIO_Init+0x1aa>
 8000824:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000828:	4290      	cmp	r0, r2
 800082a:	f43f af3e 	beq.w	80006aa <HAL_GPIO_Init+0xe>
 800082e:	2208      	movs	r2, #8
 8000830:	e73e      	b.n	80006b0 <HAL_GPIO_Init+0x14>
 8000832:	2201      	movs	r2, #1
 8000834:	e73c      	b.n	80006b0 <HAL_GPIO_Init+0x14>
 8000836:	2202      	movs	r2, #2
 8000838:	e73a      	b.n	80006b0 <HAL_GPIO_Init+0x14>
 800083a:	2203      	movs	r2, #3
 800083c:	e738      	b.n	80006b0 <HAL_GPIO_Init+0x14>
 800083e:	2204      	movs	r2, #4
 8000840:	e736      	b.n	80006b0 <HAL_GPIO_Init+0x14>
 8000842:	2205      	movs	r2, #5
 8000844:	e734      	b.n	80006b0 <HAL_GPIO_Init+0x14>
 8000846:	2206      	movs	r2, #6
 8000848:	e732      	b.n	80006b0 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 800084a:	b002      	add	sp, #8
 800084c:	bcf0      	pop	{r4, r5, r6, r7}
 800084e:	4770      	bx	lr
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	40013800 	.word	0x40013800
 8000858:	40013c00 	.word	0x40013c00
 800085c:	40023800 	.word	0x40023800
 8000860:	40020000 	.word	0x40020000

08000864 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000864:	b912      	cbnz	r2, 800086c <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000866:	0409      	lsls	r1, r1, #16
 8000868:	6181      	str	r1, [r0, #24]
  }
}
 800086a:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 800086c:	6181      	str	r1, [r0, #24]
 800086e:	4770      	bx	lr

08000870 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8000870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000874:	b082      	sub	sp, #8
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000876:	6807      	ldr	r7, [r0, #0]
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 8000878:	00ca      	lsls	r2, r1, #3
 800087a:	1a52      	subs	r2, r2, r1
 800087c:	0093      	lsls	r3, r2, #2
 800087e:	4403      	add	r3, r0
 8000880:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000882:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000884:	429a      	cmp	r2, r3
 8000886:	d857      	bhi.n	8000938 <PCD_WriteEmptyTxFifo+0xc8>
 8000888:	46b8      	mov	r8, r7
  {
    return HAL_ERROR;
  }

  len = ep->xfer_len - ep->xfer_count;
 800088a:	1a9b      	subs	r3, r3, r2

  if (len > ep->maxpacket)
 800088c:	ebc1 04c1 	rsb	r4, r1, r1, lsl #3
 8000890:	00a2      	lsls	r2, r4, #2
 8000892:	4402      	add	r2, r0
 8000894:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000896:	429a      	cmp	r2, r3
 8000898:	d300      	bcc.n	800089c <PCD_WriteEmptyTxFifo+0x2c>
  len = ep->xfer_len - ep->xfer_count;
 800089a:	461a      	mov	r2, r3
 800089c:	460c      	mov	r4, r1
 800089e:	4606      	mov	r6, r0
  {
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;
 80008a0:	f102 0a03 	add.w	sl, r2, #3
 80008a4:	ea4f 0a9a 	mov.w	sl, sl, lsr #2

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80008a8:	e016      	b.n	80008d8 <PCD_WriteEmptyTxFifo+0x68>

    if (len > ep->maxpacket)
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;
 80008aa:	f109 0a03 	add.w	sl, r9, #3
 80008ae:	ea4f 0a9a 	mov.w	sl, sl, lsr #2

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80008b2:	00e3      	lsls	r3, r4, #3
 80008b4:	1b1b      	subs	r3, r3, r4
 80008b6:	009d      	lsls	r5, r3, #2
 80008b8:	4435      	add	r5, r6
 80008ba:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 80008bc:	7c33      	ldrb	r3, [r6, #16]
 80008be:	9300      	str	r3, [sp, #0]
 80008c0:	fa1f f389 	uxth.w	r3, r9
 80008c4:	b2e2      	uxtb	r2, r4
 80008c6:	4638      	mov	r0, r7
 80008c8:	f002 f952 	bl	8002b70 <USB_WritePacket>
                          (uint8_t)hpcd->Init.dma_enable);

    ep->xfer_buff  += len;
 80008cc:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80008ce:	444b      	add	r3, r9
 80008d0:	64ab      	str	r3, [r5, #72]	; 0x48
    ep->xfer_count += len;
 80008d2:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 80008d4:	444b      	add	r3, r9
 80008d6:	656b      	str	r3, [r5, #84]	; 0x54
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80008d8:	eb08 1344 	add.w	r3, r8, r4, lsl #5
 80008dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80008e0:	699b      	ldr	r3, [r3, #24]
 80008e2:	b29b      	uxth	r3, r3
 80008e4:	4553      	cmp	r3, sl
 80008e6:	d313      	bcc.n	8000910 <PCD_WriteEmptyTxFifo+0xa0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80008e8:	00e3      	lsls	r3, r4, #3
 80008ea:	1b1b      	subs	r3, r3, r4
 80008ec:	009a      	lsls	r2, r3, #2
 80008ee:	4432      	add	r2, r6
 80008f0:	6d51      	ldr	r1, [r2, #84]	; 0x54
 80008f2:	6d13      	ldr	r3, [r2, #80]	; 0x50
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80008f4:	4299      	cmp	r1, r3
 80008f6:	d20b      	bcs.n	8000910 <PCD_WriteEmptyTxFifo+0xa0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80008f8:	b153      	cbz	r3, 8000910 <PCD_WriteEmptyTxFifo+0xa0>
    len = ep->xfer_len - ep->xfer_count;
 80008fa:	1a5b      	subs	r3, r3, r1
    if (len > ep->maxpacket)
 80008fc:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
 8000900:	008a      	lsls	r2, r1, #2
 8000902:	4432      	add	r2, r6
 8000904:	f8d2 9044 	ldr.w	r9, [r2, #68]	; 0x44
 8000908:	4599      	cmp	r9, r3
 800090a:	d3ce      	bcc.n	80008aa <PCD_WriteEmptyTxFifo+0x3a>
    len = ep->xfer_len - ep->xfer_count;
 800090c:	4699      	mov	r9, r3
 800090e:	e7cc      	b.n	80008aa <PCD_WriteEmptyTxFifo+0x3a>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8000910:	00e3      	lsls	r3, r4, #3
 8000912:	1b1b      	subs	r3, r3, r4
 8000914:	0098      	lsls	r0, r3, #2
 8000916:	4406      	add	r6, r0
 8000918:	6d32      	ldr	r2, [r6, #80]	; 0x50
 800091a:	6d73      	ldr	r3, [r6, #84]	; 0x54
 800091c:	429a      	cmp	r2, r3
 800091e:	d80f      	bhi.n	8000940 <PCD_WriteEmptyTxFifo+0xd0>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8000920:	f004 040f 	and.w	r4, r4, #15
 8000924:	2101      	movs	r1, #1
 8000926:	40a1      	lsls	r1, r4
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000928:	f8d7 4834 	ldr.w	r4, [r7, #2100]	; 0x834
 800092c:	ea24 0401 	bic.w	r4, r4, r1
 8000930:	f8c7 4834 	str.w	r4, [r7, #2100]	; 0x834
  }

  return HAL_OK;
 8000934:	2000      	movs	r0, #0
 8000936:	e000      	b.n	800093a <PCD_WriteEmptyTxFifo+0xca>
    return HAL_ERROR;
 8000938:	2001      	movs	r0, #1
}
 800093a:	b002      	add	sp, #8
 800093c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  return HAL_OK;
 8000940:	2000      	movs	r0, #0
 8000942:	e7fa      	b.n	800093a <PCD_WriteEmptyTxFifo+0xca>

08000944 <HAL_PCD_Init>:
{
 8000944:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000946:	b08b      	sub	sp, #44	; 0x2c
  if (hpcd == NULL)
 8000948:	2800      	cmp	r0, #0
 800094a:	f000 808a 	beq.w	8000a62 <HAL_PCD_Init+0x11e>
 800094e:	4604      	mov	r4, r0
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000950:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
 8000954:	b1f3      	cbz	r3, 8000994 <HAL_PCD_Init+0x50>
  hpcd->State = HAL_PCD_STATE_BUSY;
 8000956:	2303      	movs	r3, #3
 8000958:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  __HAL_PCD_DISABLE(hpcd);
 800095c:	6820      	ldr	r0, [r4, #0]
 800095e:	f001 febd 	bl	80026dc <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000962:	4625      	mov	r5, r4
 8000964:	f855 7b10 	ldr.w	r7, [r5], #16
 8000968:	466e      	mov	r6, sp
 800096a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800096c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800096e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000970:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000972:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000976:	e886 0003 	stmia.w	r6, {r0, r1}
 800097a:	1d23      	adds	r3, r4, #4
 800097c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800097e:	4638      	mov	r0, r7
 8000980:	f001 fdf2 	bl	8002568 <USB_CoreInit>
 8000984:	b158      	cbz	r0, 800099e <HAL_PCD_Init+0x5a>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000986:	2302      	movs	r3, #2
 8000988:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 800098c:	2501      	movs	r5, #1
}
 800098e:	4628      	mov	r0, r5
 8000990:	b00b      	add	sp, #44	; 0x2c
 8000992:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8000994:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
    HAL_PCD_MspInit(hpcd);
 8000998:	f003 fbd2 	bl	8004140 <HAL_PCD_MspInit>
 800099c:	e7db      	b.n	8000956 <HAL_PCD_Init+0x12>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800099e:	2100      	movs	r1, #0
 80009a0:	6820      	ldr	r0, [r4, #0]
 80009a2:	f001 fea1 	bl	80026e8 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80009a6:	2300      	movs	r3, #0
 80009a8:	e015      	b.n	80009d6 <HAL_PCD_Init+0x92>
    hpcd->IN_ep[i].is_in = 1U;
 80009aa:	00d9      	lsls	r1, r3, #3
 80009ac:	1ac8      	subs	r0, r1, r3
 80009ae:	0082      	lsls	r2, r0, #2
 80009b0:	4422      	add	r2, r4
 80009b2:	2001      	movs	r0, #1
 80009b4:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 80009b8:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 80009bc:	f8a2 3042 	strh.w	r3, [r2, #66]	; 0x42
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80009c0:	2000      	movs	r0, #0
 80009c2:	f882 003f 	strb.w	r0, [r2, #63]	; 0x3f
    hpcd->IN_ep[i].maxpacket = 0U;
 80009c6:	6450      	str	r0, [r2, #68]	; 0x44
    hpcd->IN_ep[i].xfer_buff = 0U;
 80009c8:	6490      	str	r0, [r2, #72]	; 0x48
    hpcd->IN_ep[i].xfer_len = 0U;
 80009ca:	1aca      	subs	r2, r1, r3
 80009cc:	0091      	lsls	r1, r2, #2
 80009ce:	4421      	add	r1, r4
 80009d0:	6508      	str	r0, [r1, #80]	; 0x50
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80009d2:	3301      	adds	r3, #1
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	6865      	ldr	r5, [r4, #4]
 80009d8:	42ab      	cmp	r3, r5
 80009da:	d3e6      	bcc.n	80009aa <HAL_PCD_Init+0x66>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80009dc:	2300      	movs	r3, #0
 80009de:	e015      	b.n	8000a0c <HAL_PCD_Init+0xc8>
    hpcd->OUT_ep[i].is_in = 0U;
 80009e0:	00d8      	lsls	r0, r3, #3
 80009e2:	1ac1      	subs	r1, r0, r3
 80009e4:	008a      	lsls	r2, r1, #2
 80009e6:	4422      	add	r2, r4
 80009e8:	2100      	movs	r1, #0
 80009ea:	f882 11fd 	strb.w	r1, [r2, #509]	; 0x1fd
    hpcd->OUT_ep[i].num = i;
 80009ee:	f882 31fc 	strb.w	r3, [r2, #508]	; 0x1fc
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80009f2:	f882 11ff 	strb.w	r1, [r2, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 80009f6:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80009fa:	f8c2 1208 	str.w	r1, [r2, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 80009fe:	1ac2      	subs	r2, r0, r3
 8000a00:	0090      	lsls	r0, r2, #2
 8000a02:	4420      	add	r0, r4
 8000a04:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000a08:	3301      	adds	r3, #1
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	429d      	cmp	r5, r3
 8000a0e:	d8e7      	bhi.n	80009e0 <HAL_PCD_Init+0x9c>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000a10:	4625      	mov	r5, r4
 8000a12:	f855 7b10 	ldr.w	r7, [r5], #16
 8000a16:	466e      	mov	r6, sp
 8000a18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a1a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000a1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a1e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000a20:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000a24:	e886 0003 	stmia.w	r6, {r0, r1}
 8000a28:	1d23      	adds	r3, r4, #4
 8000a2a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000a2c:	4638      	mov	r0, r7
 8000a2e:	f001 fea1 	bl	8002774 <USB_DevInit>
 8000a32:	4605      	mov	r5, r0
 8000a34:	b960      	cbnz	r0, 8000a50 <HAL_PCD_Init+0x10c>
  hpcd->USB_Address = 0U;
 8000a36:	2300      	movs	r3, #0
 8000a38:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
 8000a42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000a44:	2b01      	cmp	r3, #1
 8000a46:	d008      	beq.n	8000a5a <HAL_PCD_Init+0x116>
  (void)USB_DevDisconnect(hpcd->Instance);
 8000a48:	6820      	ldr	r0, [r4, #0]
 8000a4a:	f002 fa24 	bl	8002e96 <USB_DevDisconnect>
  return HAL_OK;
 8000a4e:	e79e      	b.n	800098e <HAL_PCD_Init+0x4a>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000a50:	2302      	movs	r3, #2
 8000a52:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 8000a56:	2501      	movs	r5, #1
 8000a58:	e799      	b.n	800098e <HAL_PCD_Init+0x4a>
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000a5a:	4620      	mov	r0, r4
 8000a5c:	f000 fcca 	bl	80013f4 <HAL_PCDEx_ActivateLPM>
 8000a60:	e7f2      	b.n	8000a48 <HAL_PCD_Init+0x104>
    return HAL_ERROR;
 8000a62:	2501      	movs	r5, #1
 8000a64:	e793      	b.n	800098e <HAL_PCD_Init+0x4a>

08000a66 <HAL_PCD_Start>:
  __HAL_LOCK(hpcd);
 8000a66:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8000a6a:	2b01      	cmp	r3, #1
 8000a6c:	d00e      	beq.n	8000a8c <HAL_PCD_Start+0x26>
{
 8000a6e:	b510      	push	{r4, lr}
 8000a70:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000a72:	2301      	movs	r3, #1
 8000a74:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  (void)USB_DevConnect(hpcd->Instance);
 8000a78:	6800      	ldr	r0, [r0, #0]
 8000a7a:	f002 fa00 	bl	8002e7e <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8000a7e:	6820      	ldr	r0, [r4, #0]
 8000a80:	f001 fe26 	bl	80026d0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8000a84:	2000      	movs	r0, #0
 8000a86:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8000a8a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8000a8c:	2002      	movs	r0, #2
}
 8000a8e:	4770      	bx	lr

08000a90 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8000a90:	b570      	push	{r4, r5, r6, lr}
 8000a92:	4605      	mov	r5, r0
 8000a94:	460e      	mov	r6, r1
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000a96:	6803      	ldr	r3, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8000a98:	6c19      	ldr	r1, [r3, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8000a9a:	eb03 1346 	add.w	r3, r3, r6, lsl #5
 8000a9e:	f503 6430 	add.w	r4, r3, #2816	; 0xb00
 8000aa2:	68a3      	ldr	r3, [r4, #8]

  if (hpcd->Init.dma_enable == 1U)
 8000aa4:	6902      	ldr	r2, [r0, #16]
 8000aa6:	2a01      	cmp	r2, #1
 8000aa8:	d00f      	beq.n	8000aca <PCD_EP_OutXfrComplete_int+0x3a>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8000aaa:	4a35      	ldr	r2, [pc, #212]	; (8000b80 <PCD_EP_OutXfrComplete_int+0xf0>)
 8000aac:	4291      	cmp	r1, r2
 8000aae:	d161      	bne.n	8000b74 <PCD_EP_OutXfrComplete_int+0xe4>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8000ab0:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8000ab4:	d15a      	bne.n	8000b6c <PCD_EP_OutXfrComplete_int+0xdc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8000ab6:	f013 0f20 	tst.w	r3, #32
 8000aba:	d001      	beq.n	8000ac0 <PCD_EP_OutXfrComplete_int+0x30>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8000abc:	2320      	movs	r3, #32
 8000abe:	60a3      	str	r3, [r4, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8000ac0:	b2f1      	uxtb	r1, r6
 8000ac2:	4628      	mov	r0, r5
 8000ac4:	f003 fb94 	bl	80041f0 <HAL_PCD_DataOutStageCallback>
 8000ac8:	e057      	b.n	8000b7a <PCD_EP_OutXfrComplete_int+0xea>
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8000aca:	f013 0f08 	tst.w	r3, #8
 8000ace:	d014      	beq.n	8000afa <PCD_EP_OutXfrComplete_int+0x6a>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8000ad0:	4a2c      	ldr	r2, [pc, #176]	; (8000b84 <PCD_EP_OutXfrComplete_int+0xf4>)
 8000ad2:	4291      	cmp	r1, r2
 8000ad4:	d905      	bls.n	8000ae2 <PCD_EP_OutXfrComplete_int+0x52>
 8000ad6:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8000ada:	d002      	beq.n	8000ae2 <PCD_EP_OutXfrComplete_int+0x52>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8000adc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ae0:	60a3      	str	r3, [r4, #8]
      HAL_PCD_SetupStageCallback(hpcd);
 8000ae2:	4628      	mov	r0, r5
 8000ae4:	f003 fb7c 	bl	80041e0 <HAL_PCD_SetupStageCallback>
      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8000ae8:	f505 7271 	add.w	r2, r5, #964	; 0x3c4
 8000aec:	2101      	movs	r1, #1
 8000aee:	6828      	ldr	r0, [r5, #0]
 8000af0:	f002 fa2e 	bl	8002f50 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8000af4:	2308      	movs	r3, #8
 8000af6:	60a3      	str	r3, [r4, #8]
 8000af8:	e03f      	b.n	8000b7a <PCD_EP_OutXfrComplete_int+0xea>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8000afa:	f013 0f20 	tst.w	r3, #32
 8000afe:	d12e      	bne.n	8000b5e <PCD_EP_OutXfrComplete_int+0xce>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8000b00:	f013 0f28 	tst.w	r3, #40	; 0x28
 8000b04:	d139      	bne.n	8000b7a <PCD_EP_OutXfrComplete_int+0xea>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8000b06:	4a1f      	ldr	r2, [pc, #124]	; (8000b84 <PCD_EP_OutXfrComplete_int+0xf4>)
 8000b08:	4291      	cmp	r1, r2
 8000b0a:	d902      	bls.n	8000b12 <PCD_EP_OutXfrComplete_int+0x82>
 8000b0c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8000b10:	d128      	bne.n	8000b64 <PCD_EP_OutXfrComplete_int+0xd4>
          hpcd->OUT_ep[epnum].maxpacket -
 8000b12:	00f2      	lsls	r2, r6, #3
 8000b14:	1b92      	subs	r2, r2, r6
 8000b16:	0093      	lsls	r3, r2, #2
 8000b18:	442b      	add	r3, r5
 8000b1a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8000b1e:	6921      	ldr	r1, [r4, #16]
 8000b20:	f3c1 0112 	ubfx	r1, r1, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8000b24:	1a52      	subs	r2, r2, r1
        hpcd->OUT_ep[epnum].xfer_count =
 8000b26:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8000b2a:	f8d3 1204 	ldr.w	r1, [r3, #516]	; 0x204
 8000b2e:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8000b32:	440a      	add	r2, r1
 8000b34:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8000b38:	b2f1      	uxtb	r1, r6
 8000b3a:	4628      	mov	r0, r5
 8000b3c:	f003 fb58 	bl	80041f0 <HAL_PCD_DataOutStageCallback>
        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8000b40:	b9de      	cbnz	r6, 8000b7a <PCD_EP_OutXfrComplete_int+0xea>
 8000b42:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 8000b46:	00b3      	lsls	r3, r6, #2
 8000b48:	442b      	add	r3, r5
 8000b4a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8000b4e:	b9a3      	cbnz	r3, 8000b7a <PCD_EP_OutXfrComplete_int+0xea>
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8000b50:	f505 7271 	add.w	r2, r5, #964	; 0x3c4
 8000b54:	2101      	movs	r1, #1
 8000b56:	6828      	ldr	r0, [r5, #0]
 8000b58:	f002 f9fa 	bl	8002f50 <USB_EP0_OutStart>
 8000b5c:	e00d      	b.n	8000b7a <PCD_EP_OutXfrComplete_int+0xea>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8000b5e:	2320      	movs	r3, #32
 8000b60:	60a3      	str	r3, [r4, #8]
 8000b62:	e00a      	b.n	8000b7a <PCD_EP_OutXfrComplete_int+0xea>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8000b64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b68:	60a3      	str	r3, [r4, #8]
 8000b6a:	e006      	b.n	8000b7a <PCD_EP_OutXfrComplete_int+0xea>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8000b6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b70:	60a3      	str	r3, [r4, #8]
 8000b72:	e002      	b.n	8000b7a <PCD_EP_OutXfrComplete_int+0xea>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8000b74:	b2f1      	uxtb	r1, r6
 8000b76:	f003 fb3b 	bl	80041f0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
}
 8000b7a:	2000      	movs	r0, #0
 8000b7c:	bd70      	pop	{r4, r5, r6, pc}
 8000b7e:	bf00      	nop
 8000b80:	4f54310a 	.word	0x4f54310a
 8000b84:	4f54300a 	.word	0x4f54300a

08000b88 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8000b88:	b538      	push	{r3, r4, r5, lr}
 8000b8a:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000b8c:	6803      	ldr	r3, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8000b8e:	6c1d      	ldr	r5, [r3, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8000b90:	eb03 1141 	add.w	r1, r3, r1, lsl #5
 8000b94:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8000b98:	688a      	ldr	r2, [r1, #8]

  if (hpcd->Init.dma_enable == 1U)
 8000b9a:	6903      	ldr	r3, [r0, #16]
 8000b9c:	2b01      	cmp	r3, #1
 8000b9e:	d00d      	beq.n	8000bbc <PCD_EP_OutSetupPacket_int+0x34>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8000ba0:	4b12      	ldr	r3, [pc, #72]	; (8000bec <PCD_EP_OutSetupPacket_int+0x64>)
 8000ba2:	429d      	cmp	r5, r3
 8000ba4:	d014      	beq.n	8000bd0 <PCD_EP_OutSetupPacket_int+0x48>

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8000ba6:	4620      	mov	r0, r4
 8000ba8:	f003 fb1a 	bl	80041e0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8000bac:	4b10      	ldr	r3, [pc, #64]	; (8000bf0 <PCD_EP_OutSetupPacket_int+0x68>)
 8000bae:	429d      	cmp	r5, r3
 8000bb0:	d902      	bls.n	8000bb8 <PCD_EP_OutSetupPacket_int+0x30>
 8000bb2:	6923      	ldr	r3, [r4, #16]
 8000bb4:	2b01      	cmp	r3, #1
 8000bb6:	d012      	beq.n	8000bde <PCD_EP_OutSetupPacket_int+0x56>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
  }

  return HAL_OK;
}
 8000bb8:	2000      	movs	r0, #0
 8000bba:	bd38      	pop	{r3, r4, r5, pc}
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8000bbc:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <PCD_EP_OutSetupPacket_int+0x68>)
 8000bbe:	429d      	cmp	r5, r3
 8000bc0:	d9f1      	bls.n	8000ba6 <PCD_EP_OutSetupPacket_int+0x1e>
 8000bc2:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8000bc6:	d0ee      	beq.n	8000ba6 <PCD_EP_OutSetupPacket_int+0x1e>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8000bc8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000bcc:	608b      	str	r3, [r1, #8]
 8000bce:	e7ea      	b.n	8000ba6 <PCD_EP_OutSetupPacket_int+0x1e>
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8000bd0:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8000bd4:	d0e7      	beq.n	8000ba6 <PCD_EP_OutSetupPacket_int+0x1e>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8000bd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000bda:	608b      	str	r3, [r1, #8]
 8000bdc:	e7e3      	b.n	8000ba6 <PCD_EP_OutSetupPacket_int+0x1e>
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8000bde:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8000be2:	2101      	movs	r1, #1
 8000be4:	6820      	ldr	r0, [r4, #0]
 8000be6:	f002 f9b3 	bl	8002f50 <USB_EP0_OutStart>
 8000bea:	e7e5      	b.n	8000bb8 <PCD_EP_OutSetupPacket_int+0x30>
 8000bec:	4f54310a 	.word	0x4f54310a
 8000bf0:	4f54300a 	.word	0x4f54300a

08000bf4 <HAL_PCD_IRQHandler>:
{
 8000bf4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000bf8:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000bfa:	6805      	ldr	r5, [r0, #0]
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8000bfc:	4628      	mov	r0, r5
 8000bfe:	f002 f987 	bl	8002f10 <USB_GetMode>
 8000c02:	b108      	cbz	r0, 8000c08 <HAL_PCD_IRQHandler+0x14>
}
 8000c04:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c08:	46a8      	mov	r8, r5
 8000c0a:	4606      	mov	r6, r0
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8000c0c:	6820      	ldr	r0, [r4, #0]
 8000c0e:	f002 f94e 	bl	8002eae <USB_ReadInterrupts>
 8000c12:	2800      	cmp	r0, #0
 8000c14:	d0f6      	beq.n	8000c04 <HAL_PCD_IRQHandler+0x10>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8000c16:	6820      	ldr	r0, [r4, #0]
 8000c18:	f002 f949 	bl	8002eae <USB_ReadInterrupts>
 8000c1c:	f010 0f02 	tst.w	r0, #2
 8000c20:	d004      	beq.n	8000c2c <HAL_PCD_IRQHandler+0x38>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8000c22:	6822      	ldr	r2, [r4, #0]
 8000c24:	6953      	ldr	r3, [r2, #20]
 8000c26:	f003 0302 	and.w	r3, r3, #2
 8000c2a:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8000c2c:	6820      	ldr	r0, [r4, #0]
 8000c2e:	f002 f93e 	bl	8002eae <USB_ReadInterrupts>
 8000c32:	f410 2f00 	tst.w	r0, #524288	; 0x80000
 8000c36:	f040 8092 	bne.w	8000d5e <HAL_PCD_IRQHandler+0x16a>
  uint32_t i, ep_intr, epint, epnum = 0U;
 8000c3a:	4637      	mov	r7, r6
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8000c3c:	6820      	ldr	r0, [r4, #0]
 8000c3e:	f002 f936 	bl	8002eae <USB_ReadInterrupts>
 8000c42:	f410 2f80 	tst.w	r0, #262144	; 0x40000
 8000c46:	f040 80dc 	bne.w	8000e02 <HAL_PCD_IRQHandler+0x20e>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8000c4a:	6820      	ldr	r0, [r4, #0]
 8000c4c:	f002 f92f 	bl	8002eae <USB_ReadInterrupts>
 8000c50:	2800      	cmp	r0, #0
 8000c52:	f2c0 814a 	blt.w	8000eea <HAL_PCD_IRQHandler+0x2f6>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8000c56:	6820      	ldr	r0, [r4, #0]
 8000c58:	f002 f929 	bl	8002eae <USB_ReadInterrupts>
 8000c5c:	f410 6f00 	tst.w	r0, #2048	; 0x800
 8000c60:	d00a      	beq.n	8000c78 <HAL_PCD_IRQHandler+0x84>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8000c62:	f8d5 3808 	ldr.w	r3, [r5, #2056]	; 0x808
 8000c66:	f013 0f01 	tst.w	r3, #1
 8000c6a:	f040 8158 	bne.w	8000f1e <HAL_PCD_IRQHandler+0x32a>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8000c6e:	6822      	ldr	r2, [r4, #0]
 8000c70:	6953      	ldr	r3, [r2, #20]
 8000c72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c76:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8000c78:	6820      	ldr	r0, [r4, #0]
 8000c7a:	f002 f918 	bl	8002eae <USB_ReadInterrupts>
 8000c7e:	f010 6f00 	tst.w	r0, #134217728	; 0x8000000
 8000c82:	d015      	beq.n	8000cb0 <HAL_PCD_IRQHandler+0xbc>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8000c84:	6822      	ldr	r2, [r4, #0]
 8000c86:	6953      	ldr	r3, [r2, #20]
 8000c88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000c8c:	6153      	str	r3, [r2, #20]
      if (hpcd->LPM_State == LPM_L0)
 8000c8e:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f040 8147 	bne.w	8000f26 <HAL_PCD_IRQHandler+0x332>
        hpcd->LPM_State = LPM_L1;
 8000c98:	2101      	movs	r1, #1
 8000c9a:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8000c9e:	6823      	ldr	r3, [r4, #0]
 8000ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ca2:	f3c3 0383 	ubfx	r3, r3, #2, #4
 8000ca6:	f8c4 33f8 	str.w	r3, [r4, #1016]	; 0x3f8
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8000caa:	4620      	mov	r0, r4
 8000cac:	f003 fb5c 	bl	8004368 <HAL_PCDEx_LPM_Callback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8000cb0:	6820      	ldr	r0, [r4, #0]
 8000cb2:	f002 f8fc 	bl	8002eae <USB_ReadInterrupts>
 8000cb6:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 8000cba:	f040 8138 	bne.w	8000f2e <HAL_PCD_IRQHandler+0x33a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8000cbe:	6820      	ldr	r0, [r4, #0]
 8000cc0:	f002 f8f5 	bl	8002eae <USB_ReadInterrupts>
 8000cc4:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 8000cc8:	f040 818a 	bne.w	8000fe0 <HAL_PCD_IRQHandler+0x3ec>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8000ccc:	6820      	ldr	r0, [r4, #0]
 8000cce:	f002 f8ee 	bl	8002eae <USB_ReadInterrupts>
 8000cd2:	f010 0f10 	tst.w	r0, #16
 8000cd6:	d014      	beq.n	8000d02 <HAL_PCD_IRQHandler+0x10e>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000cd8:	6822      	ldr	r2, [r4, #0]
 8000cda:	6993      	ldr	r3, [r2, #24]
 8000cdc:	f023 0310 	bic.w	r3, r3, #16
 8000ce0:	6193      	str	r3, [r2, #24]
      temp = USBx->GRXSTSP;
 8000ce2:	6a2e      	ldr	r6, [r5, #32]
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8000ce4:	f006 080f 	and.w	r8, r6, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8000ce8:	f3c6 4343 	ubfx	r3, r6, #17, #4
 8000cec:	2b02      	cmp	r3, #2
 8000cee:	f000 8194 	beq.w	800101a <HAL_PCD_IRQHandler+0x426>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8000cf2:	2b06      	cmp	r3, #6
 8000cf4:	f000 81b2 	beq.w	800105c <HAL_PCD_IRQHandler+0x468>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000cf8:	6822      	ldr	r2, [r4, #0]
 8000cfa:	6993      	ldr	r3, [r2, #24]
 8000cfc:	f043 0310 	orr.w	r3, r3, #16
 8000d00:	6193      	str	r3, [r2, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8000d02:	6820      	ldr	r0, [r4, #0]
 8000d04:	f002 f8d3 	bl	8002eae <USB_ReadInterrupts>
 8000d08:	f010 0f08 	tst.w	r0, #8
 8000d0c:	f040 81ba 	bne.w	8001084 <HAL_PCD_IRQHandler+0x490>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8000d10:	6820      	ldr	r0, [r4, #0]
 8000d12:	f002 f8cc 	bl	8002eae <USB_ReadInterrupts>
 8000d16:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 8000d1a:	f040 81bc 	bne.w	8001096 <HAL_PCD_IRQHandler+0x4a2>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8000d1e:	6820      	ldr	r0, [r4, #0]
 8000d20:	f002 f8c5 	bl	8002eae <USB_ReadInterrupts>
 8000d24:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
 8000d28:	f040 81bf 	bne.w	80010aa <HAL_PCD_IRQHandler+0x4b6>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8000d2c:	6820      	ldr	r0, [r4, #0]
 8000d2e:	f002 f8be 	bl	8002eae <USB_ReadInterrupts>
 8000d32:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8000d36:	f040 81c2 	bne.w	80010be <HAL_PCD_IRQHandler+0x4ca>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8000d3a:	6820      	ldr	r0, [r4, #0]
 8000d3c:	f002 f8b7 	bl	8002eae <USB_ReadInterrupts>
 8000d40:	f010 0f04 	tst.w	r0, #4
 8000d44:	f43f af5e 	beq.w	8000c04 <HAL_PCD_IRQHandler+0x10>
      temp = hpcd->Instance->GOTGINT;
 8000d48:	6823      	ldr	r3, [r4, #0]
 8000d4a:	685d      	ldr	r5, [r3, #4]
      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8000d4c:	f015 0f04 	tst.w	r5, #4
 8000d50:	f040 81be 	bne.w	80010d0 <HAL_PCD_IRQHandler+0x4dc>
      hpcd->Instance->GOTGINT |= temp;
 8000d54:	6822      	ldr	r2, [r4, #0]
 8000d56:	6853      	ldr	r3, [r2, #4]
 8000d58:	432b      	orrs	r3, r5
 8000d5a:	6053      	str	r3, [r2, #4]
 8000d5c:	e752      	b.n	8000c04 <HAL_PCD_IRQHandler+0x10>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8000d5e:	6820      	ldr	r0, [r4, #0]
 8000d60:	f002 f8a9 	bl	8002eb6 <USB_ReadDevAllOutEpInterrupt>
 8000d64:	4681      	mov	r9, r0
      epnum = 0U;
 8000d66:	4637      	mov	r7, r6
      while (ep_intr != 0U)
 8000d68:	e024      	b.n	8000db4 <HAL_PCD_IRQHandler+0x1c0>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8000d6a:	eb08 1347 	add.w	r3, r8, r7, lsl #5
 8000d6e:	2201      	movs	r2, #1
 8000d70:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8000d74:	4639      	mov	r1, r7
 8000d76:	4620      	mov	r0, r4
 8000d78:	f7ff fe8a 	bl	8000a90 <PCD_EP_OutXfrComplete_int>
 8000d7c:	e029      	b.n	8000dd2 <HAL_PCD_IRQHandler+0x1de>
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8000d7e:	4639      	mov	r1, r7
 8000d80:	4620      	mov	r0, r4
 8000d82:	f7ff ff01 	bl	8000b88 <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8000d86:	eb08 1347 	add.w	r3, r8, r7, lsl #5
 8000d8a:	2208      	movs	r2, #8
 8000d8c:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
 8000d90:	e022      	b.n	8000dd8 <HAL_PCD_IRQHandler+0x1e4>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8000d92:	eb08 1347 	add.w	r3, r8, r7, lsl #5
 8000d96:	2220      	movs	r2, #32
 8000d98:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8000d9c:	f41a 5f00 	tst.w	sl, #8192	; 0x2000
 8000da0:	d005      	beq.n	8000dae <HAL_PCD_IRQHandler+0x1ba>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8000da2:	eb08 1347 	add.w	r3, r8, r7, lsl #5
 8000da6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000daa:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
        epnum++;
 8000dae:	3701      	adds	r7, #1
        ep_intr >>= 1U;
 8000db0:	ea4f 0959 	mov.w	r9, r9, lsr #1
      while (ep_intr != 0U)
 8000db4:	f1b9 0f00 	cmp.w	r9, #0
 8000db8:	f43f af40 	beq.w	8000c3c <HAL_PCD_IRQHandler+0x48>
        if ((ep_intr & 0x1U) != 0U)
 8000dbc:	f019 0f01 	tst.w	r9, #1
 8000dc0:	d0f5      	beq.n	8000dae <HAL_PCD_IRQHandler+0x1ba>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8000dc2:	b2f9      	uxtb	r1, r7
 8000dc4:	6820      	ldr	r0, [r4, #0]
 8000dc6:	f002 f886 	bl	8002ed6 <USB_ReadDevOutEPInterrupt>
 8000dca:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8000dcc:	f010 0f01 	tst.w	r0, #1
 8000dd0:	d1cb      	bne.n	8000d6a <HAL_PCD_IRQHandler+0x176>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8000dd2:	f01a 0f08 	tst.w	sl, #8
 8000dd6:	d1d2      	bne.n	8000d7e <HAL_PCD_IRQHandler+0x18a>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8000dd8:	f01a 0f10 	tst.w	sl, #16
 8000ddc:	d004      	beq.n	8000de8 <HAL_PCD_IRQHandler+0x1f4>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8000dde:	eb08 1347 	add.w	r3, r8, r7, lsl #5
 8000de2:	2210      	movs	r2, #16
 8000de4:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8000de8:	f01a 0f20 	tst.w	sl, #32
 8000dec:	d0d6      	beq.n	8000d9c <HAL_PCD_IRQHandler+0x1a8>
            if (hpcd->Init.dma_enable == 1U)
 8000dee:	6923      	ldr	r3, [r4, #16]
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d1ce      	bne.n	8000d92 <HAL_PCD_IRQHandler+0x19e>
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8000df4:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8000df8:	2101      	movs	r1, #1
 8000dfa:	6820      	ldr	r0, [r4, #0]
 8000dfc:	f002 f8a8 	bl	8002f50 <USB_EP0_OutStart>
 8000e00:	e7c7      	b.n	8000d92 <HAL_PCD_IRQHandler+0x19e>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8000e02:	6820      	ldr	r0, [r4, #0]
 8000e04:	f002 f85f 	bl	8002ec6 <USB_ReadDevAllInEpInterrupt>
 8000e08:	4681      	mov	r9, r0
      epnum = 0U;
 8000e0a:	4637      	mov	r7, r6
      while (ep_intr != 0U)
 8000e0c:	e02e      	b.n	8000e6c <HAL_PCD_IRQHandler+0x278>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8000e0e:	00fa      	lsls	r2, r7, #3
 8000e10:	1bd2      	subs	r2, r2, r7
 8000e12:	0093      	lsls	r3, r2, #2
 8000e14:	4423      	add	r3, r4
 8000e16:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8000e18:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000e1a:	440a      	add	r2, r1
 8000e1c:	649a      	str	r2, [r3, #72]	; 0x48
 8000e1e:	e048      	b.n	8000eb2 <HAL_PCD_IRQHandler+0x2be>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8000e20:	f01a 0f08 	tst.w	sl, #8
 8000e24:	d004      	beq.n	8000e30 <HAL_PCD_IRQHandler+0x23c>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8000e26:	eb08 1347 	add.w	r3, r8, r7, lsl #5
 8000e2a:	2208      	movs	r2, #8
 8000e2c:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8000e30:	f01a 0f10 	tst.w	sl, #16
 8000e34:	d004      	beq.n	8000e40 <HAL_PCD_IRQHandler+0x24c>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8000e36:	eb08 1347 	add.w	r3, r8, r7, lsl #5
 8000e3a:	2210      	movs	r2, #16
 8000e3c:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8000e40:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8000e44:	d004      	beq.n	8000e50 <HAL_PCD_IRQHandler+0x25c>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8000e46:	eb08 1347 	add.w	r3, r8, r7, lsl #5
 8000e4a:	2240      	movs	r2, #64	; 0x40
 8000e4c:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8000e50:	f01a 0f02 	tst.w	sl, #2
 8000e54:	d004      	beq.n	8000e60 <HAL_PCD_IRQHandler+0x26c>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8000e56:	eb08 1347 	add.w	r3, r8, r7, lsl #5
 8000e5a:	2202      	movs	r2, #2
 8000e5c:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8000e60:	f01a 0f80 	tst.w	sl, #128	; 0x80
 8000e64:	d13c      	bne.n	8000ee0 <HAL_PCD_IRQHandler+0x2ec>
        epnum++;
 8000e66:	3701      	adds	r7, #1
        ep_intr >>= 1U;
 8000e68:	ea4f 0959 	mov.w	r9, r9, lsr #1
      while (ep_intr != 0U)
 8000e6c:	f1b9 0f00 	cmp.w	r9, #0
 8000e70:	f43f aeeb 	beq.w	8000c4a <HAL_PCD_IRQHandler+0x56>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8000e74:	f019 0f01 	tst.w	r9, #1
 8000e78:	d0f5      	beq.n	8000e66 <HAL_PCD_IRQHandler+0x272>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8000e7a:	fa5f fb87 	uxtb.w	fp, r7
 8000e7e:	4659      	mov	r1, fp
 8000e80:	6820      	ldr	r0, [r4, #0]
 8000e82:	f002 f831 	bl	8002ee8 <USB_ReadDevInEPInterrupt>
 8000e86:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8000e88:	f010 0f01 	tst.w	r0, #1
 8000e8c:	d0c8      	beq.n	8000e20 <HAL_PCD_IRQHandler+0x22c>
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8000e8e:	f007 030f 	and.w	r3, r7, #15
 8000e92:	2101      	movs	r1, #1
 8000e94:	fa01 f203 	lsl.w	r2, r1, r3
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000e98:	f8d8 3834 	ldr.w	r3, [r8, #2100]	; 0x834
 8000e9c:	ea23 0302 	bic.w	r3, r3, r2
 8000ea0:	f8c8 3834 	str.w	r3, [r8, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8000ea4:	eb08 1347 	add.w	r3, r8, r7, lsl #5
 8000ea8:	f8c3 1908 	str.w	r1, [r3, #2312]	; 0x908
            if (hpcd->Init.dma_enable == 1U)
 8000eac:	6923      	ldr	r3, [r4, #16]
 8000eae:	428b      	cmp	r3, r1
 8000eb0:	d0ad      	beq.n	8000e0e <HAL_PCD_IRQHandler+0x21a>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8000eb2:	4659      	mov	r1, fp
 8000eb4:	4620      	mov	r0, r4
 8000eb6:	f003 f9a7 	bl	8004208 <HAL_PCD_DataInStageCallback>
            if (hpcd->Init.dma_enable == 1U)
 8000eba:	6923      	ldr	r3, [r4, #16]
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d1af      	bne.n	8000e20 <HAL_PCD_IRQHandler+0x22c>
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8000ec0:	2f00      	cmp	r7, #0
 8000ec2:	d1ad      	bne.n	8000e20 <HAL_PCD_IRQHandler+0x22c>
 8000ec4:	ebc7 02c7 	rsb	r2, r7, r7, lsl #3
 8000ec8:	0093      	lsls	r3, r2, #2
 8000eca:	4423      	add	r3, r4
 8000ecc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d1a6      	bne.n	8000e20 <HAL_PCD_IRQHandler+0x22c>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8000ed2:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8000ed6:	2101      	movs	r1, #1
 8000ed8:	6820      	ldr	r0, [r4, #0]
 8000eda:	f002 f839 	bl	8002f50 <USB_EP0_OutStart>
 8000ede:	e79f      	b.n	8000e20 <HAL_PCD_IRQHandler+0x22c>
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8000ee0:	4639      	mov	r1, r7
 8000ee2:	4620      	mov	r0, r4
 8000ee4:	f7ff fcc4 	bl	8000870 <PCD_WriteEmptyTxFifo>
 8000ee8:	e7bd      	b.n	8000e66 <HAL_PCD_IRQHandler+0x272>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8000eea:	f8d5 3804 	ldr.w	r3, [r5, #2052]	; 0x804
 8000eee:	f023 0301 	bic.w	r3, r3, #1
 8000ef2:	f8c5 3804 	str.w	r3, [r5, #2052]	; 0x804
      if (hpcd->LPM_State == LPM_L1)
 8000ef6:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d008      	beq.n	8000f10 <HAL_PCD_IRQHandler+0x31c>
        HAL_PCD_ResumeCallback(hpcd);
 8000efe:	4620      	mov	r0, r4
 8000f00:	f003 f9c2 	bl	8004288 <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8000f04:	6822      	ldr	r2, [r4, #0]
 8000f06:	6953      	ldr	r3, [r2, #20]
 8000f08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000f0c:	6153      	str	r3, [r2, #20]
 8000f0e:	e6a2      	b.n	8000c56 <HAL_PCD_IRQHandler+0x62>
        hpcd->LPM_State = LPM_L0;
 8000f10:	2100      	movs	r1, #0
 8000f12:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8000f16:	4620      	mov	r0, r4
 8000f18:	f003 fa26 	bl	8004368 <HAL_PCDEx_LPM_Callback>
 8000f1c:	e7f2      	b.n	8000f04 <HAL_PCD_IRQHandler+0x310>
        HAL_PCD_SuspendCallback(hpcd);
 8000f1e:	4620      	mov	r0, r4
 8000f20:	f003 f99a 	bl	8004258 <HAL_PCD_SuspendCallback>
 8000f24:	e6a3      	b.n	8000c6e <HAL_PCD_IRQHandler+0x7a>
        HAL_PCD_SuspendCallback(hpcd);
 8000f26:	4620      	mov	r0, r4
 8000f28:	f003 f996 	bl	8004258 <HAL_PCD_SuspendCallback>
 8000f2c:	e6c0      	b.n	8000cb0 <HAL_PCD_IRQHandler+0xbc>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8000f2e:	f505 6900 	add.w	r9, r5, #2048	; 0x800
 8000f32:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000f36:	f023 0301 	bic.w	r3, r3, #1
 8000f3a:	f8c9 3004 	str.w	r3, [r9, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8000f3e:	2110      	movs	r1, #16
 8000f40:	6820      	ldr	r0, [r4, #0]
 8000f42:	f001 fbe9 	bl	8002718 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f46:	e014      	b.n	8000f72 <HAL_PCD_IRQHandler+0x37e>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8000f48:	eb08 1346 	add.w	r3, r8, r6, lsl #5
 8000f4c:	f64f 317f 	movw	r1, #64383	; 0xfb7f
 8000f50:	f8c3 1908 	str.w	r1, [r3, #2312]	; 0x908
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8000f54:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8000f58:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8000f5c:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8000f60:	f8c3 1b08 	str.w	r1, [r3, #2824]	; 0xb08
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8000f64:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8000f68:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8000f6c:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f70:	3601      	adds	r6, #1
 8000f72:	6863      	ldr	r3, [r4, #4]
 8000f74:	42b3      	cmp	r3, r6
 8000f76:	d8e7      	bhi.n	8000f48 <HAL_PCD_IRQHandler+0x354>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8000f78:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8000f7c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8000f80:	f8c9 301c 	str.w	r3, [r9, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8000f84:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000f86:	b1eb      	cbz	r3, 8000fc4 <HAL_PCD_IRQHandler+0x3d0>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8000f88:	f8d9 3084 	ldr.w	r3, [r9, #132]	; 0x84
 8000f8c:	f043 030b 	orr.w	r3, r3, #11
 8000f90:	f8c9 3084 	str.w	r3, [r9, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8000f94:	f8d9 3044 	ldr.w	r3, [r9, #68]	; 0x44
 8000f98:	f043 030b 	orr.w	r3, r3, #11
 8000f9c:	f8c9 3044 	str.w	r3, [r9, #68]	; 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8000fa0:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800
 8000fa4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8000fa8:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8000fac:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8000fb0:	7c21      	ldrb	r1, [r4, #16]
 8000fb2:	6820      	ldr	r0, [r4, #0]
 8000fb4:	f001 ffcc 	bl	8002f50 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8000fb8:	6822      	ldr	r2, [r4, #0]
 8000fba:	6953      	ldr	r3, [r2, #20]
 8000fbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fc0:	6153      	str	r3, [r2, #20]
 8000fc2:	e67c      	b.n	8000cbe <HAL_PCD_IRQHandler+0xca>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8000fc4:	f8d9 2014 	ldr.w	r2, [r9, #20]
 8000fc8:	f242 032b 	movw	r3, #8235	; 0x202b
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	f8c9 3014 	str.w	r3, [r9, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8000fd2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8000fd6:	f043 030b 	orr.w	r3, r3, #11
 8000fda:	f8c9 3010 	str.w	r3, [r9, #16]
 8000fde:	e7df      	b.n	8000fa0 <HAL_PCD_IRQHandler+0x3ac>
      (void)USB_ActivateSetup(hpcd->Instance);
 8000fe0:	6820      	ldr	r0, [r4, #0]
 8000fe2:	f001 ff99 	bl	8002f18 <USB_ActivateSetup>
      if (USB_GetDevSpeed(hpcd->Instance) == USB_OTG_SPEED_HIGH)
 8000fe6:	6820      	ldr	r0, [r4, #0]
 8000fe8:	f001 fc9e 	bl	8002928 <USB_GetDevSpeed>
 8000fec:	b990      	cbnz	r0, 8001014 <HAL_PCD_IRQHandler+0x420>
        hpcd->Init.speed = USB_OTG_SPEED_HIGH;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60e3      	str	r3, [r4, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8000ff2:	6826      	ldr	r6, [r4, #0]
 8000ff4:	f000 fd60 	bl	8001ab8 <HAL_RCC_GetHCLKFreq>
 8000ff8:	7b22      	ldrb	r2, [r4, #12]
 8000ffa:	4601      	mov	r1, r0
 8000ffc:	4630      	mov	r0, r6
 8000ffe:	f001 faf1 	bl	80025e4 <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 8001002:	4620      	mov	r0, r4
 8001004:	f003 f911 	bl	800422a <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001008:	6822      	ldr	r2, [r4, #0]
 800100a:	6953      	ldr	r3, [r2, #20]
 800100c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001010:	6153      	str	r3, [r2, #20]
 8001012:	e65b      	b.n	8000ccc <HAL_PCD_IRQHandler+0xd8>
        hpcd->Init.speed = USB_OTG_SPEED_FULL;
 8001014:	2303      	movs	r3, #3
 8001016:	60e3      	str	r3, [r4, #12]
 8001018:	e7eb      	b.n	8000ff2 <HAL_PCD_IRQHandler+0x3fe>
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800101a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800101e:	421e      	tst	r6, r3
 8001020:	f43f ae6a 	beq.w	8000cf8 <HAL_PCD_IRQHandler+0x104>
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001024:	ea4f 0ac8 	mov.w	sl, r8, lsl #3
 8001028:	ebaa 0308 	sub.w	r3, sl, r8
 800102c:	ea4f 0983 	mov.w	r9, r3, lsl #2
 8001030:	44a1      	add	r9, r4
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001032:	0936      	lsrs	r6, r6, #4
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001034:	f3c6 020a 	ubfx	r2, r6, #0, #11
 8001038:	f8d9 1208 	ldr.w	r1, [r9, #520]	; 0x208
 800103c:	4628      	mov	r0, r5
 800103e:	f001 fe9f 	bl	8002d80 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001042:	f3c6 060a 	ubfx	r6, r6, #0, #11
 8001046:	f8d9 3208 	ldr.w	r3, [r9, #520]	; 0x208
 800104a:	4433      	add	r3, r6
 800104c:	f8c9 3208 	str.w	r3, [r9, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001050:	f8d9 3214 	ldr.w	r3, [r9, #532]	; 0x214
 8001054:	441e      	add	r6, r3
 8001056:	f8c9 6214 	str.w	r6, [r9, #532]	; 0x214
 800105a:	e64d      	b.n	8000cf8 <HAL_PCD_IRQHandler+0x104>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800105c:	2208      	movs	r2, #8
 800105e:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 8001062:	4628      	mov	r0, r5
 8001064:	f001 fe8c 	bl	8002d80 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001068:	f3c6 160a 	ubfx	r6, r6, #4, #11
 800106c:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8001070:	eba3 0108 	sub.w	r1, r3, r8
 8001074:	008a      	lsls	r2, r1, #2
 8001076:	4422      	add	r2, r4
 8001078:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
 800107c:	441e      	add	r6, r3
 800107e:	f8c2 6214 	str.w	r6, [r2, #532]	; 0x214
 8001082:	e639      	b.n	8000cf8 <HAL_PCD_IRQHandler+0x104>
      HAL_PCD_SOFCallback(hpcd);
 8001084:	4620      	mov	r0, r4
 8001086:	f003 f8ca 	bl	800421e <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800108a:	6822      	ldr	r2, [r4, #0]
 800108c:	6953      	ldr	r3, [r2, #20]
 800108e:	f003 0308 	and.w	r3, r3, #8
 8001092:	6153      	str	r3, [r2, #20]
 8001094:	e63c      	b.n	8000d10 <HAL_PCD_IRQHandler+0x11c>
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001096:	b2f9      	uxtb	r1, r7
 8001098:	4620      	mov	r0, r4
 800109a:	f003 f901 	bl	80042a0 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800109e:	6822      	ldr	r2, [r4, #0]
 80010a0:	6953      	ldr	r3, [r2, #20]
 80010a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010a6:	6153      	str	r3, [r2, #20]
 80010a8:	e639      	b.n	8000d1e <HAL_PCD_IRQHandler+0x12a>
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80010aa:	b2f9      	uxtb	r1, r7
 80010ac:	4620      	mov	r0, r4
 80010ae:	f003 f8f1 	bl	8004294 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80010b2:	6822      	ldr	r2, [r4, #0]
 80010b4:	6953      	ldr	r3, [r2, #20]
 80010b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010ba:	6153      	str	r3, [r2, #20]
 80010bc:	e636      	b.n	8000d2c <HAL_PCD_IRQHandler+0x138>
      HAL_PCD_ConnectCallback(hpcd);
 80010be:	4620      	mov	r0, r4
 80010c0:	f003 f8f4 	bl	80042ac <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80010c4:	6822      	ldr	r2, [r4, #0]
 80010c6:	6953      	ldr	r3, [r2, #20]
 80010c8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80010cc:	6153      	str	r3, [r2, #20]
 80010ce:	e634      	b.n	8000d3a <HAL_PCD_IRQHandler+0x146>
        HAL_PCD_DisconnectCallback(hpcd);
 80010d0:	4620      	mov	r0, r4
 80010d2:	f003 f8f1 	bl	80042b8 <HAL_PCD_DisconnectCallback>
 80010d6:	e63d      	b.n	8000d54 <HAL_PCD_IRQHandler+0x160>

080010d8 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 80010d8:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d00d      	beq.n	80010fc <HAL_PCD_SetAddress+0x24>
{
 80010e0:	b510      	push	{r4, lr}
 80010e2:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80010e4:	2301      	movs	r3, #1
 80010e6:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80010ea:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80010ee:	6800      	ldr	r0, [r0, #0]
 80010f0:	f001 feb5 	bl	8002e5e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80010f4:	2000      	movs	r0, #0
 80010f6:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 80010fa:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80010fc:	2002      	movs	r0, #2
}
 80010fe:	4770      	bx	lr

08001100 <HAL_PCD_EP_Open>:
{
 8001100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((ep_addr & 0x80U) == 0x80U)
 8001102:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001106:	d128      	bne.n	800115a <HAL_PCD_EP_Open+0x5a>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001108:	f001 060f 	and.w	r6, r1, #15
 800110c:	00f5      	lsls	r5, r6, #3
 800110e:	1baf      	subs	r7, r5, r6
 8001110:	00bc      	lsls	r4, r7, #2
 8001112:	4627      	mov	r7, r4
 8001114:	f504 74fc 	add.w	r4, r4, #504	; 0x1f8
 8001118:	4404      	add	r4, r0
 800111a:	3404      	adds	r4, #4
    ep->is_in = 0U;
 800111c:	463e      	mov	r6, r7
 800111e:	4406      	add	r6, r0
 8001120:	2500      	movs	r5, #0
 8001122:	f886 51fd 	strb.w	r5, [r6, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 8001126:	f001 010f 	and.w	r1, r1, #15
 800112a:	7021      	strb	r1, [r4, #0]
  ep->maxpacket = ep_mps;
 800112c:	60a2      	str	r2, [r4, #8]
  ep->type = ep_type;
 800112e:	70e3      	strb	r3, [r4, #3]
  if (ep->is_in != 0U)
 8001130:	7862      	ldrb	r2, [r4, #1]
 8001132:	b102      	cbz	r2, 8001136 <HAL_PCD_EP_Open+0x36>
    ep->tx_fifo_num = ep->num;
 8001134:	80e1      	strh	r1, [r4, #6]
  if (ep_type == EP_TYPE_BULK)
 8001136:	2b02      	cmp	r3, #2
 8001138:	d01e      	beq.n	8001178 <HAL_PCD_EP_Open+0x78>
  __HAL_LOCK(hpcd);
 800113a:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 800113e:	2b01      	cmp	r3, #1
 8001140:	d01d      	beq.n	800117e <HAL_PCD_EP_Open+0x7e>
 8001142:	4605      	mov	r5, r0
 8001144:	2301      	movs	r3, #1
 8001146:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800114a:	4621      	mov	r1, r4
 800114c:	6800      	ldr	r0, [r0, #0]
 800114e:	f001 fbfb 	bl	8002948 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001152:	2000      	movs	r0, #0
 8001154:	f885 03bc 	strb.w	r0, [r5, #956]	; 0x3bc
}
 8001158:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800115a:	f001 060f 	and.w	r6, r1, #15
 800115e:	00f5      	lsls	r5, r6, #3
 8001160:	1baf      	subs	r7, r5, r6
 8001162:	00bc      	lsls	r4, r7, #2
 8001164:	4627      	mov	r7, r4
 8001166:	3438      	adds	r4, #56	; 0x38
 8001168:	4404      	add	r4, r0
 800116a:	3404      	adds	r4, #4
    ep->is_in = 1U;
 800116c:	463e      	mov	r6, r7
 800116e:	4406      	add	r6, r0
 8001170:	2501      	movs	r5, #1
 8001172:	f886 503d 	strb.w	r5, [r6, #61]	; 0x3d
 8001176:	e7d6      	b.n	8001126 <HAL_PCD_EP_Open+0x26>
    ep->data_pid_start = 0U;
 8001178:	2300      	movs	r3, #0
 800117a:	7123      	strb	r3, [r4, #4]
 800117c:	e7dd      	b.n	800113a <HAL_PCD_EP_Open+0x3a>
  __HAL_LOCK(hpcd);
 800117e:	2002      	movs	r0, #2
 8001180:	e7ea      	b.n	8001158 <HAL_PCD_EP_Open+0x58>

08001182 <HAL_PCD_EP_Close>:
{
 8001182:	b538      	push	{r3, r4, r5, lr}
  if ((ep_addr & 0x80U) == 0x80U)
 8001184:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001188:	d121      	bne.n	80011ce <HAL_PCD_EP_Close+0x4c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800118a:	f001 050f 	and.w	r5, r1, #15
 800118e:	00ea      	lsls	r2, r5, #3
 8001190:	1b54      	subs	r4, r2, r5
 8001192:	00a3      	lsls	r3, r4, #2
 8001194:	461c      	mov	r4, r3
 8001196:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800119a:	4403      	add	r3, r0
 800119c:	3304      	adds	r3, #4
    ep->is_in = 0U;
 800119e:	4625      	mov	r5, r4
 80011a0:	4405      	add	r5, r0
 80011a2:	2200      	movs	r2, #0
 80011a4:	f885 21fd 	strb.w	r2, [r5, #509]	; 0x1fd
  ep->num   = ep_addr & EP_ADDR_MSK;
 80011a8:	f001 010f 	and.w	r1, r1, #15
 80011ac:	7019      	strb	r1, [r3, #0]
  __HAL_LOCK(hpcd);
 80011ae:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 80011b2:	2a01      	cmp	r2, #1
 80011b4:	d01a      	beq.n	80011ec <HAL_PCD_EP_Close+0x6a>
 80011b6:	4604      	mov	r4, r0
 80011b8:	2201      	movs	r2, #1
 80011ba:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80011be:	4619      	mov	r1, r3
 80011c0:	6800      	ldr	r0, [r0, #0]
 80011c2:	f001 fc09 	bl	80029d8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80011c6:	2000      	movs	r0, #0
 80011c8:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 80011cc:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80011ce:	f001 040f 	and.w	r4, r1, #15
 80011d2:	00e2      	lsls	r2, r4, #3
 80011d4:	1b15      	subs	r5, r2, r4
 80011d6:	00ab      	lsls	r3, r5, #2
 80011d8:	461d      	mov	r5, r3
 80011da:	3338      	adds	r3, #56	; 0x38
 80011dc:	4403      	add	r3, r0
 80011de:	3304      	adds	r3, #4
    ep->is_in = 1U;
 80011e0:	462c      	mov	r4, r5
 80011e2:	4404      	add	r4, r0
 80011e4:	2201      	movs	r2, #1
 80011e6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 80011ea:	e7dd      	b.n	80011a8 <HAL_PCD_EP_Close+0x26>
  __HAL_LOCK(hpcd);
 80011ec:	2002      	movs	r0, #2
 80011ee:	e7ed      	b.n	80011cc <HAL_PCD_EP_Close+0x4a>

080011f0 <HAL_PCD_EP_Receive>:
{
 80011f0:	b570      	push	{r4, r5, r6, lr}
 80011f2:	f001 050f 	and.w	r5, r1, #15
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80011f6:	00ee      	lsls	r6, r5, #3
 80011f8:	1b71      	subs	r1, r6, r5
 80011fa:	008c      	lsls	r4, r1, #2
 80011fc:	f504 74fc 	add.w	r4, r4, #504	; 0x1f8
 8001200:	4404      	add	r4, r0
 8001202:	1d21      	adds	r1, r4, #4
  ep->xfer_buff = pBuf;
 8001204:	1b76      	subs	r6, r6, r5
 8001206:	00b4      	lsls	r4, r6, #2
 8001208:	4404      	add	r4, r0
 800120a:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
  ep->xfer_len = len;
 800120e:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->xfer_count = 0U;
 8001212:	2300      	movs	r3, #0
 8001214:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
  ep->is_in = 0U;
 8001218:	f884 31fd 	strb.w	r3, [r4, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 800121c:	f884 51fc 	strb.w	r5, [r4, #508]	; 0x1fc
  if (hpcd->Init.dma_enable == 1U)
 8001220:	6903      	ldr	r3, [r0, #16]
 8001222:	2b01      	cmp	r3, #1
 8001224:	d006      	beq.n	8001234 <HAL_PCD_EP_Receive+0x44>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001226:	b165      	cbz	r5, 8001242 <HAL_PCD_EP_Receive+0x52>
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001228:	b2da      	uxtb	r2, r3
 800122a:	6800      	ldr	r0, [r0, #0]
 800122c:	f001 fcb4 	bl	8002b98 <USB_EPStartXfer>
}
 8001230:	2000      	movs	r0, #0
 8001232:	bd70      	pop	{r4, r5, r6, pc}
    ep->dma_addr = (uint32_t)pBuf;
 8001234:	ebc5 06c5 	rsb	r6, r5, r5, lsl #3
 8001238:	00b4      	lsls	r4, r6, #2
 800123a:	4404      	add	r4, r0
 800123c:	f8c4 220c 	str.w	r2, [r4, #524]	; 0x20c
 8001240:	e7f1      	b.n	8001226 <HAL_PCD_EP_Receive+0x36>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001242:	b2da      	uxtb	r2, r3
 8001244:	6800      	ldr	r0, [r0, #0]
 8001246:	f001 fc0f 	bl	8002a68 <USB_EP0StartXfer>
 800124a:	e7f1      	b.n	8001230 <HAL_PCD_EP_Receive+0x40>

0800124c <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800124c:	f001 010f 	and.w	r1, r1, #15
 8001250:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8001254:	008b      	lsls	r3, r1, #2
 8001256:	4418      	add	r0, r3
}
 8001258:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
 800125c:	4770      	bx	lr

0800125e <HAL_PCD_EP_Transmit>:
{
 800125e:	b570      	push	{r4, r5, r6, lr}
 8001260:	f001 050f 	and.w	r5, r1, #15
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001264:	00ee      	lsls	r6, r5, #3
 8001266:	1b71      	subs	r1, r6, r5
 8001268:	008c      	lsls	r4, r1, #2
 800126a:	3438      	adds	r4, #56	; 0x38
 800126c:	4404      	add	r4, r0
 800126e:	1d21      	adds	r1, r4, #4
  ep->xfer_buff = pBuf;
 8001270:	1b76      	subs	r6, r6, r5
 8001272:	00b4      	lsls	r4, r6, #2
 8001274:	4404      	add	r4, r0
 8001276:	64a2      	str	r2, [r4, #72]	; 0x48
  ep->xfer_len = len;
 8001278:	6523      	str	r3, [r4, #80]	; 0x50
  ep->xfer_count = 0U;
 800127a:	2300      	movs	r3, #0
 800127c:	6563      	str	r3, [r4, #84]	; 0x54
  ep->is_in = 1U;
 800127e:	2301      	movs	r3, #1
 8001280:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  ep->num = ep_addr & EP_ADDR_MSK;
 8001284:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (hpcd->Init.dma_enable == 1U)
 8001288:	6903      	ldr	r3, [r0, #16]
 800128a:	2b01      	cmp	r3, #1
 800128c:	d006      	beq.n	800129c <HAL_PCD_EP_Transmit+0x3e>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800128e:	b15d      	cbz	r5, 80012a8 <HAL_PCD_EP_Transmit+0x4a>
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001290:	b2da      	uxtb	r2, r3
 8001292:	6800      	ldr	r0, [r0, #0]
 8001294:	f001 fc80 	bl	8002b98 <USB_EPStartXfer>
}
 8001298:	2000      	movs	r0, #0
 800129a:	bd70      	pop	{r4, r5, r6, pc}
    ep->dma_addr = (uint32_t)pBuf;
 800129c:	ebc5 06c5 	rsb	r6, r5, r5, lsl #3
 80012a0:	00b4      	lsls	r4, r6, #2
 80012a2:	4404      	add	r4, r0
 80012a4:	64e2      	str	r2, [r4, #76]	; 0x4c
 80012a6:	e7f2      	b.n	800128e <HAL_PCD_EP_Transmit+0x30>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80012a8:	b2da      	uxtb	r2, r3
 80012aa:	6800      	ldr	r0, [r0, #0]
 80012ac:	f001 fbdc 	bl	8002a68 <USB_EP0StartXfer>
 80012b0:	e7f2      	b.n	8001298 <HAL_PCD_EP_Transmit+0x3a>

080012b2 <HAL_PCD_EP_SetStall>:
{
 80012b2:	b538      	push	{r3, r4, r5, lr}
 80012b4:	f001 050f 	and.w	r5, r1, #15
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80012b8:	6843      	ldr	r3, [r0, #4]
 80012ba:	429d      	cmp	r5, r3
 80012bc:	d836      	bhi.n	800132c <HAL_PCD_EP_SetStall+0x7a>
  if ((0x80U & ep_addr) == 0x80U)
 80012be:	f011 0f80 	tst.w	r1, #128	; 0x80
 80012c2:	d120      	bne.n	8001306 <HAL_PCD_EP_SetStall+0x54>
    ep = &hpcd->OUT_ep[ep_addr];
 80012c4:	00ca      	lsls	r2, r1, #3
 80012c6:	1a54      	subs	r4, r2, r1
 80012c8:	00a3      	lsls	r3, r4, #2
 80012ca:	461c      	mov	r4, r3
 80012cc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80012d0:	4403      	add	r3, r0
 80012d2:	3304      	adds	r3, #4
    ep->is_in = 0U;
 80012d4:	4622      	mov	r2, r4
 80012d6:	4402      	add	r2, r0
 80012d8:	2100      	movs	r1, #0
 80012da:	f882 11fd 	strb.w	r1, [r2, #509]	; 0x1fd
  ep->is_stall = 1U;
 80012de:	2201      	movs	r2, #1
 80012e0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80012e2:	701d      	strb	r5, [r3, #0]
  __HAL_LOCK(hpcd);
 80012e4:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 80012e8:	2a01      	cmp	r2, #1
 80012ea:	d021      	beq.n	8001330 <HAL_PCD_EP_SetStall+0x7e>
 80012ec:	4604      	mov	r4, r0
 80012ee:	2201      	movs	r2, #1
 80012f0:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80012f4:	4619      	mov	r1, r3
 80012f6:	6800      	ldr	r0, [r0, #0]
 80012f8:	f001 fd56 	bl	8002da8 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80012fc:	b17d      	cbz	r5, 800131e <HAL_PCD_EP_SetStall+0x6c>
  __HAL_UNLOCK(hpcd);
 80012fe:	2000      	movs	r0, #0
 8001300:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 8001304:	e013      	b.n	800132e <HAL_PCD_EP_SetStall+0x7c>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001306:	00ea      	lsls	r2, r5, #3
 8001308:	1b51      	subs	r1, r2, r5
 800130a:	008b      	lsls	r3, r1, #2
 800130c:	4619      	mov	r1, r3
 800130e:	3338      	adds	r3, #56	; 0x38
 8001310:	4403      	add	r3, r0
 8001312:	3304      	adds	r3, #4
    ep->is_in = 1U;
 8001314:	4401      	add	r1, r0
 8001316:	2201      	movs	r2, #1
 8001318:	f881 203d 	strb.w	r2, [r1, #61]	; 0x3d
 800131c:	e7df      	b.n	80012de <HAL_PCD_EP_SetStall+0x2c>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800131e:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8001322:	7c21      	ldrb	r1, [r4, #16]
 8001324:	6820      	ldr	r0, [r4, #0]
 8001326:	f001 fe13 	bl	8002f50 <USB_EP0_OutStart>
 800132a:	e7e8      	b.n	80012fe <HAL_PCD_EP_SetStall+0x4c>
    return HAL_ERROR;
 800132c:	2001      	movs	r0, #1
}
 800132e:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8001330:	2002      	movs	r0, #2
 8001332:	e7fc      	b.n	800132e <HAL_PCD_EP_SetStall+0x7c>

08001334 <HAL_PCD_EP_ClrStall>:
{
 8001334:	b510      	push	{r4, lr}
 8001336:	f001 040f 	and.w	r4, r1, #15
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800133a:	6843      	ldr	r3, [r0, #4]
 800133c:	429c      	cmp	r4, r3
 800133e:	d82c      	bhi.n	800139a <HAL_PCD_EP_ClrStall+0x66>
  if ((0x80U & ep_addr) == 0x80U)
 8001340:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001344:	d11d      	bne.n	8001382 <HAL_PCD_EP_ClrStall+0x4e>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001346:	00e3      	lsls	r3, r4, #3
 8001348:	1b1a      	subs	r2, r3, r4
 800134a:	0091      	lsls	r1, r2, #2
 800134c:	460a      	mov	r2, r1
 800134e:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
 8001352:	4401      	add	r1, r0
 8001354:	3104      	adds	r1, #4
    ep->is_in = 0U;
 8001356:	4402      	add	r2, r0
 8001358:	2300      	movs	r3, #0
 800135a:	f882 31fd 	strb.w	r3, [r2, #509]	; 0x1fd
  ep->is_stall = 0U;
 800135e:	2300      	movs	r3, #0
 8001360:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001362:	700c      	strb	r4, [r1, #0]
  __HAL_LOCK(hpcd);
 8001364:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8001368:	2b01      	cmp	r3, #1
 800136a:	d018      	beq.n	800139e <HAL_PCD_EP_ClrStall+0x6a>
 800136c:	4604      	mov	r4, r0
 800136e:	2301      	movs	r3, #1
 8001370:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001374:	6800      	ldr	r0, [r0, #0]
 8001376:	f001 fd44 	bl	8002e02 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800137a:	2000      	movs	r0, #0
 800137c:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 8001380:	e00c      	b.n	800139c <HAL_PCD_EP_ClrStall+0x68>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001382:	00e3      	lsls	r3, r4, #3
 8001384:	1b1a      	subs	r2, r3, r4
 8001386:	0091      	lsls	r1, r2, #2
 8001388:	460a      	mov	r2, r1
 800138a:	3138      	adds	r1, #56	; 0x38
 800138c:	4401      	add	r1, r0
 800138e:	3104      	adds	r1, #4
    ep->is_in = 1U;
 8001390:	4402      	add	r2, r0
 8001392:	2301      	movs	r3, #1
 8001394:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
 8001398:	e7e1      	b.n	800135e <HAL_PCD_EP_ClrStall+0x2a>
    return HAL_ERROR;
 800139a:	2001      	movs	r0, #1
}
 800139c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800139e:	2002      	movs	r0, #2
 80013a0:	e7fc      	b.n	800139c <HAL_PCD_EP_ClrStall+0x68>

080013a2 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80013a2:	b430      	push	{r4, r5}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80013a4:	6804      	ldr	r4, [r0, #0]
 80013a6:	6a60      	ldr	r0, [r4, #36]	; 0x24

  if (fifo == 0U)
 80013a8:	b129      	cbz	r1, 80013b6 <HAL_PCDEx_SetTxFiFo+0x14>
 80013aa:	460d      	mov	r5, r1
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80013ac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80013ae:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80013b2:	2300      	movs	r3, #0
 80013b4:	e00c      	b.n	80013d0 <HAL_PCDEx_SetTxFiFo+0x2e>
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80013b6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80013ba:	62a0      	str	r0, [r4, #40]	; 0x28
 80013bc:	e012      	b.n	80013e4 <HAL_PCDEx_SetTxFiFo+0x42>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80013be:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80013c2:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80013c6:	6849      	ldr	r1, [r1, #4]
 80013c8:	eb00 4011 	add.w	r0, r0, r1, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80013cc:	3301      	adds	r3, #1
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	1e69      	subs	r1, r5, #1
 80013d2:	428b      	cmp	r3, r1
 80013d4:	d3f3      	bcc.n	80013be <HAL_PCDEx_SetTxFiFo+0x1c>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80013d6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80013da:	f105 013f 	add.w	r1, r5, #63	; 0x3f
 80013de:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80013e2:	6048      	str	r0, [r1, #4]
  }

  return HAL_OK;
}
 80013e4:	2000      	movs	r0, #0
 80013e6:	bc30      	pop	{r4, r5}
 80013e8:	4770      	bx	lr

080013ea <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 80013ea:	6803      	ldr	r3, [r0, #0]
 80013ec:	6259      	str	r1, [r3, #36]	; 0x24

  return HAL_OK;
}
 80013ee:	2000      	movs	r0, #0
 80013f0:	4770      	bx	lr
	...

080013f4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80013f4:	4602      	mov	r2, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80013f6:	6803      	ldr	r3, [r0, #0]

  hpcd->lpm_active = 1U;
 80013f8:	2101      	movs	r1, #1
 80013fa:	f8c0 13fc 	str.w	r1, [r0, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80013fe:	2000      	movs	r0, #0
 8001400:	f882 03f4 	strb.w	r0, [r2, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001404:	699a      	ldr	r2, [r3, #24]
 8001406:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800140a:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800140c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800140e:	4a02      	ldr	r2, [pc, #8]	; (8001418 <HAL_PCDEx_ActivateLPM+0x24>)
 8001410:	430a      	orrs	r2, r1
 8001412:	655a      	str	r2, [r3, #84]	; 0x54

  return HAL_OK;
}
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	10000003 	.word	0x10000003

0800141c <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800141c:	4a02      	ldr	r2, [pc, #8]	; (8001428 <HAL_PWR_EnableBkUpAccess+0xc>)
 800141e:	6813      	ldr	r3, [r2, #0]
 8001420:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001424:	6013      	str	r3, [r2, #0]
}
 8001426:	4770      	bx	lr
 8001428:	40007000 	.word	0x40007000

0800142c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800142c:	b510      	push	{r4, lr}
 800142e:	b082      	sub	sp, #8
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8001430:	4b1b      	ldr	r3, [pc, #108]	; (80014a0 <HAL_PWREx_EnableOverDrive+0x74>)
 8001432:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001434:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001438:	641a      	str	r2, [r3, #64]	; 0x40
 800143a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001440:	9301      	str	r3, [sp, #4]
 8001442:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001444:	4a17      	ldr	r2, [pc, #92]	; (80014a4 <HAL_PWREx_EnableOverDrive+0x78>)
 8001446:	6813      	ldr	r3, [r2, #0]
 8001448:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800144c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800144e:	f7ff f8a3 	bl	8000598 <HAL_GetTick>
 8001452:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001454:	4b13      	ldr	r3, [pc, #76]	; (80014a4 <HAL_PWREx_EnableOverDrive+0x78>)
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800145c:	d108      	bne.n	8001470 <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800145e:	f7ff f89b 	bl	8000598 <HAL_GetTick>
 8001462:	1b00      	subs	r0, r0, r4
 8001464:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001468:	d9f4      	bls.n	8001454 <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 800146a:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 800146c:	b002      	add	sp, #8
 800146e:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001470:	4a0c      	ldr	r2, [pc, #48]	; (80014a4 <HAL_PWREx_EnableOverDrive+0x78>)
 8001472:	6813      	ldr	r3, [r2, #0]
 8001474:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001478:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 800147a:	f7ff f88d 	bl	8000598 <HAL_GetTick>
 800147e:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001480:	4b08      	ldr	r3, [pc, #32]	; (80014a4 <HAL_PWREx_EnableOverDrive+0x78>)
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001488:	d107      	bne.n	800149a <HAL_PWREx_EnableOverDrive+0x6e>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800148a:	f7ff f885 	bl	8000598 <HAL_GetTick>
 800148e:	1b00      	subs	r0, r0, r4
 8001490:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001494:	d9f4      	bls.n	8001480 <HAL_PWREx_EnableOverDrive+0x54>
      return HAL_TIMEOUT;
 8001496:	2003      	movs	r0, #3
 8001498:	e7e8      	b.n	800146c <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 800149a:	2000      	movs	r0, #0
 800149c:	e7e6      	b.n	800146c <HAL_PWREx_EnableOverDrive+0x40>
 800149e:	bf00      	nop
 80014a0:	40023800 	.word	0x40023800
 80014a4:	40007000 	.word	0x40007000

080014a8 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014a8:	2800      	cmp	r0, #0
 80014aa:	f000 81db 	beq.w	8001864 <HAL_RCC_OscConfig+0x3bc>
{
 80014ae:	b570      	push	{r4, r5, r6, lr}
 80014b0:	b082      	sub	sp, #8
 80014b2:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014b4:	6803      	ldr	r3, [r0, #0]
 80014b6:	f013 0f01 	tst.w	r3, #1
 80014ba:	d029      	beq.n	8001510 <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80014bc:	4ba2      	ldr	r3, [pc, #648]	; (8001748 <HAL_RCC_OscConfig+0x2a0>)
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	f003 030c 	and.w	r3, r3, #12
 80014c4:	2b04      	cmp	r3, #4
 80014c6:	d01a      	beq.n	80014fe <HAL_RCC_OscConfig+0x56>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014c8:	4b9f      	ldr	r3, [pc, #636]	; (8001748 <HAL_RCC_OscConfig+0x2a0>)
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	f003 030c 	and.w	r3, r3, #12
 80014d0:	2b08      	cmp	r3, #8
 80014d2:	d00f      	beq.n	80014f4 <HAL_RCC_OscConfig+0x4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014d4:	6863      	ldr	r3, [r4, #4]
 80014d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014da:	d040      	beq.n	800155e <HAL_RCC_OscConfig+0xb6>
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d154      	bne.n	800158a <HAL_RCC_OscConfig+0xe2>
 80014e0:	4b99      	ldr	r3, [pc, #612]	; (8001748 <HAL_RCC_OscConfig+0x2a0>)
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	e039      	b.n	8001568 <HAL_RCC_OscConfig+0xc0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014f4:	4b94      	ldr	r3, [pc, #592]	; (8001748 <HAL_RCC_OscConfig+0x2a0>)
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80014fc:	d0ea      	beq.n	80014d4 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014fe:	4b92      	ldr	r3, [pc, #584]	; (8001748 <HAL_RCC_OscConfig+0x2a0>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001506:	d003      	beq.n	8001510 <HAL_RCC_OscConfig+0x68>
 8001508:	6863      	ldr	r3, [r4, #4]
 800150a:	2b00      	cmp	r3, #0
 800150c:	f000 81ac 	beq.w	8001868 <HAL_RCC_OscConfig+0x3c0>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001510:	6823      	ldr	r3, [r4, #0]
 8001512:	f013 0f02 	tst.w	r3, #2
 8001516:	d075      	beq.n	8001604 <HAL_RCC_OscConfig+0x15c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001518:	4b8b      	ldr	r3, [pc, #556]	; (8001748 <HAL_RCC_OscConfig+0x2a0>)
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	f013 0f0c 	tst.w	r3, #12
 8001520:	d05e      	beq.n	80015e0 <HAL_RCC_OscConfig+0x138>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001522:	4b89      	ldr	r3, [pc, #548]	; (8001748 <HAL_RCC_OscConfig+0x2a0>)
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	f003 030c 	and.w	r3, r3, #12
 800152a:	2b08      	cmp	r3, #8
 800152c:	d053      	beq.n	80015d6 <HAL_RCC_OscConfig+0x12e>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800152e:	68e3      	ldr	r3, [r4, #12]
 8001530:	2b00      	cmp	r3, #0
 8001532:	f000 808a 	beq.w	800164a <HAL_RCC_OscConfig+0x1a2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001536:	4a84      	ldr	r2, [pc, #528]	; (8001748 <HAL_RCC_OscConfig+0x2a0>)
 8001538:	6813      	ldr	r3, [r2, #0]
 800153a:	f043 0301 	orr.w	r3, r3, #1
 800153e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001540:	f7ff f82a 	bl	8000598 <HAL_GetTick>
 8001544:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001546:	4b80      	ldr	r3, [pc, #512]	; (8001748 <HAL_RCC_OscConfig+0x2a0>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f013 0f02 	tst.w	r3, #2
 800154e:	d173      	bne.n	8001638 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001550:	f7ff f822 	bl	8000598 <HAL_GetTick>
 8001554:	1b40      	subs	r0, r0, r5
 8001556:	2802      	cmp	r0, #2
 8001558:	d9f5      	bls.n	8001546 <HAL_RCC_OscConfig+0x9e>
          {
            return HAL_TIMEOUT;
 800155a:	2003      	movs	r0, #3
 800155c:	e187      	b.n	800186e <HAL_RCC_OscConfig+0x3c6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800155e:	4a7a      	ldr	r2, [pc, #488]	; (8001748 <HAL_RCC_OscConfig+0x2a0>)
 8001560:	6813      	ldr	r3, [r2, #0]
 8001562:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001566:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001568:	6863      	ldr	r3, [r4, #4]
 800156a:	b32b      	cbz	r3, 80015b8 <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 800156c:	f7ff f814 	bl	8000598 <HAL_GetTick>
 8001570:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001572:	4b75      	ldr	r3, [pc, #468]	; (8001748 <HAL_RCC_OscConfig+0x2a0>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800157a:	d1c9      	bne.n	8001510 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800157c:	f7ff f80c 	bl	8000598 <HAL_GetTick>
 8001580:	1b40      	subs	r0, r0, r5
 8001582:	2864      	cmp	r0, #100	; 0x64
 8001584:	d9f5      	bls.n	8001572 <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 8001586:	2003      	movs	r0, #3
 8001588:	e171      	b.n	800186e <HAL_RCC_OscConfig+0x3c6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800158a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800158e:	d009      	beq.n	80015a4 <HAL_RCC_OscConfig+0xfc>
 8001590:	4b6d      	ldr	r3, [pc, #436]	; (8001748 <HAL_RCC_OscConfig+0x2a0>)
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001598:	601a      	str	r2, [r3, #0]
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	e7e1      	b.n	8001568 <HAL_RCC_OscConfig+0xc0>
 80015a4:	4b68      	ldr	r3, [pc, #416]	; (8001748 <HAL_RCC_OscConfig+0x2a0>)
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80015ac:	601a      	str	r2, [r3, #0]
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80015b4:	601a      	str	r2, [r3, #0]
 80015b6:	e7d7      	b.n	8001568 <HAL_RCC_OscConfig+0xc0>
        tickstart = HAL_GetTick();
 80015b8:	f7fe ffee 	bl	8000598 <HAL_GetTick>
 80015bc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015be:	4b62      	ldr	r3, [pc, #392]	; (8001748 <HAL_RCC_OscConfig+0x2a0>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80015c6:	d0a3      	beq.n	8001510 <HAL_RCC_OscConfig+0x68>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015c8:	f7fe ffe6 	bl	8000598 <HAL_GetTick>
 80015cc:	1b40      	subs	r0, r0, r5
 80015ce:	2864      	cmp	r0, #100	; 0x64
 80015d0:	d9f5      	bls.n	80015be <HAL_RCC_OscConfig+0x116>
            return HAL_TIMEOUT;
 80015d2:	2003      	movs	r0, #3
 80015d4:	e14b      	b.n	800186e <HAL_RCC_OscConfig+0x3c6>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015d6:	4b5c      	ldr	r3, [pc, #368]	; (8001748 <HAL_RCC_OscConfig+0x2a0>)
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80015de:	d1a6      	bne.n	800152e <HAL_RCC_OscConfig+0x86>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015e0:	4b59      	ldr	r3, [pc, #356]	; (8001748 <HAL_RCC_OscConfig+0x2a0>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f013 0f02 	tst.w	r3, #2
 80015e8:	d004      	beq.n	80015f4 <HAL_RCC_OscConfig+0x14c>
 80015ea:	68e3      	ldr	r3, [r4, #12]
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d001      	beq.n	80015f4 <HAL_RCC_OscConfig+0x14c>
        return HAL_ERROR;
 80015f0:	2001      	movs	r0, #1
 80015f2:	e13c      	b.n	800186e <HAL_RCC_OscConfig+0x3c6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015f4:	4a54      	ldr	r2, [pc, #336]	; (8001748 <HAL_RCC_OscConfig+0x2a0>)
 80015f6:	6813      	ldr	r3, [r2, #0]
 80015f8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80015fc:	6921      	ldr	r1, [r4, #16]
 80015fe:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001602:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001604:	6823      	ldr	r3, [r4, #0]
 8001606:	f013 0f08 	tst.w	r3, #8
 800160a:	d046      	beq.n	800169a <HAL_RCC_OscConfig+0x1f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800160c:	6963      	ldr	r3, [r4, #20]
 800160e:	b383      	cbz	r3, 8001672 <HAL_RCC_OscConfig+0x1ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001610:	4a4d      	ldr	r2, [pc, #308]	; (8001748 <HAL_RCC_OscConfig+0x2a0>)
 8001612:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8001614:	f043 0301 	orr.w	r3, r3, #1
 8001618:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800161a:	f7fe ffbd 	bl	8000598 <HAL_GetTick>
 800161e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001620:	4b49      	ldr	r3, [pc, #292]	; (8001748 <HAL_RCC_OscConfig+0x2a0>)
 8001622:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001624:	f013 0f02 	tst.w	r3, #2
 8001628:	d137      	bne.n	800169a <HAL_RCC_OscConfig+0x1f2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800162a:	f7fe ffb5 	bl	8000598 <HAL_GetTick>
 800162e:	1b40      	subs	r0, r0, r5
 8001630:	2802      	cmp	r0, #2
 8001632:	d9f5      	bls.n	8001620 <HAL_RCC_OscConfig+0x178>
        {
          return HAL_TIMEOUT;
 8001634:	2003      	movs	r0, #3
 8001636:	e11a      	b.n	800186e <HAL_RCC_OscConfig+0x3c6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001638:	4a43      	ldr	r2, [pc, #268]	; (8001748 <HAL_RCC_OscConfig+0x2a0>)
 800163a:	6813      	ldr	r3, [r2, #0]
 800163c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001640:	6921      	ldr	r1, [r4, #16]
 8001642:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001646:	6013      	str	r3, [r2, #0]
 8001648:	e7dc      	b.n	8001604 <HAL_RCC_OscConfig+0x15c>
        __HAL_RCC_HSI_DISABLE();
 800164a:	4a3f      	ldr	r2, [pc, #252]	; (8001748 <HAL_RCC_OscConfig+0x2a0>)
 800164c:	6813      	ldr	r3, [r2, #0]
 800164e:	f023 0301 	bic.w	r3, r3, #1
 8001652:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001654:	f7fe ffa0 	bl	8000598 <HAL_GetTick>
 8001658:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800165a:	4b3b      	ldr	r3, [pc, #236]	; (8001748 <HAL_RCC_OscConfig+0x2a0>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f013 0f02 	tst.w	r3, #2
 8001662:	d0cf      	beq.n	8001604 <HAL_RCC_OscConfig+0x15c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001664:	f7fe ff98 	bl	8000598 <HAL_GetTick>
 8001668:	1b40      	subs	r0, r0, r5
 800166a:	2802      	cmp	r0, #2
 800166c:	d9f5      	bls.n	800165a <HAL_RCC_OscConfig+0x1b2>
            return HAL_TIMEOUT;
 800166e:	2003      	movs	r0, #3
 8001670:	e0fd      	b.n	800186e <HAL_RCC_OscConfig+0x3c6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001672:	4a35      	ldr	r2, [pc, #212]	; (8001748 <HAL_RCC_OscConfig+0x2a0>)
 8001674:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8001676:	f023 0301 	bic.w	r3, r3, #1
 800167a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800167c:	f7fe ff8c 	bl	8000598 <HAL_GetTick>
 8001680:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001682:	4b31      	ldr	r3, [pc, #196]	; (8001748 <HAL_RCC_OscConfig+0x2a0>)
 8001684:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001686:	f013 0f02 	tst.w	r3, #2
 800168a:	d006      	beq.n	800169a <HAL_RCC_OscConfig+0x1f2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800168c:	f7fe ff84 	bl	8000598 <HAL_GetTick>
 8001690:	1b40      	subs	r0, r0, r5
 8001692:	2802      	cmp	r0, #2
 8001694:	d9f5      	bls.n	8001682 <HAL_RCC_OscConfig+0x1da>
        {
          return HAL_TIMEOUT;
 8001696:	2003      	movs	r0, #3
 8001698:	e0e9      	b.n	800186e <HAL_RCC_OscConfig+0x3c6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800169a:	6823      	ldr	r3, [r4, #0]
 800169c:	f013 0f04 	tst.w	r3, #4
 80016a0:	d07e      	beq.n	80017a0 <HAL_RCC_OscConfig+0x2f8>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016a2:	4b29      	ldr	r3, [pc, #164]	; (8001748 <HAL_RCC_OscConfig+0x2a0>)
 80016a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a6:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80016aa:	d11e      	bne.n	80016ea <HAL_RCC_OscConfig+0x242>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80016ac:	4b26      	ldr	r3, [pc, #152]	; (8001748 <HAL_RCC_OscConfig+0x2a0>)
 80016ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016b0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80016b4:	641a      	str	r2, [r3, #64]	; 0x40
 80016b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016bc:	9301      	str	r3, [sp, #4]
 80016be:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80016c0:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016c2:	4b22      	ldr	r3, [pc, #136]	; (800174c <HAL_RCC_OscConfig+0x2a4>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f413 7f80 	tst.w	r3, #256	; 0x100
 80016ca:	d010      	beq.n	80016ee <HAL_RCC_OscConfig+0x246>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016cc:	68a3      	ldr	r3, [r4, #8]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d021      	beq.n	8001716 <HAL_RCC_OscConfig+0x26e>
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d13c      	bne.n	8001750 <HAL_RCC_OscConfig+0x2a8>
 80016d6:	4b1c      	ldr	r3, [pc, #112]	; (8001748 <HAL_RCC_OscConfig+0x2a0>)
 80016d8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80016da:	f022 0201 	bic.w	r2, r2, #1
 80016de:	671a      	str	r2, [r3, #112]	; 0x70
 80016e0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80016e2:	f022 0204 	bic.w	r2, r2, #4
 80016e6:	671a      	str	r2, [r3, #112]	; 0x70
 80016e8:	e01a      	b.n	8001720 <HAL_RCC_OscConfig+0x278>
  FlagStatus pwrclkchanged = RESET;
 80016ea:	2500      	movs	r5, #0
 80016ec:	e7e9      	b.n	80016c2 <HAL_RCC_OscConfig+0x21a>
      PWR->CR1 |= PWR_CR1_DBP;
 80016ee:	4a17      	ldr	r2, [pc, #92]	; (800174c <HAL_RCC_OscConfig+0x2a4>)
 80016f0:	6813      	ldr	r3, [r2, #0]
 80016f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016f6:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80016f8:	f7fe ff4e 	bl	8000598 <HAL_GetTick>
 80016fc:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016fe:	4b13      	ldr	r3, [pc, #76]	; (800174c <HAL_RCC_OscConfig+0x2a4>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001706:	d1e1      	bne.n	80016cc <HAL_RCC_OscConfig+0x224>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001708:	f7fe ff46 	bl	8000598 <HAL_GetTick>
 800170c:	1b80      	subs	r0, r0, r6
 800170e:	2864      	cmp	r0, #100	; 0x64
 8001710:	d9f5      	bls.n	80016fe <HAL_RCC_OscConfig+0x256>
          return HAL_TIMEOUT;
 8001712:	2003      	movs	r0, #3
 8001714:	e0ab      	b.n	800186e <HAL_RCC_OscConfig+0x3c6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001716:	4a0c      	ldr	r2, [pc, #48]	; (8001748 <HAL_RCC_OscConfig+0x2a0>)
 8001718:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800171a:	f043 0301 	orr.w	r3, r3, #1
 800171e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001720:	68a3      	ldr	r3, [r4, #8]
 8001722:	b35b      	cbz	r3, 800177c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001724:	f7fe ff38 	bl	8000598 <HAL_GetTick>
 8001728:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800172a:	4b07      	ldr	r3, [pc, #28]	; (8001748 <HAL_RCC_OscConfig+0x2a0>)
 800172c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800172e:	f013 0f02 	tst.w	r3, #2
 8001732:	d134      	bne.n	800179e <HAL_RCC_OscConfig+0x2f6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001734:	f7fe ff30 	bl	8000598 <HAL_GetTick>
 8001738:	1b80      	subs	r0, r0, r6
 800173a:	f241 3388 	movw	r3, #5000	; 0x1388
 800173e:	4298      	cmp	r0, r3
 8001740:	d9f3      	bls.n	800172a <HAL_RCC_OscConfig+0x282>
        {
          return HAL_TIMEOUT;
 8001742:	2003      	movs	r0, #3
 8001744:	e093      	b.n	800186e <HAL_RCC_OscConfig+0x3c6>
 8001746:	bf00      	nop
 8001748:	40023800 	.word	0x40023800
 800174c:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001750:	2b05      	cmp	r3, #5
 8001752:	d009      	beq.n	8001768 <HAL_RCC_OscConfig+0x2c0>
 8001754:	4b48      	ldr	r3, [pc, #288]	; (8001878 <HAL_RCC_OscConfig+0x3d0>)
 8001756:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001758:	f022 0201 	bic.w	r2, r2, #1
 800175c:	671a      	str	r2, [r3, #112]	; 0x70
 800175e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001760:	f022 0204 	bic.w	r2, r2, #4
 8001764:	671a      	str	r2, [r3, #112]	; 0x70
 8001766:	e7db      	b.n	8001720 <HAL_RCC_OscConfig+0x278>
 8001768:	4b43      	ldr	r3, [pc, #268]	; (8001878 <HAL_RCC_OscConfig+0x3d0>)
 800176a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800176c:	f042 0204 	orr.w	r2, r2, #4
 8001770:	671a      	str	r2, [r3, #112]	; 0x70
 8001772:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001774:	f042 0201 	orr.w	r2, r2, #1
 8001778:	671a      	str	r2, [r3, #112]	; 0x70
 800177a:	e7d1      	b.n	8001720 <HAL_RCC_OscConfig+0x278>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800177c:	f7fe ff0c 	bl	8000598 <HAL_GetTick>
 8001780:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001782:	4b3d      	ldr	r3, [pc, #244]	; (8001878 <HAL_RCC_OscConfig+0x3d0>)
 8001784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001786:	f013 0f02 	tst.w	r3, #2
 800178a:	d008      	beq.n	800179e <HAL_RCC_OscConfig+0x2f6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800178c:	f7fe ff04 	bl	8000598 <HAL_GetTick>
 8001790:	1b80      	subs	r0, r0, r6
 8001792:	f241 3388 	movw	r3, #5000	; 0x1388
 8001796:	4298      	cmp	r0, r3
 8001798:	d9f3      	bls.n	8001782 <HAL_RCC_OscConfig+0x2da>
        {
          return HAL_TIMEOUT;
 800179a:	2003      	movs	r0, #3
 800179c:	e067      	b.n	800186e <HAL_RCC_OscConfig+0x3c6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800179e:	b9f5      	cbnz	r5, 80017de <HAL_RCC_OscConfig+0x336>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017a0:	69a3      	ldr	r3, [r4, #24]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d062      	beq.n	800186c <HAL_RCC_OscConfig+0x3c4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017a6:	4a34      	ldr	r2, [pc, #208]	; (8001878 <HAL_RCC_OscConfig+0x3d0>)
 80017a8:	6892      	ldr	r2, [r2, #8]
 80017aa:	f002 020c 	and.w	r2, r2, #12
 80017ae:	2a08      	cmp	r2, #8
 80017b0:	d05f      	beq.n	8001872 <HAL_RCC_OscConfig+0x3ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d019      	beq.n	80017ea <HAL_RCC_OscConfig+0x342>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017b6:	4a30      	ldr	r2, [pc, #192]	; (8001878 <HAL_RCC_OscConfig+0x3d0>)
 80017b8:	6813      	ldr	r3, [r2, #0]
 80017ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c0:	f7fe feea 	bl	8000598 <HAL_GetTick>
 80017c4:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017c6:	4b2c      	ldr	r3, [pc, #176]	; (8001878 <HAL_RCC_OscConfig+0x3d0>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80017ce:	d047      	beq.n	8001860 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017d0:	f7fe fee2 	bl	8000598 <HAL_GetTick>
 80017d4:	1b00      	subs	r0, r0, r4
 80017d6:	2802      	cmp	r0, #2
 80017d8:	d9f5      	bls.n	80017c6 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 80017da:	2003      	movs	r0, #3
 80017dc:	e047      	b.n	800186e <HAL_RCC_OscConfig+0x3c6>
      __HAL_RCC_PWR_CLK_DISABLE();
 80017de:	4a26      	ldr	r2, [pc, #152]	; (8001878 <HAL_RCC_OscConfig+0x3d0>)
 80017e0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80017e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017e6:	6413      	str	r3, [r2, #64]	; 0x40
 80017e8:	e7da      	b.n	80017a0 <HAL_RCC_OscConfig+0x2f8>
        __HAL_RCC_PLL_DISABLE();
 80017ea:	4a23      	ldr	r2, [pc, #140]	; (8001878 <HAL_RCC_OscConfig+0x3d0>)
 80017ec:	6813      	ldr	r3, [r2, #0]
 80017ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017f2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80017f4:	f7fe fed0 	bl	8000598 <HAL_GetTick>
 80017f8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017fa:	4b1f      	ldr	r3, [pc, #124]	; (8001878 <HAL_RCC_OscConfig+0x3d0>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001802:	d006      	beq.n	8001812 <HAL_RCC_OscConfig+0x36a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001804:	f7fe fec8 	bl	8000598 <HAL_GetTick>
 8001808:	1b40      	subs	r0, r0, r5
 800180a:	2802      	cmp	r0, #2
 800180c:	d9f5      	bls.n	80017fa <HAL_RCC_OscConfig+0x352>
            return HAL_TIMEOUT;
 800180e:	2003      	movs	r0, #3
 8001810:	e02d      	b.n	800186e <HAL_RCC_OscConfig+0x3c6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001812:	69e3      	ldr	r3, [r4, #28]
 8001814:	6a22      	ldr	r2, [r4, #32]
 8001816:	4313      	orrs	r3, r2
 8001818:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800181a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800181e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001820:	0852      	lsrs	r2, r2, #1
 8001822:	3a01      	subs	r2, #1
 8001824:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001828:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800182a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800182e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001832:	4a11      	ldr	r2, [pc, #68]	; (8001878 <HAL_RCC_OscConfig+0x3d0>)
 8001834:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8001836:	6813      	ldr	r3, [r2, #0]
 8001838:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800183c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800183e:	f7fe feab 	bl	8000598 <HAL_GetTick>
 8001842:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001844:	4b0c      	ldr	r3, [pc, #48]	; (8001878 <HAL_RCC_OscConfig+0x3d0>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800184c:	d106      	bne.n	800185c <HAL_RCC_OscConfig+0x3b4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800184e:	f7fe fea3 	bl	8000598 <HAL_GetTick>
 8001852:	1b00      	subs	r0, r0, r4
 8001854:	2802      	cmp	r0, #2
 8001856:	d9f5      	bls.n	8001844 <HAL_RCC_OscConfig+0x39c>
            return HAL_TIMEOUT;
 8001858:	2003      	movs	r0, #3
 800185a:	e008      	b.n	800186e <HAL_RCC_OscConfig+0x3c6>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 800185c:	2000      	movs	r0, #0
 800185e:	e006      	b.n	800186e <HAL_RCC_OscConfig+0x3c6>
 8001860:	2000      	movs	r0, #0
 8001862:	e004      	b.n	800186e <HAL_RCC_OscConfig+0x3c6>
    return HAL_ERROR;
 8001864:	2001      	movs	r0, #1
}
 8001866:	4770      	bx	lr
        return HAL_ERROR;
 8001868:	2001      	movs	r0, #1
 800186a:	e000      	b.n	800186e <HAL_RCC_OscConfig+0x3c6>
  return HAL_OK;
 800186c:	2000      	movs	r0, #0
}
 800186e:	b002      	add	sp, #8
 8001870:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001872:	2001      	movs	r0, #1
 8001874:	e7fb      	b.n	800186e <HAL_RCC_OscConfig+0x3c6>
 8001876:	bf00      	nop
 8001878:	40023800 	.word	0x40023800

0800187c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800187c:	4b32      	ldr	r3, [pc, #200]	; (8001948 <HAL_RCC_GetSysClockFreq+0xcc>)
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	f003 030c 	and.w	r3, r3, #12
 8001884:	2b04      	cmp	r3, #4
 8001886:	d05c      	beq.n	8001942 <HAL_RCC_GetSysClockFreq+0xc6>
 8001888:	2b08      	cmp	r3, #8
 800188a:	d001      	beq.n	8001890 <HAL_RCC_GetSysClockFreq+0x14>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800188c:	482f      	ldr	r0, [pc, #188]	; (800194c <HAL_RCC_GetSysClockFreq+0xd0>)
 800188e:	4770      	bx	lr
{
 8001890:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001894:	4b2c      	ldr	r3, [pc, #176]	; (8001948 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001896:	685a      	ldr	r2, [r3, #4]
 8001898:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80018a2:	d02b      	beq.n	80018fc <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018a4:	4b28      	ldr	r3, [pc, #160]	; (8001948 <HAL_RCC_GetSysClockFreq+0xcc>)
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80018ac:	461e      	mov	r6, r3
 80018ae:	2700      	movs	r7, #0
 80018b0:	015c      	lsls	r4, r3, #5
 80018b2:	2500      	movs	r5, #0
 80018b4:	1ae4      	subs	r4, r4, r3
 80018b6:	eb65 0507 	sbc.w	r5, r5, r7
 80018ba:	01a9      	lsls	r1, r5, #6
 80018bc:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 80018c0:	01a0      	lsls	r0, r4, #6
 80018c2:	1b00      	subs	r0, r0, r4
 80018c4:	eb61 0105 	sbc.w	r1, r1, r5
 80018c8:	00cb      	lsls	r3, r1, #3
 80018ca:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80018ce:	00c4      	lsls	r4, r0, #3
 80018d0:	19a0      	adds	r0, r4, r6
 80018d2:	eb43 0107 	adc.w	r1, r3, r7
 80018d6:	024b      	lsls	r3, r1, #9
 80018d8:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 80018dc:	0244      	lsls	r4, r0, #9
 80018de:	4620      	mov	r0, r4
 80018e0:	4619      	mov	r1, r3
 80018e2:	2300      	movs	r3, #0
 80018e4:	f7fe fc9c 	bl	8000220 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 80018e8:	4b17      	ldr	r3, [pc, #92]	; (8001948 <HAL_RCC_GetSysClockFreq+0xcc>)
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80018f0:	3301      	adds	r3, #1
 80018f2:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80018f4:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80018f8:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018fc:	4b12      	ldr	r3, [pc, #72]	; (8001948 <HAL_RCC_GetSysClockFreq+0xcc>)
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8001904:	461e      	mov	r6, r3
 8001906:	2700      	movs	r7, #0
 8001908:	015c      	lsls	r4, r3, #5
 800190a:	2500      	movs	r5, #0
 800190c:	1ae4      	subs	r4, r4, r3
 800190e:	eb65 0507 	sbc.w	r5, r5, r7
 8001912:	01a9      	lsls	r1, r5, #6
 8001914:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8001918:	01a0      	lsls	r0, r4, #6
 800191a:	1b00      	subs	r0, r0, r4
 800191c:	eb61 0105 	sbc.w	r1, r1, r5
 8001920:	00cb      	lsls	r3, r1, #3
 8001922:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001926:	00c4      	lsls	r4, r0, #3
 8001928:	19a0      	adds	r0, r4, r6
 800192a:	eb43 0107 	adc.w	r1, r3, r7
 800192e:	028b      	lsls	r3, r1, #10
 8001930:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8001934:	0284      	lsls	r4, r0, #10
 8001936:	4620      	mov	r0, r4
 8001938:	4619      	mov	r1, r3
 800193a:	2300      	movs	r3, #0
 800193c:	f7fe fc70 	bl	8000220 <__aeabi_uldivmod>
 8001940:	e7d2      	b.n	80018e8 <HAL_RCC_GetSysClockFreq+0x6c>
      sysclockfreq = HSE_VALUE;
 8001942:	4803      	ldr	r0, [pc, #12]	; (8001950 <HAL_RCC_GetSysClockFreq+0xd4>)
}
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	40023800 	.word	0x40023800
 800194c:	00f42400 	.word	0x00f42400
 8001950:	007a1200 	.word	0x007a1200

08001954 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8001954:	2800      	cmp	r0, #0
 8001956:	f000 80a2 	beq.w	8001a9e <HAL_RCC_ClockConfig+0x14a>
{
 800195a:	b570      	push	{r4, r5, r6, lr}
 800195c:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800195e:	4b52      	ldr	r3, [pc, #328]	; (8001aa8 <HAL_RCC_ClockConfig+0x154>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 030f 	and.w	r3, r3, #15
 8001966:	428b      	cmp	r3, r1
 8001968:	d20c      	bcs.n	8001984 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800196a:	4a4f      	ldr	r2, [pc, #316]	; (8001aa8 <HAL_RCC_ClockConfig+0x154>)
 800196c:	6813      	ldr	r3, [r2, #0]
 800196e:	f023 030f 	bic.w	r3, r3, #15
 8001972:	430b      	orrs	r3, r1
 8001974:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001976:	6813      	ldr	r3, [r2, #0]
 8001978:	f003 030f 	and.w	r3, r3, #15
 800197c:	428b      	cmp	r3, r1
 800197e:	d001      	beq.n	8001984 <HAL_RCC_ClockConfig+0x30>
      return HAL_ERROR;
 8001980:	2001      	movs	r0, #1
}
 8001982:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001984:	6823      	ldr	r3, [r4, #0]
 8001986:	f013 0f02 	tst.w	r3, #2
 800198a:	d017      	beq.n	80019bc <HAL_RCC_ClockConfig+0x68>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800198c:	f013 0f04 	tst.w	r3, #4
 8001990:	d004      	beq.n	800199c <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001992:	4a46      	ldr	r2, [pc, #280]	; (8001aac <HAL_RCC_ClockConfig+0x158>)
 8001994:	6893      	ldr	r3, [r2, #8]
 8001996:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800199a:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800199c:	6823      	ldr	r3, [r4, #0]
 800199e:	f013 0f08 	tst.w	r3, #8
 80019a2:	d004      	beq.n	80019ae <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019a4:	4a41      	ldr	r2, [pc, #260]	; (8001aac <HAL_RCC_ClockConfig+0x158>)
 80019a6:	6893      	ldr	r3, [r2, #8]
 80019a8:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80019ac:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019ae:	4a3f      	ldr	r2, [pc, #252]	; (8001aac <HAL_RCC_ClockConfig+0x158>)
 80019b0:	6893      	ldr	r3, [r2, #8]
 80019b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80019b6:	68a0      	ldr	r0, [r4, #8]
 80019b8:	4303      	orrs	r3, r0
 80019ba:	6093      	str	r3, [r2, #8]
 80019bc:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019be:	6823      	ldr	r3, [r4, #0]
 80019c0:	f013 0f01 	tst.w	r3, #1
 80019c4:	d031      	beq.n	8001a2a <HAL_RCC_ClockConfig+0xd6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019c6:	6863      	ldr	r3, [r4, #4]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d020      	beq.n	8001a0e <HAL_RCC_ClockConfig+0xba>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d025      	beq.n	8001a1c <HAL_RCC_ClockConfig+0xc8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019d0:	4a36      	ldr	r2, [pc, #216]	; (8001aac <HAL_RCC_ClockConfig+0x158>)
 80019d2:	6812      	ldr	r2, [r2, #0]
 80019d4:	f012 0f02 	tst.w	r2, #2
 80019d8:	d063      	beq.n	8001aa2 <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019da:	4934      	ldr	r1, [pc, #208]	; (8001aac <HAL_RCC_ClockConfig+0x158>)
 80019dc:	688a      	ldr	r2, [r1, #8]
 80019de:	f022 0203 	bic.w	r2, r2, #3
 80019e2:	4313      	orrs	r3, r2
 80019e4:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80019e6:	f7fe fdd7 	bl	8000598 <HAL_GetTick>
 80019ea:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ec:	4b2f      	ldr	r3, [pc, #188]	; (8001aac <HAL_RCC_ClockConfig+0x158>)
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	f003 030c 	and.w	r3, r3, #12
 80019f4:	6862      	ldr	r2, [r4, #4]
 80019f6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80019fa:	d016      	beq.n	8001a2a <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019fc:	f7fe fdcc 	bl	8000598 <HAL_GetTick>
 8001a00:	1b80      	subs	r0, r0, r6
 8001a02:	f241 3388 	movw	r3, #5000	; 0x1388
 8001a06:	4298      	cmp	r0, r3
 8001a08:	d9f0      	bls.n	80019ec <HAL_RCC_ClockConfig+0x98>
        return HAL_TIMEOUT;
 8001a0a:	2003      	movs	r0, #3
 8001a0c:	e7b9      	b.n	8001982 <HAL_RCC_ClockConfig+0x2e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a0e:	4a27      	ldr	r2, [pc, #156]	; (8001aac <HAL_RCC_ClockConfig+0x158>)
 8001a10:	6812      	ldr	r2, [r2, #0]
 8001a12:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8001a16:	d1e0      	bne.n	80019da <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8001a18:	2001      	movs	r0, #1
 8001a1a:	e7b2      	b.n	8001982 <HAL_RCC_ClockConfig+0x2e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a1c:	4a23      	ldr	r2, [pc, #140]	; (8001aac <HAL_RCC_ClockConfig+0x158>)
 8001a1e:	6812      	ldr	r2, [r2, #0]
 8001a20:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001a24:	d1d9      	bne.n	80019da <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8001a26:	2001      	movs	r0, #1
 8001a28:	e7ab      	b.n	8001982 <HAL_RCC_ClockConfig+0x2e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a2a:	4b1f      	ldr	r3, [pc, #124]	; (8001aa8 <HAL_RCC_ClockConfig+0x154>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 030f 	and.w	r3, r3, #15
 8001a32:	42ab      	cmp	r3, r5
 8001a34:	d90c      	bls.n	8001a50 <HAL_RCC_ClockConfig+0xfc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a36:	4a1c      	ldr	r2, [pc, #112]	; (8001aa8 <HAL_RCC_ClockConfig+0x154>)
 8001a38:	6813      	ldr	r3, [r2, #0]
 8001a3a:	f023 030f 	bic.w	r3, r3, #15
 8001a3e:	432b      	orrs	r3, r5
 8001a40:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a42:	6813      	ldr	r3, [r2, #0]
 8001a44:	f003 030f 	and.w	r3, r3, #15
 8001a48:	42ab      	cmp	r3, r5
 8001a4a:	d001      	beq.n	8001a50 <HAL_RCC_ClockConfig+0xfc>
      return HAL_ERROR;
 8001a4c:	2001      	movs	r0, #1
 8001a4e:	e798      	b.n	8001982 <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a50:	6823      	ldr	r3, [r4, #0]
 8001a52:	f013 0f04 	tst.w	r3, #4
 8001a56:	d006      	beq.n	8001a66 <HAL_RCC_ClockConfig+0x112>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a58:	4a14      	ldr	r2, [pc, #80]	; (8001aac <HAL_RCC_ClockConfig+0x158>)
 8001a5a:	6893      	ldr	r3, [r2, #8]
 8001a5c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001a60:	68e1      	ldr	r1, [r4, #12]
 8001a62:	430b      	orrs	r3, r1
 8001a64:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a66:	6823      	ldr	r3, [r4, #0]
 8001a68:	f013 0f08 	tst.w	r3, #8
 8001a6c:	d007      	beq.n	8001a7e <HAL_RCC_ClockConfig+0x12a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a6e:	4a0f      	ldr	r2, [pc, #60]	; (8001aac <HAL_RCC_ClockConfig+0x158>)
 8001a70:	6893      	ldr	r3, [r2, #8]
 8001a72:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001a76:	6921      	ldr	r1, [r4, #16]
 8001a78:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001a7c:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a7e:	f7ff fefd 	bl	800187c <HAL_RCC_GetSysClockFreq>
 8001a82:	4b0a      	ldr	r3, [pc, #40]	; (8001aac <HAL_RCC_ClockConfig+0x158>)
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001a8a:	4a09      	ldr	r2, [pc, #36]	; (8001ab0 <HAL_RCC_ClockConfig+0x15c>)
 8001a8c:	5cd3      	ldrb	r3, [r2, r3]
 8001a8e:	40d8      	lsrs	r0, r3
 8001a90:	4b08      	ldr	r3, [pc, #32]	; (8001ab4 <HAL_RCC_ClockConfig+0x160>)
 8001a92:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001a94:	2000      	movs	r0, #0
 8001a96:	f7fe fd43 	bl	8000520 <HAL_InitTick>
  return HAL_OK;
 8001a9a:	2000      	movs	r0, #0
 8001a9c:	e771      	b.n	8001982 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8001a9e:	2001      	movs	r0, #1
}
 8001aa0:	4770      	bx	lr
        return HAL_ERROR;
 8001aa2:	2001      	movs	r0, #1
 8001aa4:	e76d      	b.n	8001982 <HAL_RCC_ClockConfig+0x2e>
 8001aa6:	bf00      	nop
 8001aa8:	40023c00 	.word	0x40023c00
 8001aac:	40023800 	.word	0x40023800
 8001ab0:	080047f8 	.word	0x080047f8
 8001ab4:	20000118 	.word	0x20000118

08001ab8 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001ab8:	4b01      	ldr	r3, [pc, #4]	; (8001ac0 <HAL_RCC_GetHCLKFreq+0x8>)
 8001aba:	6818      	ldr	r0, [r3, #0]
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	20000118 	.word	0x20000118

08001ac4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ac4:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ac6:	f7ff fff7 	bl	8001ab8 <HAL_RCC_GetHCLKFreq>
 8001aca:	4b04      	ldr	r3, [pc, #16]	; (8001adc <HAL_RCC_GetPCLK1Freq+0x18>)
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001ad2:	4a03      	ldr	r2, [pc, #12]	; (8001ae0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001ad4:	5cd3      	ldrb	r3, [r2, r3]
}
 8001ad6:	40d8      	lsrs	r0, r3
 8001ad8:	bd08      	pop	{r3, pc}
 8001ada:	bf00      	nop
 8001adc:	40023800 	.word	0x40023800
 8001ae0:	08004808 	.word	0x08004808

08001ae4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ae4:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ae6:	f7ff ffe7 	bl	8001ab8 <HAL_RCC_GetHCLKFreq>
 8001aea:	4b04      	ldr	r3, [pc, #16]	; (8001afc <HAL_RCC_GetPCLK2Freq+0x18>)
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001af2:	4a03      	ldr	r2, [pc, #12]	; (8001b00 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001af4:	5cd3      	ldrb	r3, [r2, r3]
}
 8001af6:	40d8      	lsrs	r0, r3
 8001af8:	bd08      	pop	{r3, pc}
 8001afa:	bf00      	nop
 8001afc:	40023800 	.word	0x40023800
 8001b00:	08004808 	.word	0x08004808

08001b04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b06:	b083      	sub	sp, #12
 8001b08:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001b0a:	6803      	ldr	r3, [r0, #0]
 8001b0c:	f013 0f01 	tst.w	r3, #1
 8001b10:	d00c      	beq.n	8001b2c <HAL_RCCEx_PeriphCLKConfig+0x28>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001b12:	4ba4      	ldr	r3, [pc, #656]	; (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001b14:	689a      	ldr	r2, [r3, #8]
 8001b16:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8001b1a:	609a      	str	r2, [r3, #8]
 8001b1c:	689a      	ldr	r2, [r3, #8]
 8001b1e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8001b20:	430a      	orrs	r2, r1
 8001b22:	609a      	str	r2, [r3, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001b24:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001b26:	b1c3      	cbz	r3, 8001b5a <HAL_RCCEx_PeriphCLKConfig+0x56>
  uint32_t plli2sused = 0;
 8001b28:	2600      	movs	r6, #0
 8001b2a:	e000      	b.n	8001b2e <HAL_RCCEx_PeriphCLKConfig+0x2a>
 8001b2c:	2600      	movs	r6, #0
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001b2e:	6823      	ldr	r3, [r4, #0]
 8001b30:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8001b34:	d015      	beq.n	8001b62 <HAL_RCCEx_PeriphCLKConfig+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001b36:	4a9b      	ldr	r2, [pc, #620]	; (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001b38:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001b3c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001b40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001b42:	430b      	orrs	r3, r1
 8001b44:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001b48:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001b4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b4e:	d006      	beq.n	8001b5e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	f000 8105 	beq.w	8001d60 <HAL_RCCEx_PeriphCLKConfig+0x25c>
  uint32_t pllsaiused = 0;
 8001b56:	2500      	movs	r5, #0
 8001b58:	e004      	b.n	8001b64 <HAL_RCCEx_PeriphCLKConfig+0x60>
      plli2sused = 1;
 8001b5a:	2601      	movs	r6, #1
 8001b5c:	e7e7      	b.n	8001b2e <HAL_RCCEx_PeriphCLKConfig+0x2a>
      plli2sused = 1;
 8001b5e:	2601      	movs	r6, #1
 8001b60:	e7f6      	b.n	8001b50 <HAL_RCCEx_PeriphCLKConfig+0x4c>
  uint32_t pllsaiused = 0;
 8001b62:	2500      	movs	r5, #0
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001b64:	6823      	ldr	r3, [r4, #0]
 8001b66:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8001b6a:	d00f      	beq.n	8001b8c <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001b6c:	4a8d      	ldr	r2, [pc, #564]	; (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001b6e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001b72:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001b76:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001b78:	430b      	orrs	r3, r1
 8001b7a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001b7e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001b80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b84:	f000 80ee 	beq.w	8001d64 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001b88:	b903      	cbnz	r3, 8001b8c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      pllsaiused = 1;
 8001b8a:	2501      	movs	r5, #1
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001b8c:	6823      	ldr	r3, [r4, #0]
 8001b8e:	f013 0f20 	tst.w	r3, #32
 8001b92:	f040 80e9 	bne.w	8001d68 <HAL_RCCEx_PeriphCLKConfig+0x264>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001b96:	6823      	ldr	r3, [r4, #0]
 8001b98:	f013 0f10 	tst.w	r3, #16
 8001b9c:	d00c      	beq.n	8001bb8 <HAL_RCCEx_PeriphCLKConfig+0xb4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001b9e:	4b81      	ldr	r3, [pc, #516]	; (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001ba0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001ba4:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8001ba8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8001bac:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001bb0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001bb2:	430a      	orrs	r2, r1
 8001bb4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001bb8:	6823      	ldr	r3, [r4, #0]
 8001bba:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8001bbe:	d008      	beq.n	8001bd2 <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001bc0:	4a78      	ldr	r2, [pc, #480]	; (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001bc2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001bc6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001bca:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8001bcc:	430b      	orrs	r3, r1
 8001bce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001bd2:	6823      	ldr	r3, [r4, #0]
 8001bd4:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8001bd8:	d008      	beq.n	8001bec <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001bda:	4a72      	ldr	r2, [pc, #456]	; (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001bdc:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001be0:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8001be4:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8001be6:	430b      	orrs	r3, r1
 8001be8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001bec:	6823      	ldr	r3, [r4, #0]
 8001bee:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001bf2:	d008      	beq.n	8001c06 <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001bf4:	4a6b      	ldr	r2, [pc, #428]	; (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001bf6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001bfa:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001bfe:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8001c00:	430b      	orrs	r3, r1
 8001c02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001c06:	6823      	ldr	r3, [r4, #0]
 8001c08:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001c0c:	d008      	beq.n	8001c20 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001c0e:	4a65      	ldr	r2, [pc, #404]	; (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001c10:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001c14:	f023 0303 	bic.w	r3, r3, #3
 8001c18:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001c1a:	430b      	orrs	r3, r1
 8001c1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001c20:	6823      	ldr	r3, [r4, #0]
 8001c22:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001c26:	d008      	beq.n	8001c3a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001c28:	4a5e      	ldr	r2, [pc, #376]	; (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001c2a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001c2e:	f023 030c 	bic.w	r3, r3, #12
 8001c32:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001c34:	430b      	orrs	r3, r1
 8001c36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001c3a:	6823      	ldr	r3, [r4, #0]
 8001c3c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001c40:	d008      	beq.n	8001c54 <HAL_RCCEx_PeriphCLKConfig+0x150>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001c42:	4a58      	ldr	r2, [pc, #352]	; (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001c44:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001c48:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001c4c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001c4e:	430b      	orrs	r3, r1
 8001c50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001c54:	6823      	ldr	r3, [r4, #0]
 8001c56:	f413 7f00 	tst.w	r3, #512	; 0x200
 8001c5a:	d008      	beq.n	8001c6e <HAL_RCCEx_PeriphCLKConfig+0x16a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001c5c:	4a51      	ldr	r2, [pc, #324]	; (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001c5e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001c62:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001c66:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8001c68:	430b      	orrs	r3, r1
 8001c6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001c6e:	6823      	ldr	r3, [r4, #0]
 8001c70:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001c74:	d008      	beq.n	8001c88 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001c76:	4a4b      	ldr	r2, [pc, #300]	; (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001c78:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001c7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c80:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8001c82:	430b      	orrs	r3, r1
 8001c84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001c88:	6823      	ldr	r3, [r4, #0]
 8001c8a:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8001c8e:	d008      	beq.n	8001ca2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001c90:	4a44      	ldr	r2, [pc, #272]	; (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001c92:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001c96:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001c9a:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8001c9c:	430b      	orrs	r3, r1
 8001c9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001ca2:	6823      	ldr	r3, [r4, #0]
 8001ca4:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8001ca8:	d008      	beq.n	8001cbc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001caa:	4a3e      	ldr	r2, [pc, #248]	; (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001cac:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001cb0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001cb4:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8001cb6:	430b      	orrs	r3, r1
 8001cb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001cbc:	6823      	ldr	r3, [r4, #0]
 8001cbe:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8001cc2:	d008      	beq.n	8001cd6 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001cc4:	4a37      	ldr	r2, [pc, #220]	; (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001cc6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001cca:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001cce:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8001cd0:	430b      	orrs	r3, r1
 8001cd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001cd6:	6823      	ldr	r3, [r4, #0]
 8001cd8:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8001cdc:	d00d      	beq.n	8001cfa <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001cde:	4a31      	ldr	r2, [pc, #196]	; (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001ce0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001ce4:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8001ce8:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8001cea:	430b      	orrs	r3, r1
 8001cec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8001cf0:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8001cf2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001cf6:	f000 80a1 	beq.w	8001e3c <HAL_RCCEx_PeriphCLKConfig+0x338>
      pllsaiused = 1;
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001cfa:	6823      	ldr	r3, [r4, #0]
 8001cfc:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8001d00:	d008      	beq.n	8001d14 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001d02:	4a28      	ldr	r2, [pc, #160]	; (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001d04:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001d08:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8001d0c:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8001d0e:	430b      	orrs	r3, r1
 8001d10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001d14:	6823      	ldr	r3, [r4, #0]
 8001d16:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8001d1a:	d008      	beq.n	8001d2e <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001d1c:	4a21      	ldr	r2, [pc, #132]	; (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001d1e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001d22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d26:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8001d28:	430b      	orrs	r3, r1
 8001d2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8001d2e:	6823      	ldr	r3, [r4, #0]
 8001d30:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 8001d34:	d008      	beq.n	8001d48 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8001d36:	4a1b      	ldr	r2, [pc, #108]	; (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001d38:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001d3c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8001d40:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8001d42:	430b      	orrs	r3, r1
 8001d44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001d48:	2e00      	cmp	r6, #0
 8001d4a:	d179      	bne.n	8001e40 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8001d4c:	6823      	ldr	r3, [r4, #0]
 8001d4e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001d52:	d075      	beq.n	8001e40 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8001d54:	2d00      	cmp	r5, #0
 8001d56:	f040 80e3 	bne.w	8001f20 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001d5a:	2000      	movs	r0, #0
}
 8001d5c:	b003      	add	sp, #12
 8001d5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pllsaiused = 1;
 8001d60:	2501      	movs	r5, #1
 8001d62:	e6ff      	b.n	8001b64 <HAL_RCCEx_PeriphCLKConfig+0x60>
      plli2sused = 1;
 8001d64:	2601      	movs	r6, #1
 8001d66:	e70f      	b.n	8001b88 <HAL_RCCEx_PeriphCLKConfig+0x84>
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d68:	4b0e      	ldr	r3, [pc, #56]	; (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001d6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d6c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001d70:	641a      	str	r2, [r3, #64]	; 0x40
 8001d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d78:	9301      	str	r3, [sp, #4]
 8001d7a:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8001d7c:	4a0a      	ldr	r2, [pc, #40]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8001d7e:	6813      	ldr	r3, [r2, #0]
 8001d80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d84:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001d86:	f7fe fc07 	bl	8000598 <HAL_GetTick>
 8001d8a:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001d8c:	4b06      	ldr	r3, [pc, #24]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001d94:	d10a      	bne.n	8001dac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d96:	f7fe fbff 	bl	8000598 <HAL_GetTick>
 8001d9a:	1bc0      	subs	r0, r0, r7
 8001d9c:	2864      	cmp	r0, #100	; 0x64
 8001d9e:	d9f5      	bls.n	8001d8c <HAL_RCCEx_PeriphCLKConfig+0x288>
        return HAL_TIMEOUT;
 8001da0:	2003      	movs	r0, #3
 8001da2:	e7db      	b.n	8001d5c <HAL_RCCEx_PeriphCLKConfig+0x258>
 8001da4:	40023800 	.word	0x40023800
 8001da8:	40007000 	.word	0x40007000
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001dac:	4b8d      	ldr	r3, [pc, #564]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8001dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001db0:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001db4:	d015      	beq.n	8001de2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8001db6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001db8:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d010      	beq.n	8001de2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001dc0:	4b88      	ldr	r3, [pc, #544]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8001dc2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001dc4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8001dc8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8001dca:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8001dce:	6719      	str	r1, [r3, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001dd0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8001dd2:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8001dd6:	6719      	str	r1, [r3, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8001dd8:	671a      	str	r2, [r3, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ddc:	f013 0f01 	tst.w	r3, #1
 8001de0:	d112      	bne.n	8001e08 <HAL_RCCEx_PeriphCLKConfig+0x304>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001de2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001de4:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001de8:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8001dec:	d01d      	beq.n	8001e2a <HAL_RCCEx_PeriphCLKConfig+0x326>
 8001dee:	4a7d      	ldr	r2, [pc, #500]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8001df0:	6893      	ldr	r3, [r2, #8]
 8001df2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001df6:	6093      	str	r3, [r2, #8]
 8001df8:	497a      	ldr	r1, [pc, #488]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8001dfa:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8001dfc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001dfe:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001e02:	4313      	orrs	r3, r2
 8001e04:	670b      	str	r3, [r1, #112]	; 0x70
 8001e06:	e6c6      	b.n	8001b96 <HAL_RCCEx_PeriphCLKConfig+0x92>
        tickstart = HAL_GetTick();
 8001e08:	f7fe fbc6 	bl	8000598 <HAL_GetTick>
 8001e0c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e0e:	4b75      	ldr	r3, [pc, #468]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8001e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e12:	f013 0f02 	tst.w	r3, #2
 8001e16:	d1e4      	bne.n	8001de2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e18:	f7fe fbbe 	bl	8000598 <HAL_GetTick>
 8001e1c:	1bc0      	subs	r0, r0, r7
 8001e1e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001e22:	4298      	cmp	r0, r3
 8001e24:	d9f3      	bls.n	8001e0e <HAL_RCCEx_PeriphCLKConfig+0x30a>
            return HAL_TIMEOUT;
 8001e26:	2003      	movs	r0, #3
 8001e28:	e798      	b.n	8001d5c <HAL_RCCEx_PeriphCLKConfig+0x258>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e2a:	486e      	ldr	r0, [pc, #440]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8001e2c:	6882      	ldr	r2, [r0, #8]
 8001e2e:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8001e32:	496d      	ldr	r1, [pc, #436]	; (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e34:	4019      	ands	r1, r3
 8001e36:	430a      	orrs	r2, r1
 8001e38:	6082      	str	r2, [r0, #8]
 8001e3a:	e7dd      	b.n	8001df8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      pllsaiused = 1;
 8001e3c:	2501      	movs	r5, #1
 8001e3e:	e75c      	b.n	8001cfa <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    __HAL_RCC_PLLI2S_DISABLE();
 8001e40:	4a68      	ldr	r2, [pc, #416]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8001e42:	6813      	ldr	r3, [r2, #0]
 8001e44:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001e48:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001e4a:	f7fe fba5 	bl	8000598 <HAL_GetTick>
 8001e4e:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001e50:	4b64      	ldr	r3, [pc, #400]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8001e58:	d006      	beq.n	8001e68 <HAL_RCCEx_PeriphCLKConfig+0x364>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001e5a:	f7fe fb9d 	bl	8000598 <HAL_GetTick>
 8001e5e:	1b80      	subs	r0, r0, r6
 8001e60:	2864      	cmp	r0, #100	; 0x64
 8001e62:	d9f5      	bls.n	8001e50 <HAL_RCCEx_PeriphCLKConfig+0x34c>
        return HAL_TIMEOUT;
 8001e64:	2003      	movs	r0, #3
 8001e66:	e779      	b.n	8001d5c <HAL_RCCEx_PeriphCLKConfig+0x258>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001e68:	6823      	ldr	r3, [r4, #0]
 8001e6a:	f013 0f01 	tst.w	r3, #1
 8001e6e:	d00e      	beq.n	8001e8e <HAL_RCCEx_PeriphCLKConfig+0x38a>
 8001e70:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001e72:	b963      	cbnz	r3, 8001e8e <HAL_RCCEx_PeriphCLKConfig+0x38a>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001e74:	4a5b      	ldr	r2, [pc, #364]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8001e76:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 8001e7a:	6861      	ldr	r1, [r4, #4]
 8001e7c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8001e80:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8001e84:	68a1      	ldr	r1, [r4, #8]
 8001e86:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8001e8a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001e8e:	6823      	ldr	r3, [r4, #0]
 8001e90:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8001e94:	d003      	beq.n	8001e9e <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8001e96:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001e98:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8001e9c:	d006      	beq.n	8001eac <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 8001e9e:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8001ea2:	d019      	beq.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001ea4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001ea6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001eaa:	d115      	bne.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001eac:	4a4d      	ldr	r2, [pc, #308]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8001eae:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 8001eb2:	6860      	ldr	r0, [r4, #4]
 8001eb4:	68e3      	ldr	r3, [r4, #12]
 8001eb6:	061b      	lsls	r3, r3, #24
 8001eb8:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001ebc:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8001ec0:	430b      	orrs	r3, r1
 8001ec2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001ec6:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001eca:	f023 031f 	bic.w	r3, r3, #31
 8001ece:	69e1      	ldr	r1, [r4, #28]
 8001ed0:	3901      	subs	r1, #1
 8001ed2:	430b      	orrs	r3, r1
 8001ed4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001ed8:	6823      	ldr	r3, [r4, #0]
 8001eda:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001ede:	d00a      	beq.n	8001ef6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001ee0:	6862      	ldr	r2, [r4, #4]
 8001ee2:	68e3      	ldr	r3, [r4, #12]
 8001ee4:	061b      	lsls	r3, r3, #24
 8001ee6:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001eea:	68a2      	ldr	r2, [r4, #8]
 8001eec:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001ef0:	4a3c      	ldr	r2, [pc, #240]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8001ef2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8001ef6:	4a3b      	ldr	r2, [pc, #236]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8001ef8:	6813      	ldr	r3, [r2, #0]
 8001efa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001efe:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001f00:	f7fe fb4a 	bl	8000598 <HAL_GetTick>
 8001f04:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001f06:	4b37      	ldr	r3, [pc, #220]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8001f0e:	f47f af21 	bne.w	8001d54 <HAL_RCCEx_PeriphCLKConfig+0x250>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001f12:	f7fe fb41 	bl	8000598 <HAL_GetTick>
 8001f16:	1b80      	subs	r0, r0, r6
 8001f18:	2864      	cmp	r0, #100	; 0x64
 8001f1a:	d9f4      	bls.n	8001f06 <HAL_RCCEx_PeriphCLKConfig+0x402>
        return HAL_TIMEOUT;
 8001f1c:	2003      	movs	r0, #3
 8001f1e:	e71d      	b.n	8001d5c <HAL_RCCEx_PeriphCLKConfig+0x258>
    __HAL_RCC_PLLSAI_DISABLE();
 8001f20:	4a30      	ldr	r2, [pc, #192]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8001f22:	6813      	ldr	r3, [r2, #0]
 8001f24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f28:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001f2a:	f7fe fb35 	bl	8000598 <HAL_GetTick>
 8001f2e:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001f30:	4b2c      	ldr	r3, [pc, #176]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8001f38:	d006      	beq.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0x444>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001f3a:	f7fe fb2d 	bl	8000598 <HAL_GetTick>
 8001f3e:	1b40      	subs	r0, r0, r5
 8001f40:	2864      	cmp	r0, #100	; 0x64
 8001f42:	d9f5      	bls.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0x42c>
        return HAL_TIMEOUT;
 8001f44:	2003      	movs	r0, #3
 8001f46:	e709      	b.n	8001d5c <HAL_RCCEx_PeriphCLKConfig+0x258>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001f48:	6823      	ldr	r3, [r4, #0]
 8001f4a:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8001f4e:	d001      	beq.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x450>
 8001f50:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001f52:	b122      	cbz	r2, 8001f5e <HAL_RCCEx_PeriphCLKConfig+0x45a>
 8001f54:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8001f58:	d018      	beq.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x488>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001f5a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001f5c:	b9b3      	cbnz	r3, 8001f8c <HAL_RCCEx_PeriphCLKConfig+0x488>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001f5e:	4a21      	ldr	r2, [pc, #132]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8001f60:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8001f64:	6921      	ldr	r1, [r4, #16]
 8001f66:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f6a:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8001f6e:	6961      	ldr	r1, [r4, #20]
 8001f70:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001f74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001f78:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001f7c:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8001f80:	6a21      	ldr	r1, [r4, #32]
 8001f82:	3901      	subs	r1, #1
 8001f84:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001f88:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8001f8c:	6823      	ldr	r3, [r4, #0]
 8001f8e:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8001f92:	d003      	beq.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8001f94:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8001f96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001f9a:	d013      	beq.n	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
    __HAL_RCC_PLLSAI_ENABLE();
 8001f9c:	4a11      	ldr	r2, [pc, #68]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8001f9e:	6813      	ldr	r3, [r2, #0]
 8001fa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fa4:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001fa6:	f7fe faf7 	bl	8000598 <HAL_GetTick>
 8001faa:	4604      	mov	r4, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001fac:	4b0d      	ldr	r3, [pc, #52]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8001fb4:	d114      	bne.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001fb6:	f7fe faef 	bl	8000598 <HAL_GetTick>
 8001fba:	1b00      	subs	r0, r0, r4
 8001fbc:	2864      	cmp	r0, #100	; 0x64
 8001fbe:	d9f5      	bls.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        return HAL_TIMEOUT;
 8001fc0:	2003      	movs	r0, #3
 8001fc2:	e6cb      	b.n	8001d5c <HAL_RCCEx_PeriphCLKConfig+0x258>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001fc4:	4907      	ldr	r1, [pc, #28]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8001fc6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8001fca:	6920      	ldr	r0, [r4, #16]
 8001fcc:	69a3      	ldr	r3, [r4, #24]
 8001fce:	041b      	lsls	r3, r3, #16
 8001fd0:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001fd4:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001fde:	e7dd      	b.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x498>
  return HAL_OK;
 8001fe0:	2000      	movs	r0, #0
 8001fe2:	e6bb      	b.n	8001d5c <HAL_RCCEx_PeriphCLKConfig+0x258>
 8001fe4:	40023800 	.word	0x40023800
 8001fe8:	0ffffcff 	.word	0x0ffffcff

08001fec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001fec:	b510      	push	{r4, lr}
 8001fee:	4604      	mov	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001ff0:	6883      	ldr	r3, [r0, #8]
 8001ff2:	6902      	ldr	r2, [r0, #16]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	6942      	ldr	r2, [r0, #20]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	69c2      	ldr	r2, [r0, #28]
 8001ffc:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001ffe:	6801      	ldr	r1, [r0, #0]
 8002000:	6808      	ldr	r0, [r1, #0]
 8002002:	4a99      	ldr	r2, [pc, #612]	; (8002268 <UART_SetConfig+0x27c>)
 8002004:	4002      	ands	r2, r0
 8002006:	4313      	orrs	r3, r2
 8002008:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800200a:	6822      	ldr	r2, [r4, #0]
 800200c:	6853      	ldr	r3, [r2, #4]
 800200e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002012:	68e1      	ldr	r1, [r4, #12]
 8002014:	430b      	orrs	r3, r1
 8002016:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002018:	69a2      	ldr	r2, [r4, #24]

  tmpreg |= huart->Init.OneBitSampling;
 800201a:	6a23      	ldr	r3, [r4, #32]
 800201c:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800201e:	6821      	ldr	r1, [r4, #0]
 8002020:	688b      	ldr	r3, [r1, #8]
 8002022:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002026:	4313      	orrs	r3, r2
 8002028:	608b      	str	r3, [r1, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800202a:	6823      	ldr	r3, [r4, #0]
 800202c:	4a8f      	ldr	r2, [pc, #572]	; (800226c <UART_SetConfig+0x280>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d018      	beq.n	8002064 <UART_SetConfig+0x78>
 8002032:	4a8f      	ldr	r2, [pc, #572]	; (8002270 <UART_SetConfig+0x284>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d028      	beq.n	800208a <UART_SetConfig+0x9e>
 8002038:	4a8e      	ldr	r2, [pc, #568]	; (8002274 <UART_SetConfig+0x288>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d03d      	beq.n	80020ba <UART_SetConfig+0xce>
 800203e:	4a8e      	ldr	r2, [pc, #568]	; (8002278 <UART_SetConfig+0x28c>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d050      	beq.n	80020e6 <UART_SetConfig+0xfa>
 8002044:	4a8d      	ldr	r2, [pc, #564]	; (800227c <UART_SetConfig+0x290>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d062      	beq.n	8002110 <UART_SetConfig+0x124>
 800204a:	4a8d      	ldr	r2, [pc, #564]	; (8002280 <UART_SetConfig+0x294>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d077      	beq.n	8002140 <UART_SetConfig+0x154>
 8002050:	4a8c      	ldr	r2, [pc, #560]	; (8002284 <UART_SetConfig+0x298>)
 8002052:	4293      	cmp	r3, r2
 8002054:	f000 808c 	beq.w	8002170 <UART_SetConfig+0x184>
 8002058:	4a8b      	ldr	r2, [pc, #556]	; (8002288 <UART_SetConfig+0x29c>)
 800205a:	4293      	cmp	r3, r2
 800205c:	f000 80a0 	beq.w	80021a0 <UART_SetConfig+0x1b4>
 8002060:	2310      	movs	r3, #16
 8002062:	e0b6      	b.n	80021d2 <UART_SetConfig+0x1e6>
 8002064:	4b89      	ldr	r3, [pc, #548]	; (800228c <UART_SetConfig+0x2a0>)
 8002066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800206a:	f003 0303 	and.w	r3, r3, #3
 800206e:	2b03      	cmp	r3, #3
 8002070:	d809      	bhi.n	8002086 <UART_SetConfig+0x9a>
 8002072:	e8df f003 	tbb	[pc, r3]
 8002076:	0402      	.short	0x0402
 8002078:	06ad      	.short	0x06ad
 800207a:	2301      	movs	r3, #1
 800207c:	e0a9      	b.n	80021d2 <UART_SetConfig+0x1e6>
 800207e:	2304      	movs	r3, #4
 8002080:	e0a7      	b.n	80021d2 <UART_SetConfig+0x1e6>
 8002082:	2308      	movs	r3, #8
 8002084:	e0a5      	b.n	80021d2 <UART_SetConfig+0x1e6>
 8002086:	2310      	movs	r3, #16
 8002088:	e0a3      	b.n	80021d2 <UART_SetConfig+0x1e6>
 800208a:	4b80      	ldr	r3, [pc, #512]	; (800228c <UART_SetConfig+0x2a0>)
 800208c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002090:	f003 030c 	and.w	r3, r3, #12
 8002094:	2b0c      	cmp	r3, #12
 8002096:	d80e      	bhi.n	80020b6 <UART_SetConfig+0xca>
 8002098:	e8df f003 	tbb	[pc, r3]
 800209c:	0d0d0d07 	.word	0x0d0d0d07
 80020a0:	0d0d0d09 	.word	0x0d0d0d09
 80020a4:	0d0d0da9 	.word	0x0d0d0da9
 80020a8:	0b          	.byte	0x0b
 80020a9:	00          	.byte	0x00
 80020aa:	2300      	movs	r3, #0
 80020ac:	e091      	b.n	80021d2 <UART_SetConfig+0x1e6>
 80020ae:	2304      	movs	r3, #4
 80020b0:	e08f      	b.n	80021d2 <UART_SetConfig+0x1e6>
 80020b2:	2308      	movs	r3, #8
 80020b4:	e08d      	b.n	80021d2 <UART_SetConfig+0x1e6>
 80020b6:	2310      	movs	r3, #16
 80020b8:	e08b      	b.n	80021d2 <UART_SetConfig+0x1e6>
 80020ba:	4b74      	ldr	r3, [pc, #464]	; (800228c <UART_SetConfig+0x2a0>)
 80020bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020c0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80020c4:	2b10      	cmp	r3, #16
 80020c6:	d00a      	beq.n	80020de <UART_SetConfig+0xf2>
 80020c8:	d906      	bls.n	80020d8 <UART_SetConfig+0xec>
 80020ca:	2b20      	cmp	r3, #32
 80020cc:	f000 8091 	beq.w	80021f2 <UART_SetConfig+0x206>
 80020d0:	2b30      	cmp	r3, #48	; 0x30
 80020d2:	d106      	bne.n	80020e2 <UART_SetConfig+0xf6>
 80020d4:	2308      	movs	r3, #8
 80020d6:	e07c      	b.n	80021d2 <UART_SetConfig+0x1e6>
 80020d8:	b91b      	cbnz	r3, 80020e2 <UART_SetConfig+0xf6>
 80020da:	2300      	movs	r3, #0
 80020dc:	e079      	b.n	80021d2 <UART_SetConfig+0x1e6>
 80020de:	2304      	movs	r3, #4
 80020e0:	e077      	b.n	80021d2 <UART_SetConfig+0x1e6>
 80020e2:	2310      	movs	r3, #16
 80020e4:	e075      	b.n	80021d2 <UART_SetConfig+0x1e6>
 80020e6:	4b69      	ldr	r3, [pc, #420]	; (800228c <UART_SetConfig+0x2a0>)
 80020e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ec:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80020f0:	2b40      	cmp	r3, #64	; 0x40
 80020f2:	d009      	beq.n	8002108 <UART_SetConfig+0x11c>
 80020f4:	d905      	bls.n	8002102 <UART_SetConfig+0x116>
 80020f6:	2b80      	cmp	r3, #128	; 0x80
 80020f8:	d07d      	beq.n	80021f6 <UART_SetConfig+0x20a>
 80020fa:	2bc0      	cmp	r3, #192	; 0xc0
 80020fc:	d106      	bne.n	800210c <UART_SetConfig+0x120>
 80020fe:	2308      	movs	r3, #8
 8002100:	e067      	b.n	80021d2 <UART_SetConfig+0x1e6>
 8002102:	b91b      	cbnz	r3, 800210c <UART_SetConfig+0x120>
 8002104:	2300      	movs	r3, #0
 8002106:	e064      	b.n	80021d2 <UART_SetConfig+0x1e6>
 8002108:	2304      	movs	r3, #4
 800210a:	e062      	b.n	80021d2 <UART_SetConfig+0x1e6>
 800210c:	2310      	movs	r3, #16
 800210e:	e060      	b.n	80021d2 <UART_SetConfig+0x1e6>
 8002110:	4b5e      	ldr	r3, [pc, #376]	; (800228c <UART_SetConfig+0x2a0>)
 8002112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002116:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800211a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800211e:	d00b      	beq.n	8002138 <UART_SetConfig+0x14c>
 8002120:	d907      	bls.n	8002132 <UART_SetConfig+0x146>
 8002122:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002126:	d068      	beq.n	80021fa <UART_SetConfig+0x20e>
 8002128:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800212c:	d106      	bne.n	800213c <UART_SetConfig+0x150>
 800212e:	2308      	movs	r3, #8
 8002130:	e04f      	b.n	80021d2 <UART_SetConfig+0x1e6>
 8002132:	b91b      	cbnz	r3, 800213c <UART_SetConfig+0x150>
 8002134:	2300      	movs	r3, #0
 8002136:	e04c      	b.n	80021d2 <UART_SetConfig+0x1e6>
 8002138:	2304      	movs	r3, #4
 800213a:	e04a      	b.n	80021d2 <UART_SetConfig+0x1e6>
 800213c:	2310      	movs	r3, #16
 800213e:	e048      	b.n	80021d2 <UART_SetConfig+0x1e6>
 8002140:	4b52      	ldr	r3, [pc, #328]	; (800228c <UART_SetConfig+0x2a0>)
 8002142:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002146:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800214a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800214e:	d00b      	beq.n	8002168 <UART_SetConfig+0x17c>
 8002150:	d907      	bls.n	8002162 <UART_SetConfig+0x176>
 8002152:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002156:	d052      	beq.n	80021fe <UART_SetConfig+0x212>
 8002158:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800215c:	d106      	bne.n	800216c <UART_SetConfig+0x180>
 800215e:	2308      	movs	r3, #8
 8002160:	e037      	b.n	80021d2 <UART_SetConfig+0x1e6>
 8002162:	b91b      	cbnz	r3, 800216c <UART_SetConfig+0x180>
 8002164:	2301      	movs	r3, #1
 8002166:	e034      	b.n	80021d2 <UART_SetConfig+0x1e6>
 8002168:	2304      	movs	r3, #4
 800216a:	e032      	b.n	80021d2 <UART_SetConfig+0x1e6>
 800216c:	2310      	movs	r3, #16
 800216e:	e030      	b.n	80021d2 <UART_SetConfig+0x1e6>
 8002170:	4b46      	ldr	r3, [pc, #280]	; (800228c <UART_SetConfig+0x2a0>)
 8002172:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002176:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800217a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800217e:	d00b      	beq.n	8002198 <UART_SetConfig+0x1ac>
 8002180:	d907      	bls.n	8002192 <UART_SetConfig+0x1a6>
 8002182:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002186:	d03c      	beq.n	8002202 <UART_SetConfig+0x216>
 8002188:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800218c:	d106      	bne.n	800219c <UART_SetConfig+0x1b0>
 800218e:	2308      	movs	r3, #8
 8002190:	e01f      	b.n	80021d2 <UART_SetConfig+0x1e6>
 8002192:	b91b      	cbnz	r3, 800219c <UART_SetConfig+0x1b0>
 8002194:	2300      	movs	r3, #0
 8002196:	e01c      	b.n	80021d2 <UART_SetConfig+0x1e6>
 8002198:	2304      	movs	r3, #4
 800219a:	e01a      	b.n	80021d2 <UART_SetConfig+0x1e6>
 800219c:	2310      	movs	r3, #16
 800219e:	e018      	b.n	80021d2 <UART_SetConfig+0x1e6>
 80021a0:	4b3a      	ldr	r3, [pc, #232]	; (800228c <UART_SetConfig+0x2a0>)
 80021a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021a6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80021aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80021ae:	d00b      	beq.n	80021c8 <UART_SetConfig+0x1dc>
 80021b0:	d907      	bls.n	80021c2 <UART_SetConfig+0x1d6>
 80021b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021b6:	d026      	beq.n	8002206 <UART_SetConfig+0x21a>
 80021b8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80021bc:	d106      	bne.n	80021cc <UART_SetConfig+0x1e0>
 80021be:	2308      	movs	r3, #8
 80021c0:	e007      	b.n	80021d2 <UART_SetConfig+0x1e6>
 80021c2:	b91b      	cbnz	r3, 80021cc <UART_SetConfig+0x1e0>
 80021c4:	2300      	movs	r3, #0
 80021c6:	e004      	b.n	80021d2 <UART_SetConfig+0x1e6>
 80021c8:	2304      	movs	r3, #4
 80021ca:	e002      	b.n	80021d2 <UART_SetConfig+0x1e6>
 80021cc:	2310      	movs	r3, #16
 80021ce:	e000      	b.n	80021d2 <UART_SetConfig+0x1e6>
 80021d0:	2302      	movs	r3, #2

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80021d2:	69e2      	ldr	r2, [r4, #28]
 80021d4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80021d8:	d017      	beq.n	800220a <UART_SetConfig+0x21e>
      ret = HAL_ERROR;
    }
  }
  else
  {
    switch (clocksource)
 80021da:	2b08      	cmp	r3, #8
 80021dc:	f200 80b3 	bhi.w	8002346 <UART_SetConfig+0x35a>
 80021e0:	e8df f003 	tbb	[pc, r3]
 80021e4:	b1958b76 	.word	0xb1958b76
 80021e8:	b1b1b19e 	.word	0xb1b1b19e
 80021ec:	a8          	.byte	0xa8
 80021ed:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 80021ee:	2302      	movs	r3, #2
 80021f0:	e7ef      	b.n	80021d2 <UART_SetConfig+0x1e6>
 80021f2:	2302      	movs	r3, #2
 80021f4:	e7ed      	b.n	80021d2 <UART_SetConfig+0x1e6>
 80021f6:	2302      	movs	r3, #2
 80021f8:	e7eb      	b.n	80021d2 <UART_SetConfig+0x1e6>
 80021fa:	2302      	movs	r3, #2
 80021fc:	e7e9      	b.n	80021d2 <UART_SetConfig+0x1e6>
 80021fe:	2302      	movs	r3, #2
 8002200:	e7e7      	b.n	80021d2 <UART_SetConfig+0x1e6>
 8002202:	2302      	movs	r3, #2
 8002204:	e7e5      	b.n	80021d2 <UART_SetConfig+0x1e6>
 8002206:	2302      	movs	r3, #2
 8002208:	e7e3      	b.n	80021d2 <UART_SetConfig+0x1e6>
    switch (clocksource)
 800220a:	2b08      	cmp	r3, #8
 800220c:	d85d      	bhi.n	80022ca <UART_SetConfig+0x2de>
 800220e:	e8df f003 	tbb	[pc, r3]
 8002212:	1f05      	.short	0x1f05
 8002214:	5c485c3f 	.word	0x5c485c3f
 8002218:	5c5c      	.short	0x5c5c
 800221a:	53          	.byte	0x53
 800221b:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800221c:	f7ff fc52 	bl	8001ac4 <HAL_RCC_GetPCLK1Freq>
 8002220:	6862      	ldr	r2, [r4, #4]
 8002222:	0853      	lsrs	r3, r2, #1
 8002224:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8002228:	fbb3 f3f2 	udiv	r3, r3, r2
 800222c:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800222e:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002230:	f1a3 0110 	sub.w	r1, r3, #16
 8002234:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8002238:	4291      	cmp	r1, r2
 800223a:	f200 8087 	bhi.w	800234c <UART_SetConfig+0x360>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800223e:	b29a      	uxth	r2, r3
 8002240:	f022 020f 	bic.w	r2, r2, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002244:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8002248:	4313      	orrs	r3, r2
      huart->Instance->BRR = brrtemp;
 800224a:	6822      	ldr	r2, [r4, #0]
 800224c:	60d3      	str	r3, [r2, #12]
 800224e:	e050      	b.n	80022f2 <UART_SetConfig+0x306>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002250:	f7ff fc48 	bl	8001ae4 <HAL_RCC_GetPCLK2Freq>
 8002254:	6862      	ldr	r2, [r4, #4]
 8002256:	0853      	lsrs	r3, r2, #1
 8002258:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800225c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002260:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002262:	2000      	movs	r0, #0
        break;
 8002264:	e7e4      	b.n	8002230 <UART_SetConfig+0x244>
 8002266:	bf00      	nop
 8002268:	efff69f3 	.word	0xefff69f3
 800226c:	40011000 	.word	0x40011000
 8002270:	40004400 	.word	0x40004400
 8002274:	40004800 	.word	0x40004800
 8002278:	40004c00 	.word	0x40004c00
 800227c:	40005000 	.word	0x40005000
 8002280:	40011400 	.word	0x40011400
 8002284:	40007800 	.word	0x40007800
 8002288:	40007c00 	.word	0x40007c00
 800228c:	40023800 	.word	0x40023800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002290:	6862      	ldr	r2, [r4, #4]
 8002292:	4b30      	ldr	r3, [pc, #192]	; (8002354 <UART_SetConfig+0x368>)
 8002294:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8002298:	fbb3 f3f2 	udiv	r3, r3, r2
 800229c:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800229e:	2000      	movs	r0, #0
        break;
 80022a0:	e7c6      	b.n	8002230 <UART_SetConfig+0x244>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80022a2:	f7ff faeb 	bl	800187c <HAL_RCC_GetSysClockFreq>
 80022a6:	6862      	ldr	r2, [r4, #4]
 80022a8:	0853      	lsrs	r3, r2, #1
 80022aa:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80022ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80022b2:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80022b4:	2000      	movs	r0, #0
        break;
 80022b6:	e7bb      	b.n	8002230 <UART_SetConfig+0x244>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80022b8:	6862      	ldr	r2, [r4, #4]
 80022ba:	0853      	lsrs	r3, r2, #1
 80022bc:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80022c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80022c4:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80022c6:	2000      	movs	r0, #0
        break;
 80022c8:	e7b2      	b.n	8002230 <UART_SetConfig+0x244>
        ret = HAL_ERROR;
 80022ca:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 80022cc:	2300      	movs	r3, #0
 80022ce:	e7af      	b.n	8002230 <UART_SetConfig+0x244>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80022d0:	f7ff fbf8 	bl	8001ac4 <HAL_RCC_GetPCLK1Freq>
 80022d4:	6862      	ldr	r2, [r4, #4]
 80022d6:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 80022da:	fbb3 f3f2 	udiv	r3, r3, r2
 80022de:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80022e0:	2000      	movs	r0, #0
        ret = HAL_ERROR;
        break;
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80022e2:	f1a3 0110 	sub.w	r1, r3, #16
 80022e6:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80022ea:	4291      	cmp	r1, r2
 80022ec:	d830      	bhi.n	8002350 <UART_SetConfig+0x364>
    {
      huart->Instance->BRR = usartdiv;
 80022ee:	6822      	ldr	r2, [r4, #0]
 80022f0:	60d3      	str	r3, [r2, #12]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80022f2:	2300      	movs	r3, #0
 80022f4:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 80022f6:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 80022f8:	bd10      	pop	{r4, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80022fa:	f7ff fbf3 	bl	8001ae4 <HAL_RCC_GetPCLK2Freq>
 80022fe:	6862      	ldr	r2, [r4, #4]
 8002300:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8002304:	fbb3 f3f2 	udiv	r3, r3, r2
 8002308:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800230a:	2000      	movs	r0, #0
        break;
 800230c:	e7e9      	b.n	80022e2 <UART_SetConfig+0x2f6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800230e:	6862      	ldr	r2, [r4, #4]
 8002310:	4b11      	ldr	r3, [pc, #68]	; (8002358 <UART_SetConfig+0x36c>)
 8002312:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8002316:	fbb3 f3f2 	udiv	r3, r3, r2
 800231a:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800231c:	2000      	movs	r0, #0
        break;
 800231e:	e7e0      	b.n	80022e2 <UART_SetConfig+0x2f6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002320:	f7ff faac 	bl	800187c <HAL_RCC_GetSysClockFreq>
 8002324:	6862      	ldr	r2, [r4, #4]
 8002326:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 800232a:	fbb3 f3f2 	udiv	r3, r3, r2
 800232e:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002330:	2000      	movs	r0, #0
        break;
 8002332:	e7d6      	b.n	80022e2 <UART_SetConfig+0x2f6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002334:	6862      	ldr	r2, [r4, #4]
 8002336:	0853      	lsrs	r3, r2, #1
 8002338:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800233c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002340:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002342:	2000      	movs	r0, #0
        break;
 8002344:	e7cd      	b.n	80022e2 <UART_SetConfig+0x2f6>
        ret = HAL_ERROR;
 8002346:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8002348:	2300      	movs	r3, #0
 800234a:	e7ca      	b.n	80022e2 <UART_SetConfig+0x2f6>
      ret = HAL_ERROR;
 800234c:	2001      	movs	r0, #1
 800234e:	e7d0      	b.n	80022f2 <UART_SetConfig+0x306>
      ret = HAL_ERROR;
 8002350:	2001      	movs	r0, #1
 8002352:	e7ce      	b.n	80022f2 <UART_SetConfig+0x306>
 8002354:	01e84800 	.word	0x01e84800
 8002358:	00f42400 	.word	0x00f42400

0800235c <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800235c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800235e:	f013 0f01 	tst.w	r3, #1
 8002362:	d006      	beq.n	8002372 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002364:	6802      	ldr	r2, [r0, #0]
 8002366:	6853      	ldr	r3, [r2, #4]
 8002368:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800236c:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800236e:	430b      	orrs	r3, r1
 8002370:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002372:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002374:	f013 0f02 	tst.w	r3, #2
 8002378:	d006      	beq.n	8002388 <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800237a:	6802      	ldr	r2, [r0, #0]
 800237c:	6853      	ldr	r3, [r2, #4]
 800237e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002382:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8002384:	430b      	orrs	r3, r1
 8002386:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002388:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800238a:	f013 0f04 	tst.w	r3, #4
 800238e:	d006      	beq.n	800239e <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002390:	6802      	ldr	r2, [r0, #0]
 8002392:	6853      	ldr	r3, [r2, #4]
 8002394:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002398:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800239a:	430b      	orrs	r3, r1
 800239c:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800239e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80023a0:	f013 0f08 	tst.w	r3, #8
 80023a4:	d006      	beq.n	80023b4 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80023a6:	6802      	ldr	r2, [r0, #0]
 80023a8:	6853      	ldr	r3, [r2, #4]
 80023aa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80023ae:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80023b0:	430b      	orrs	r3, r1
 80023b2:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80023b4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80023b6:	f013 0f10 	tst.w	r3, #16
 80023ba:	d006      	beq.n	80023ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80023bc:	6802      	ldr	r2, [r0, #0]
 80023be:	6893      	ldr	r3, [r2, #8]
 80023c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80023c4:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80023c6:	430b      	orrs	r3, r1
 80023c8:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80023ca:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80023cc:	f013 0f20 	tst.w	r3, #32
 80023d0:	d006      	beq.n	80023e0 <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80023d2:	6802      	ldr	r2, [r0, #0]
 80023d4:	6893      	ldr	r3, [r2, #8]
 80023d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80023da:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80023dc:	430b      	orrs	r3, r1
 80023de:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80023e0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80023e2:	f013 0f40 	tst.w	r3, #64	; 0x40
 80023e6:	d00a      	beq.n	80023fe <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80023e8:	6802      	ldr	r2, [r0, #0]
 80023ea:	6853      	ldr	r3, [r2, #4]
 80023ec:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80023f0:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80023f2:	430b      	orrs	r3, r1
 80023f4:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80023f6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80023f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80023fc:	d00b      	beq.n	8002416 <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80023fe:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002400:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002404:	d006      	beq.n	8002414 <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002406:	6802      	ldr	r2, [r0, #0]
 8002408:	6853      	ldr	r3, [r2, #4]
 800240a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800240e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002410:	430b      	orrs	r3, r1
 8002412:	6053      	str	r3, [r2, #4]
  }
}
 8002414:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002416:	6802      	ldr	r2, [r0, #0]
 8002418:	6853      	ldr	r3, [r2, #4]
 800241a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800241e:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8002420:	430b      	orrs	r3, r1
 8002422:	6053      	str	r3, [r2, #4]
 8002424:	e7eb      	b.n	80023fe <UART_AdvFeatureConfig+0xa2>

08002426 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002426:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800242a:	4605      	mov	r5, r0
 800242c:	460f      	mov	r7, r1
 800242e:	4616      	mov	r6, r2
 8002430:	4698      	mov	r8, r3
 8002432:	9c06      	ldr	r4, [sp, #24]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002434:	682b      	ldr	r3, [r5, #0]
 8002436:	69db      	ldr	r3, [r3, #28]
 8002438:	ea37 0303 	bics.w	r3, r7, r3
 800243c:	bf0c      	ite	eq
 800243e:	2301      	moveq	r3, #1
 8002440:	2300      	movne	r3, #0
 8002442:	42b3      	cmp	r3, r6
 8002444:	d11c      	bne.n	8002480 <UART_WaitOnFlagUntilTimeout+0x5a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002446:	f1b4 3fff 	cmp.w	r4, #4294967295
 800244a:	d0f3      	beq.n	8002434 <UART_WaitOnFlagUntilTimeout+0xe>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800244c:	f7fe f8a4 	bl	8000598 <HAL_GetTick>
 8002450:	eba0 0008 	sub.w	r0, r0, r8
 8002454:	42a0      	cmp	r0, r4
 8002456:	d801      	bhi.n	800245c <UART_WaitOnFlagUntilTimeout+0x36>
 8002458:	2c00      	cmp	r4, #0
 800245a:	d1eb      	bne.n	8002434 <UART_WaitOnFlagUntilTimeout+0xe>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800245c:	682a      	ldr	r2, [r5, #0]
 800245e:	6813      	ldr	r3, [r2, #0]
 8002460:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002464:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002466:	682a      	ldr	r2, [r5, #0]
 8002468:	6893      	ldr	r3, [r2, #8]
 800246a:	f023 0301 	bic.w	r3, r3, #1
 800246e:	6093      	str	r3, [r2, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002470:	2320      	movs	r3, #32
 8002472:	676b      	str	r3, [r5, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002474:	67ab      	str	r3, [r5, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002476:	2300      	movs	r3, #0
 8002478:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70

        return HAL_TIMEOUT;
 800247c:	2003      	movs	r0, #3
 800247e:	e000      	b.n	8002482 <UART_WaitOnFlagUntilTimeout+0x5c>
      }
    }
  }
  return HAL_OK;
 8002480:	2000      	movs	r0, #0
}
 8002482:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002486 <UART_CheckIdleState>:
{
 8002486:	b510      	push	{r4, lr}
 8002488:	b082      	sub	sp, #8
 800248a:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800248c:	2300      	movs	r3, #0
 800248e:	67c3      	str	r3, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8002490:	f7fe f882 	bl	8000598 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002494:	6822      	ldr	r2, [r4, #0]
 8002496:	6812      	ldr	r2, [r2, #0]
 8002498:	f012 0f08 	tst.w	r2, #8
 800249c:	d107      	bne.n	80024ae <UART_CheckIdleState+0x28>
  huart->gState = HAL_UART_STATE_READY;
 800249e:	2320      	movs	r3, #32
 80024a0:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80024a2:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 80024a4:	2000      	movs	r0, #0
 80024a6:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
}
 80024aa:	b002      	add	sp, #8
 80024ac:	bd10      	pop	{r4, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80024ae:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80024b2:	9300      	str	r3, [sp, #0]
 80024b4:	4603      	mov	r3, r0
 80024b6:	2200      	movs	r2, #0
 80024b8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80024bc:	4620      	mov	r0, r4
 80024be:	f7ff ffb2 	bl	8002426 <UART_WaitOnFlagUntilTimeout>
 80024c2:	2800      	cmp	r0, #0
 80024c4:	d0eb      	beq.n	800249e <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 80024c6:	2003      	movs	r0, #3
 80024c8:	e7ef      	b.n	80024aa <UART_CheckIdleState+0x24>

080024ca <HAL_UART_Init>:
  if (huart == NULL)
 80024ca:	b368      	cbz	r0, 8002528 <HAL_UART_Init+0x5e>
{
 80024cc:	b510      	push	{r4, lr}
 80024ce:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80024d0:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80024d2:	b303      	cbz	r3, 8002516 <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 80024d4:	2324      	movs	r3, #36	; 0x24
 80024d6:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 80024d8:	6822      	ldr	r2, [r4, #0]
 80024da:	6813      	ldr	r3, [r2, #0]
 80024dc:	f023 0301 	bic.w	r3, r3, #1
 80024e0:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80024e2:	4620      	mov	r0, r4
 80024e4:	f7ff fd82 	bl	8001fec <UART_SetConfig>
 80024e8:	2801      	cmp	r0, #1
 80024ea:	d013      	beq.n	8002514 <HAL_UART_Init+0x4a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80024ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80024ee:	b9bb      	cbnz	r3, 8002520 <HAL_UART_Init+0x56>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024f0:	6822      	ldr	r2, [r4, #0]
 80024f2:	6853      	ldr	r3, [r2, #4]
 80024f4:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80024f8:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024fa:	6822      	ldr	r2, [r4, #0]
 80024fc:	6893      	ldr	r3, [r2, #8]
 80024fe:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8002502:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8002504:	6822      	ldr	r2, [r4, #0]
 8002506:	6813      	ldr	r3, [r2, #0]
 8002508:	f043 0301 	orr.w	r3, r3, #1
 800250c:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 800250e:	4620      	mov	r0, r4
 8002510:	f7ff ffb9 	bl	8002486 <UART_CheckIdleState>
}
 8002514:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002516:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 800251a:	f001 fd17 	bl	8003f4c <HAL_UART_MspInit>
 800251e:	e7d9      	b.n	80024d4 <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 8002520:	4620      	mov	r0, r4
 8002522:	f7ff ff1b 	bl	800235c <UART_AdvFeatureConfig>
 8002526:	e7e3      	b.n	80024f0 <HAL_UART_Init+0x26>
    return HAL_ERROR;
 8002528:	2001      	movs	r0, #1
}
 800252a:	4770      	bx	lr

0800252c <USB_CoreReset>:
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0U;
 800252c:	2300      	movs	r3, #0

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800252e:	3301      	adds	r3, #1
 8002530:	4a0c      	ldr	r2, [pc, #48]	; (8002564 <USB_CoreReset+0x38>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d811      	bhi.n	800255a <USB_CoreReset+0x2e>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002536:	6902      	ldr	r2, [r0, #16]
 8002538:	2a00      	cmp	r2, #0
 800253a:	daf8      	bge.n	800252e <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800253c:	6903      	ldr	r3, [r0, #16]
 800253e:	f043 0301 	orr.w	r3, r3, #1
 8002542:	6103      	str	r3, [r0, #16]
  count = 0U;
 8002544:	2300      	movs	r3, #0

  do
  {
    if (++count > 200000U)
 8002546:	3301      	adds	r3, #1
 8002548:	4a06      	ldr	r2, [pc, #24]	; (8002564 <USB_CoreReset+0x38>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d807      	bhi.n	800255e <USB_CoreReset+0x32>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800254e:	6902      	ldr	r2, [r0, #16]
 8002550:	f012 0f01 	tst.w	r2, #1
 8002554:	d1f7      	bne.n	8002546 <USB_CoreReset+0x1a>

  return HAL_OK;
 8002556:	2000      	movs	r0, #0
 8002558:	4770      	bx	lr
      return HAL_TIMEOUT;
 800255a:	2003      	movs	r0, #3
 800255c:	4770      	bx	lr
      return HAL_TIMEOUT;
 800255e:	2003      	movs	r0, #3
}
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	00030d40 	.word	0x00030d40

08002568 <USB_CoreInit>:
{
 8002568:	b084      	sub	sp, #16
 800256a:	b510      	push	{r4, lr}
 800256c:	4604      	mov	r4, r0
 800256e:	a803      	add	r0, sp, #12
 8002570:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002574:	9b08      	ldr	r3, [sp, #32]
 8002576:	2b01      	cmp	r3, #1
 8002578:	d11d      	bne.n	80025b6 <USB_CoreInit+0x4e>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800257a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800257c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002580:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002582:	68e2      	ldr	r2, [r4, #12]
 8002584:	4b16      	ldr	r3, [pc, #88]	; (80025e0 <USB_CoreInit+0x78>)
 8002586:	4013      	ands	r3, r2
 8002588:	60e3      	str	r3, [r4, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800258a:	68e3      	ldr	r3, [r4, #12]
 800258c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002590:	60e3      	str	r3, [r4, #12]
    if (cfg.use_external_vbus == 1U)
 8002592:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002594:	2b01      	cmp	r3, #1
 8002596:	d009      	beq.n	80025ac <USB_CoreInit+0x44>
    ret = USB_CoreReset(USBx);
 8002598:	4620      	mov	r0, r4
 800259a:	f7ff ffc7 	bl	800252c <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 800259e:	9b06      	ldr	r3, [sp, #24]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d014      	beq.n	80025ce <USB_CoreInit+0x66>
}
 80025a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80025a8:	b004      	add	sp, #16
 80025aa:	4770      	bx	lr
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80025ac:	68e3      	ldr	r3, [r4, #12]
 80025ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025b2:	60e3      	str	r3, [r4, #12]
 80025b4:	e7f0      	b.n	8002598 <USB_CoreInit+0x30>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80025b6:	68e3      	ldr	r3, [r4, #12]
 80025b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025bc:	60e3      	str	r3, [r4, #12]
    ret = USB_CoreReset(USBx);
 80025be:	4620      	mov	r0, r4
 80025c0:	f7ff ffb4 	bl	800252c <USB_CoreReset>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80025c4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80025c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025ca:	63a3      	str	r3, [r4, #56]	; 0x38
 80025cc:	e7e7      	b.n	800259e <USB_CoreInit+0x36>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80025ce:	68a3      	ldr	r3, [r4, #8]
 80025d0:	f043 0306 	orr.w	r3, r3, #6
 80025d4:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80025d6:	68a3      	ldr	r3, [r4, #8]
 80025d8:	f043 0320 	orr.w	r3, r3, #32
 80025dc:	60a3      	str	r3, [r4, #8]
 80025de:	e7e1      	b.n	80025a4 <USB_CoreInit+0x3c>
 80025e0:	ffbdffbf 	.word	0xffbdffbf

080025e4 <USB_SetTurnaroundTime>:
  if (speed == USB_OTG_SPEED_FULL)
 80025e4:	2a03      	cmp	r2, #3
 80025e6:	d00a      	beq.n	80025fe <USB_SetTurnaroundTime+0x1a>
    UsbTrd = USBD_HS_TRDT_VALUE;
 80025e8:	2109      	movs	r1, #9
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80025ea:	68c2      	ldr	r2, [r0, #12]
 80025ec:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 80025f0:	60c2      	str	r2, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80025f2:	68c3      	ldr	r3, [r0, #12]
 80025f4:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 80025f8:	60c3      	str	r3, [r0, #12]
}
 80025fa:	2000      	movs	r0, #0
 80025fc:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80025fe:	4b27      	ldr	r3, [pc, #156]	; (800269c <USB_SetTurnaroundTime+0xb8>)
 8002600:	440b      	add	r3, r1
 8002602:	4a27      	ldr	r2, [pc, #156]	; (80026a0 <USB_SetTurnaroundTime+0xbc>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d939      	bls.n	800267c <USB_SetTurnaroundTime+0x98>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002608:	4b26      	ldr	r3, [pc, #152]	; (80026a4 <USB_SetTurnaroundTime+0xc0>)
 800260a:	440b      	add	r3, r1
 800260c:	4a26      	ldr	r2, [pc, #152]	; (80026a8 <USB_SetTurnaroundTime+0xc4>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d936      	bls.n	8002680 <USB_SetTurnaroundTime+0x9c>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002612:	4b26      	ldr	r3, [pc, #152]	; (80026ac <USB_SetTurnaroundTime+0xc8>)
 8002614:	440b      	add	r3, r1
 8002616:	4a26      	ldr	r2, [pc, #152]	; (80026b0 <USB_SetTurnaroundTime+0xcc>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d933      	bls.n	8002684 <USB_SetTurnaroundTime+0xa0>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800261c:	4b25      	ldr	r3, [pc, #148]	; (80026b4 <USB_SetTurnaroundTime+0xd0>)
 800261e:	440b      	add	r3, r1
 8002620:	f502 32c3 	add.w	r2, r2, #99840	; 0x18600
 8002624:	32a0      	adds	r2, #160	; 0xa0
 8002626:	4293      	cmp	r3, r2
 8002628:	d92e      	bls.n	8002688 <USB_SetTurnaroundTime+0xa4>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800262a:	4b23      	ldr	r3, [pc, #140]	; (80026b8 <USB_SetTurnaroundTime+0xd4>)
 800262c:	440b      	add	r3, r1
 800262e:	4a23      	ldr	r2, [pc, #140]	; (80026bc <USB_SetTurnaroundTime+0xd8>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d92b      	bls.n	800268c <USB_SetTurnaroundTime+0xa8>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002634:	4b22      	ldr	r3, [pc, #136]	; (80026c0 <USB_SetTurnaroundTime+0xdc>)
 8002636:	440b      	add	r3, r1
 8002638:	f502 2292 	add.w	r2, r2, #299008	; 0x49000
 800263c:	f502 7278 	add.w	r2, r2, #992	; 0x3e0
 8002640:	4293      	cmp	r3, r2
 8002642:	d925      	bls.n	8002690 <USB_SetTurnaroundTime+0xac>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002644:	4b1f      	ldr	r3, [pc, #124]	; (80026c4 <USB_SetTurnaroundTime+0xe0>)
 8002646:	440b      	add	r3, r1
 8002648:	f502 22c3 	add.w	r2, r2, #399360	; 0x61800
 800264c:	f502 7220 	add.w	r2, r2, #640	; 0x280
 8002650:	4293      	cmp	r3, r2
 8002652:	d91f      	bls.n	8002694 <USB_SetTurnaroundTime+0xb0>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002654:	4b1c      	ldr	r3, [pc, #112]	; (80026c8 <USB_SetTurnaroundTime+0xe4>)
 8002656:	440b      	add	r3, r1
 8002658:	f502 12b7 	add.w	r2, r2, #1499136	; 0x16e000
 800265c:	f502 7258 	add.w	r2, r2, #864	; 0x360
 8002660:	4293      	cmp	r3, r2
 8002662:	d919      	bls.n	8002698 <USB_SetTurnaroundTime+0xb4>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002664:	4b19      	ldr	r3, [pc, #100]	; (80026cc <USB_SetTurnaroundTime+0xe8>)
 8002666:	440b      	add	r3, r1
 8002668:	f502 2212 	add.w	r2, r2, #598016	; 0x92000
 800266c:	f502 62f8 	add.w	r2, r2, #1984	; 0x7c0
 8002670:	4293      	cmp	r3, r2
 8002672:	d901      	bls.n	8002678 <USB_SetTurnaroundTime+0x94>
      UsbTrd = 0x6U;
 8002674:	2106      	movs	r1, #6
 8002676:	e7b8      	b.n	80025ea <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x7U;
 8002678:	2107      	movs	r1, #7
 800267a:	e7b6      	b.n	80025ea <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xFU;
 800267c:	210f      	movs	r1, #15
 800267e:	e7b4      	b.n	80025ea <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xEU;
 8002680:	210e      	movs	r1, #14
 8002682:	e7b2      	b.n	80025ea <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xDU;
 8002684:	210d      	movs	r1, #13
 8002686:	e7b0      	b.n	80025ea <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xCU;
 8002688:	210c      	movs	r1, #12
 800268a:	e7ae      	b.n	80025ea <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xBU;
 800268c:	210b      	movs	r1, #11
 800268e:	e7ac      	b.n	80025ea <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xAU;
 8002690:	210a      	movs	r1, #10
 8002692:	e7aa      	b.n	80025ea <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x9U;
 8002694:	2109      	movs	r1, #9
 8002696:	e7a8      	b.n	80025ea <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x8U;
 8002698:	2108      	movs	r1, #8
 800269a:	e7a6      	b.n	80025ea <USB_SetTurnaroundTime+0x6>
 800269c:	ff275340 	.word	0xff275340
 80026a0:	000c34ff 	.word	0x000c34ff
 80026a4:	ff1b1e40 	.word	0xff1b1e40
 80026a8:	000f423f 	.word	0x000f423f
 80026ac:	ff0bdc00 	.word	0xff0bdc00
 80026b0:	00124f7f 	.word	0x00124f7f
 80026b4:	fef98c80 	.word	0xfef98c80
 80026b8:	fee5b660 	.word	0xfee5b660
 80026bc:	0016e35f 	.word	0x0016e35f
 80026c0:	feced300 	.word	0xfeced300
 80026c4:	feb35bc0 	.word	0xfeb35bc0
 80026c8:	fe91ca00 	.word	0xfe91ca00
 80026cc:	fe5954e0 	.word	0xfe5954e0

080026d0 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80026d0:	6883      	ldr	r3, [r0, #8]
 80026d2:	f043 0301 	orr.w	r3, r3, #1
 80026d6:	6083      	str	r3, [r0, #8]
}
 80026d8:	2000      	movs	r0, #0
 80026da:	4770      	bx	lr

080026dc <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80026dc:	6883      	ldr	r3, [r0, #8]
 80026de:	f023 0301 	bic.w	r3, r3, #1
 80026e2:	6083      	str	r3, [r0, #8]
}
 80026e4:	2000      	movs	r0, #0
 80026e6:	4770      	bx	lr

080026e8 <USB_SetCurrentMode>:
{
 80026e8:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80026ea:	68c3      	ldr	r3, [r0, #12]
 80026ec:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80026f0:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80026f2:	2901      	cmp	r1, #1
 80026f4:	d009      	beq.n	800270a <USB_SetCurrentMode+0x22>
  else if (mode == USB_DEVICE_MODE)
 80026f6:	b969      	cbnz	r1, 8002714 <USB_SetCurrentMode+0x2c>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80026f8:	68c3      	ldr	r3, [r0, #12]
 80026fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80026fe:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 8002700:	2032      	movs	r0, #50	; 0x32
 8002702:	f7fd ff4f 	bl	80005a4 <HAL_Delay>
  return HAL_OK;
 8002706:	2000      	movs	r0, #0
}
 8002708:	bd08      	pop	{r3, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800270a:	68c3      	ldr	r3, [r0, #12]
 800270c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002710:	60c3      	str	r3, [r0, #12]
 8002712:	e7f5      	b.n	8002700 <USB_SetCurrentMode+0x18>
    return HAL_ERROR;
 8002714:	2001      	movs	r0, #1
 8002716:	e7f7      	b.n	8002708 <USB_SetCurrentMode+0x20>

08002718 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002718:	0189      	lsls	r1, r1, #6
 800271a:	f041 0120 	orr.w	r1, r1, #32
 800271e:	6101      	str	r1, [r0, #16]
  uint32_t count = 0U;
 8002720:	2300      	movs	r3, #0
    if (++count > 200000U)
 8002722:	3301      	adds	r3, #1
 8002724:	4a05      	ldr	r2, [pc, #20]	; (800273c <USB_FlushTxFifo+0x24>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d805      	bhi.n	8002736 <USB_FlushTxFifo+0x1e>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800272a:	6902      	ldr	r2, [r0, #16]
 800272c:	f012 0f20 	tst.w	r2, #32
 8002730:	d1f7      	bne.n	8002722 <USB_FlushTxFifo+0xa>
  return HAL_OK;
 8002732:	2000      	movs	r0, #0
 8002734:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002736:	2003      	movs	r0, #3
}
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	00030d40 	.word	0x00030d40

08002740 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002740:	2310      	movs	r3, #16
 8002742:	6103      	str	r3, [r0, #16]
  uint32_t count = 0;
 8002744:	2300      	movs	r3, #0
    if (++count > 200000U)
 8002746:	3301      	adds	r3, #1
 8002748:	4a05      	ldr	r2, [pc, #20]	; (8002760 <USB_FlushRxFifo+0x20>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d805      	bhi.n	800275a <USB_FlushRxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800274e:	6902      	ldr	r2, [r0, #16]
 8002750:	f012 0f10 	tst.w	r2, #16
 8002754:	d1f7      	bne.n	8002746 <USB_FlushRxFifo+0x6>
  return HAL_OK;
 8002756:	2000      	movs	r0, #0
 8002758:	4770      	bx	lr
      return HAL_TIMEOUT;
 800275a:	2003      	movs	r0, #3
}
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	00030d40 	.word	0x00030d40

08002764 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8002764:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8002768:	4319      	orrs	r1, r3
 800276a:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 800276e:	2000      	movs	r0, #0
 8002770:	4770      	bx	lr
	...

08002774 <USB_DevInit>:
{
 8002774:	b084      	sub	sp, #16
 8002776:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800277a:	4604      	mov	r4, r0
 800277c:	a807      	add	r0, sp, #28
 800277e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002782:	4625      	mov	r5, r4
  for (i = 0U; i < 15U; i++)
 8002784:	2300      	movs	r3, #0
 8002786:	e006      	b.n	8002796 <USB_DevInit+0x22>
    USBx->DIEPTXF[i] = 0U;
 8002788:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800278c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8002790:	2100      	movs	r1, #0
 8002792:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 8002794:	3301      	adds	r3, #1
 8002796:	2b0e      	cmp	r3, #14
 8002798:	d9f6      	bls.n	8002788 <USB_DevInit+0x14>
  if (cfg.vbus_sensing_enable == 0U)
 800279a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800279c:	bb03      	cbnz	r3, 80027e0 <USB_DevInit+0x6c>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800279e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80027a0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80027a4:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80027a6:	6823      	ldr	r3, [r4, #0]
 80027a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027ac:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80027ae:	6823      	ldr	r3, [r4, #0]
 80027b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027b4:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 80027b6:	2300      	movs	r3, #0
 80027b8:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80027bc:	f504 6600 	add.w	r6, r4, #2048	; 0x800
 80027c0:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 80027c4:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80027c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d00d      	beq.n	80027ea <USB_DevInit+0x76>
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80027ce:	2b03      	cmp	r3, #3
 80027d0:	d11c      	bne.n	800280c <USB_DevInit+0x98>
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 80027d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80027d4:	b9ab      	cbnz	r3, 8002802 <USB_DevInit+0x8e>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80027d6:	2100      	movs	r1, #0
 80027d8:	4620      	mov	r0, r4
 80027da:	f7ff ffc3 	bl	8002764 <USB_SetDevSpeed>
 80027de:	e019      	b.n	8002814 <USB_DevInit+0xa0>
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80027e0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80027e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80027e6:	63a3      	str	r3, [r4, #56]	; 0x38
 80027e8:	e7e5      	b.n	80027b6 <USB_DevInit+0x42>
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 80027ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80027ec:	b923      	cbnz	r3, 80027f8 <USB_DevInit+0x84>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80027ee:	2100      	movs	r1, #0
 80027f0:	4620      	mov	r0, r4
 80027f2:	f7ff ffb7 	bl	8002764 <USB_SetDevSpeed>
 80027f6:	e00d      	b.n	8002814 <USB_DevInit+0xa0>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80027f8:	2101      	movs	r1, #1
 80027fa:	4620      	mov	r0, r4
 80027fc:	f7ff ffb2 	bl	8002764 <USB_SetDevSpeed>
 8002800:	e008      	b.n	8002814 <USB_DevInit+0xa0>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002802:	2101      	movs	r1, #1
 8002804:	4620      	mov	r0, r4
 8002806:	f7ff ffad 	bl	8002764 <USB_SetDevSpeed>
 800280a:	e003      	b.n	8002814 <USB_DevInit+0xa0>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800280c:	2103      	movs	r1, #3
 800280e:	4620      	mov	r0, r4
 8002810:	f7ff ffa8 	bl	8002764 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002814:	2110      	movs	r1, #16
 8002816:	4620      	mov	r0, r4
 8002818:	f7ff ff7e 	bl	8002718 <USB_FlushTxFifo>
 800281c:	4680      	mov	r8, r0
 800281e:	b108      	cbz	r0, 8002824 <USB_DevInit+0xb0>
    ret = HAL_ERROR;
 8002820:	f04f 0801 	mov.w	r8, #1
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002824:	4620      	mov	r0, r4
 8002826:	f7ff ff8b 	bl	8002740 <USB_FlushRxFifo>
 800282a:	b108      	cbz	r0, 8002830 <USB_DevInit+0xbc>
    ret = HAL_ERROR;
 800282c:	f04f 0801 	mov.w	r8, #1
  USBx_DEVICE->DIEPMSK = 0U;
 8002830:	2300      	movs	r3, #0
 8002832:	6133      	str	r3, [r6, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002834:	6173      	str	r3, [r6, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002836:	61f3      	str	r3, [r6, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002838:	e00a      	b.n	8002850 <USB_DevInit+0xdc>
      if (i == 0U)
 800283a:	b9c3      	cbnz	r3, 800286e <USB_DevInit+0xfa>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800283c:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8002840:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002844:	2200      	movs	r2, #0
 8002846:	610a      	str	r2, [r1, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002848:	f64f 327f 	movw	r2, #64383	; 0xfb7f
 800284c:	608a      	str	r2, [r1, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800284e:	3301      	adds	r3, #1
 8002850:	9907      	ldr	r1, [sp, #28]
 8002852:	4299      	cmp	r1, r3
 8002854:	d910      	bls.n	8002878 <USB_DevInit+0x104>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002856:	eb05 1243 	add.w	r2, r5, r3, lsl #5
 800285a:	f502 6110 	add.w	r1, r2, #2304	; 0x900
 800285e:	f8d2 0900 	ldr.w	r0, [r2, #2304]	; 0x900
 8002862:	2800      	cmp	r0, #0
 8002864:	dbe9      	blt.n	800283a <USB_DevInit+0xc6>
      USBx_INEP(i)->DIEPCTL = 0U;
 8002866:	2000      	movs	r0, #0
 8002868:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
 800286c:	e7ea      	b.n	8002844 <USB_DevInit+0xd0>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800286e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002872:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
 8002876:	e7e5      	b.n	8002844 <USB_DevInit+0xd0>
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002878:	2300      	movs	r3, #0
 800287a:	e00a      	b.n	8002892 <USB_DevInit+0x11e>
      if (i == 0U)
 800287c:	b1bb      	cbz	r3, 80028ae <USB_DevInit+0x13a>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800287e:	f04f 4790 	mov.w	r7, #1207959552	; 0x48000000
 8002882:	f8c2 7b00 	str.w	r7, [r2, #2816]	; 0xb00
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002886:	2200      	movs	r2, #0
 8002888:	6102      	str	r2, [r0, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800288a:	f64f 327f 	movw	r2, #64383	; 0xfb7f
 800288e:	6082      	str	r2, [r0, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002890:	3301      	adds	r3, #1
 8002892:	4299      	cmp	r1, r3
 8002894:	d910      	bls.n	80028b8 <USB_DevInit+0x144>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002896:	eb05 1243 	add.w	r2, r5, r3, lsl #5
 800289a:	f502 6030 	add.w	r0, r2, #2816	; 0xb00
 800289e:	f8d2 7b00 	ldr.w	r7, [r2, #2816]	; 0xb00
 80028a2:	2f00      	cmp	r7, #0
 80028a4:	dbea      	blt.n	800287c <USB_DevInit+0x108>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80028a6:	2700      	movs	r7, #0
 80028a8:	f8c2 7b00 	str.w	r7, [r2, #2816]	; 0xb00
 80028ac:	e7eb      	b.n	8002886 <USB_DevInit+0x112>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80028ae:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
 80028b2:	f8c2 7b00 	str.w	r7, [r2, #2816]	; 0xb00
 80028b6:	e7e6      	b.n	8002886 <USB_DevInit+0x112>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80028b8:	6933      	ldr	r3, [r6, #16]
 80028ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028be:	6133      	str	r3, [r6, #16]
  if (cfg.dma_enable == 1U)
 80028c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d01b      	beq.n	80028fe <USB_DevInit+0x18a>
  USBx->GINTMSK = 0U;
 80028c6:	2200      	movs	r2, #0
 80028c8:	61a2      	str	r2, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 80028ca:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80028ce:	6162      	str	r2, [r4, #20]
  if (cfg.dma_enable == 0U)
 80028d0:	b91b      	cbnz	r3, 80028da <USB_DevInit+0x166>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80028d2:	69a3      	ldr	r3, [r4, #24]
 80028d4:	f043 0310 	orr.w	r3, r3, #16
 80028d8:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80028da:	69a2      	ldr	r2, [r4, #24]
 80028dc:	4b0e      	ldr	r3, [pc, #56]	; (8002918 <USB_DevInit+0x1a4>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 80028e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80028e4:	b11b      	cbz	r3, 80028ee <USB_DevInit+0x17a>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80028e6:	69a3      	ldr	r3, [r4, #24]
 80028e8:	f043 0308 	orr.w	r3, r3, #8
 80028ec:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 80028ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d00b      	beq.n	800290c <USB_DevInit+0x198>
}
 80028f4:	4640      	mov	r0, r8
 80028f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80028fa:	b004      	add	sp, #16
 80028fc:	4770      	bx	lr
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 80028fe:	4a07      	ldr	r2, [pc, #28]	; (800291c <USB_DevInit+0x1a8>)
 8002900:	6332      	str	r2, [r6, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8002902:	6b31      	ldr	r1, [r6, #48]	; 0x30
 8002904:	4a06      	ldr	r2, [pc, #24]	; (8002920 <USB_DevInit+0x1ac>)
 8002906:	430a      	orrs	r2, r1
 8002908:	6332      	str	r2, [r6, #48]	; 0x30
 800290a:	e7dc      	b.n	80028c6 <USB_DevInit+0x152>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800290c:	69a2      	ldr	r2, [r4, #24]
 800290e:	4b05      	ldr	r3, [pc, #20]	; (8002924 <USB_DevInit+0x1b0>)
 8002910:	4313      	orrs	r3, r2
 8002912:	61a3      	str	r3, [r4, #24]
 8002914:	e7ee      	b.n	80028f4 <USB_DevInit+0x180>
 8002916:	bf00      	nop
 8002918:	803c3800 	.word	0x803c3800
 800291c:	00800100 	.word	0x00800100
 8002920:	00010003 	.word	0x00010003
 8002924:	40000004 	.word	0x40000004

08002928 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8002928:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800292c:	f013 0306 	ands.w	r3, r3, #6
 8002930:	d007      	beq.n	8002942 <USB_GetDevSpeed+0x1a>
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8002932:	2b06      	cmp	r3, #6
 8002934:	bf18      	it	ne
 8002936:	2b02      	cmpne	r3, #2
 8002938:	d001      	beq.n	800293e <USB_GetDevSpeed+0x16>
    speed = 0U;
 800293a:	2000      	movs	r0, #0
}
 800293c:	4770      	bx	lr
    speed = USB_OTG_SPEED_FULL;
 800293e:	2003      	movs	r0, #3
 8002940:	4770      	bx	lr
    speed = USB_OTG_SPEED_HIGH;
 8002942:	2000      	movs	r0, #0
 8002944:	4770      	bx	lr
	...

08002948 <USB_ActivateEndpoint>:
{
 8002948:	b470      	push	{r4, r5, r6}
  uint32_t epnum = (uint32_t)ep->num;
 800294a:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800294c:	784a      	ldrb	r2, [r1, #1]
 800294e:	2a01      	cmp	r2, #1
 8002950:	d020      	beq.n	8002994 <USB_ActivateEndpoint+0x4c>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8002952:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 8002956:	f003 060f 	and.w	r6, r3, #15
 800295a:	2401      	movs	r4, #1
 800295c:	40b4      	lsls	r4, r6
 800295e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8002962:	f8c0 281c 	str.w	r2, [r0, #2076]	; 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8002966:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800296a:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800296e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8002972:	d10c      	bne.n	800298e <USB_ActivateEndpoint+0x46>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8002974:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8002978:	688b      	ldr	r3, [r1, #8]
 800297a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800297e:	78c9      	ldrb	r1, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8002980:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 8002984:	4313      	orrs	r3, r2
 8002986:	4a13      	ldr	r2, [pc, #76]	; (80029d4 <USB_ActivateEndpoint+0x8c>)
 8002988:	431a      	orrs	r2, r3
 800298a:	f8c0 2b00 	str.w	r2, [r0, #2816]	; 0xb00
}
 800298e:	2000      	movs	r0, #0
 8002990:	bc70      	pop	{r4, r5, r6}
 8002992:	4770      	bx	lr
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8002994:	f8d0 481c 	ldr.w	r4, [r0, #2076]	; 0x81c
 8002998:	f003 060f 	and.w	r6, r3, #15
 800299c:	40b2      	lsls	r2, r6
 800299e:	b292      	uxth	r2, r2
 80029a0:	4322      	orrs	r2, r4
 80029a2:	f8c0 281c 	str.w	r2, [r0, #2076]	; 0x81c
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80029a6:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80029aa:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 80029ae:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 80029b2:	d1ec      	bne.n	800298e <USB_ActivateEndpoint+0x46>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80029b4:	f8d0 4900 	ldr.w	r4, [r0, #2304]	; 0x900
 80029b8:	688a      	ldr	r2, [r1, #8]
 80029ba:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80029be:	78c9      	ldrb	r1, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80029c0:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80029c4:	ea42 5383 	orr.w	r3, r2, r3, lsl #22
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80029c8:	4323      	orrs	r3, r4
 80029ca:	4a02      	ldr	r2, [pc, #8]	; (80029d4 <USB_ActivateEndpoint+0x8c>)
 80029cc:	431a      	orrs	r2, r3
 80029ce:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
 80029d2:	e7dc      	b.n	800298e <USB_ActivateEndpoint+0x46>
 80029d4:	10008000 	.word	0x10008000

080029d8 <USB_DeactivateEndpoint>:
{
 80029d8:	b470      	push	{r4, r5, r6}
  uint32_t epnum = (uint32_t)ep->num;
 80029da:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 80029dc:	784a      	ldrb	r2, [r1, #1]
 80029de:	2a01      	cmp	r2, #1
 80029e0:	d01f      	beq.n	8002a22 <USB_DeactivateEndpoint+0x4a>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80029e2:	f8d0 583c 	ldr.w	r5, [r0, #2108]	; 0x83c
 80029e6:	f003 060f 	and.w	r6, r3, #15
 80029ea:	2401      	movs	r4, #1
 80029ec:	fa04 f606 	lsl.w	r6, r4, r6
 80029f0:	ea25 4506 	bic.w	r5, r5, r6, lsl #16
 80029f4:	f8c0 583c 	str.w	r5, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80029f8:	f8d0 581c 	ldr.w	r5, [r0, #2076]	; 0x81c
 80029fc:	7809      	ldrb	r1, [r1, #0]
 80029fe:	f001 010f 	and.w	r1, r1, #15
 8002a02:	408c      	lsls	r4, r1
 8002a04:	ea25 4404 	bic.w	r4, r5, r4, lsl #16
 8002a08:	f8c0 481c 	str.w	r4, [r0, #2076]	; 0x81c
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8002a0c:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8002a10:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8002a14:	4b12      	ldr	r3, [pc, #72]	; (8002a60 <USB_DeactivateEndpoint+0x88>)
 8002a16:	4013      	ands	r3, r2
 8002a18:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8002a1c:	2000      	movs	r0, #0
 8002a1e:	bc70      	pop	{r4, r5, r6}
 8002a20:	4770      	bx	lr
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8002a22:	f8d0 683c 	ldr.w	r6, [r0, #2108]	; 0x83c
 8002a26:	f003 040f 	and.w	r4, r3, #15
 8002a2a:	fa02 f404 	lsl.w	r4, r2, r4
 8002a2e:	b2a4      	uxth	r4, r4
 8002a30:	ea26 0404 	bic.w	r4, r6, r4
 8002a34:	f8c0 483c 	str.w	r4, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8002a38:	f8d0 481c 	ldr.w	r4, [r0, #2076]	; 0x81c
 8002a3c:	7809      	ldrb	r1, [r1, #0]
 8002a3e:	f001 010f 	and.w	r1, r1, #15
 8002a42:	408a      	lsls	r2, r1
 8002a44:	b292      	uxth	r2, r2
 8002a46:	ea24 0202 	bic.w	r2, r4, r2
 8002a4a:	f8c0 281c 	str.w	r2, [r0, #2076]	; 0x81c
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8002a4e:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8002a52:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8002a56:	4a03      	ldr	r2, [pc, #12]	; (8002a64 <USB_DeactivateEndpoint+0x8c>)
 8002a58:	401a      	ands	r2, r3
 8002a5a:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
 8002a5e:	e7dd      	b.n	8002a1c <USB_DeactivateEndpoint+0x44>
 8002a60:	eff37800 	.word	0xeff37800
 8002a64:	ec337800 	.word	0xec337800

08002a68 <USB_EP0StartXfer>:
{
 8002a68:	b470      	push	{r4, r5, r6}
  uint32_t epnum = (uint32_t)ep->num;
 8002a6a:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8002a6c:	784c      	ldrb	r4, [r1, #1]
 8002a6e:	2c01      	cmp	r4, #1
 8002a70:	d024      	beq.n	8002abc <USB_EP0StartXfer+0x54>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8002a72:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8002a76:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8002a7a:	691d      	ldr	r5, [r3, #16]
 8002a7c:	4c3a      	ldr	r4, [pc, #232]	; (8002b68 <USB_EP0StartXfer+0x100>)
 8002a7e:	402c      	ands	r4, r5
 8002a80:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8002a82:	691d      	ldr	r5, [r3, #16]
 8002a84:	4c39      	ldr	r4, [pc, #228]	; (8002b6c <USB_EP0StartXfer+0x104>)
 8002a86:	402c      	ands	r4, r5
 8002a88:	611c      	str	r4, [r3, #16]
    if (ep->xfer_len > 0U)
 8002a8a:	694c      	ldr	r4, [r1, #20]
 8002a8c:	b10c      	cbz	r4, 8002a92 <USB_EP0StartXfer+0x2a>
      ep->xfer_len = ep->maxpacket;
 8002a8e:	688c      	ldr	r4, [r1, #8]
 8002a90:	614c      	str	r4, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8002a92:	691c      	ldr	r4, [r3, #16]
 8002a94:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8002a98:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8002a9a:	691c      	ldr	r4, [r3, #16]
 8002a9c:	688d      	ldr	r5, [r1, #8]
 8002a9e:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8002aa2:	432c      	orrs	r4, r5
 8002aa4:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 8002aa6:	2a01      	cmp	r2, #1
 8002aa8:	d059      	beq.n	8002b5e <USB_EP0StartXfer+0xf6>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8002aaa:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8002aae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8002ab2:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8002ab6:	2000      	movs	r0, #0
 8002ab8:	bc70      	pop	{r4, r5, r6}
 8002aba:	4770      	bx	lr
    if (ep->xfer_len == 0U)
 8002abc:	694c      	ldr	r4, [r1, #20]
 8002abe:	bb54      	cbnz	r4, 8002b16 <USB_EP0StartXfer+0xae>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8002ac0:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 8002ac4:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 8002ac8:	4d28      	ldr	r5, [pc, #160]	; (8002b6c <USB_EP0StartXfer+0x104>)
 8002aca:	4035      	ands	r5, r6
 8002acc:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8002ad0:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8002ad4:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8002ad8:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002adc:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 8002ae0:	4d21      	ldr	r5, [pc, #132]	; (8002b68 <USB_EP0StartXfer+0x100>)
 8002ae2:	4035      	ands	r5, r6
 8002ae4:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
    if (dma == 1U)
 8002ae8:	2a01      	cmp	r2, #1
 8002aea:	d030      	beq.n	8002b4e <USB_EP0StartXfer+0xe6>
      if (ep->xfer_len > 0U)
 8002aec:	694a      	ldr	r2, [r1, #20]
 8002aee:	b14a      	cbz	r2, 8002b04 <USB_EP0StartXfer+0x9c>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8002af0:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 8002af4:	7809      	ldrb	r1, [r1, #0]
 8002af6:	f001 040f 	and.w	r4, r1, #15
 8002afa:	2101      	movs	r1, #1
 8002afc:	40a1      	lsls	r1, r4
 8002afe:	430a      	orrs	r2, r1
 8002b00:	f8c0 2834 	str.w	r2, [r0, #2100]	; 0x834
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8002b04:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8002b08:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8002b0c:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8002b10:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
 8002b14:	e7cf      	b.n	8002ab6 <USB_EP0StartXfer+0x4e>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002b16:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 8002b1a:	f504 6410 	add.w	r4, r4, #2304	; 0x900
 8002b1e:	6926      	ldr	r6, [r4, #16]
 8002b20:	4d11      	ldr	r5, [pc, #68]	; (8002b68 <USB_EP0StartXfer+0x100>)
 8002b22:	4035      	ands	r5, r6
 8002b24:	6125      	str	r5, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8002b26:	6926      	ldr	r6, [r4, #16]
 8002b28:	4d10      	ldr	r5, [pc, #64]	; (8002b6c <USB_EP0StartXfer+0x104>)
 8002b2a:	4035      	ands	r5, r6
 8002b2c:	6125      	str	r5, [r4, #16]
      if (ep->xfer_len > ep->maxpacket)
 8002b2e:	694e      	ldr	r6, [r1, #20]
 8002b30:	688d      	ldr	r5, [r1, #8]
 8002b32:	42ae      	cmp	r6, r5
 8002b34:	d900      	bls.n	8002b38 <USB_EP0StartXfer+0xd0>
        ep->xfer_len = ep->maxpacket;
 8002b36:	614d      	str	r5, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8002b38:	6925      	ldr	r5, [r4, #16]
 8002b3a:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8002b3e:	6125      	str	r5, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8002b40:	6925      	ldr	r5, [r4, #16]
 8002b42:	694e      	ldr	r6, [r1, #20]
 8002b44:	f3c6 0612 	ubfx	r6, r6, #0, #19
 8002b48:	4335      	orrs	r5, r6
 8002b4a:	6125      	str	r5, [r4, #16]
 8002b4c:	e7cc      	b.n	8002ae8 <USB_EP0StartXfer+0x80>
      if ((uint32_t)ep->dma_addr != 0U)
 8002b4e:	690a      	ldr	r2, [r1, #16]
 8002b50:	2a00      	cmp	r2, #0
 8002b52:	d0d7      	beq.n	8002b04 <USB_EP0StartXfer+0x9c>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8002b54:	eb00 1143 	add.w	r1, r0, r3, lsl #5
 8002b58:	f8c1 2914 	str.w	r2, [r1, #2324]	; 0x914
 8002b5c:	e7d2      	b.n	8002b04 <USB_EP0StartXfer+0x9c>
      if ((uint32_t)ep->xfer_buff != 0U)
 8002b5e:	68ca      	ldr	r2, [r1, #12]
 8002b60:	2a00      	cmp	r2, #0
 8002b62:	d0a2      	beq.n	8002aaa <USB_EP0StartXfer+0x42>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8002b64:	615a      	str	r2, [r3, #20]
 8002b66:	e7a0      	b.n	8002aaa <USB_EP0StartXfer+0x42>
 8002b68:	fff80000 	.word	0xfff80000
 8002b6c:	e007ffff 	.word	0xe007ffff

08002b70 <USB_WritePacket>:
{
 8002b70:	b470      	push	{r4, r5, r6}
 8002b72:	f89d 400c 	ldrb.w	r4, [sp, #12]
  if (dma == 0U)
 8002b76:	b964      	cbnz	r4, 8002b92 <USB_WritePacket+0x22>
    count32b = ((uint32_t)len + 3U) / 4U;
 8002b78:	3303      	adds	r3, #3
 8002b7a:	089d      	lsrs	r5, r3, #2
    for (i = 0U; i < count32b; i++)
 8002b7c:	e007      	b.n	8002b8e <USB_WritePacket+0x1e>
      USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 8002b7e:	eb00 3302 	add.w	r3, r0, r2, lsl #12
 8002b82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b86:	f851 6b04 	ldr.w	r6, [r1], #4
 8002b8a:	601e      	str	r6, [r3, #0]
    for (i = 0U; i < count32b; i++)
 8002b8c:	3401      	adds	r4, #1
 8002b8e:	42ac      	cmp	r4, r5
 8002b90:	d3f5      	bcc.n	8002b7e <USB_WritePacket+0xe>
}
 8002b92:	2000      	movs	r0, #0
 8002b94:	bc70      	pop	{r4, r5, r6}
 8002b96:	4770      	bx	lr

08002b98 <USB_EPStartXfer>:
{
 8002b98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b9a:	b083      	sub	sp, #12
  uint32_t epnum = (uint32_t)ep->num;
 8002b9c:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8002b9e:	784c      	ldrb	r4, [r1, #1]
 8002ba0:	2c01      	cmp	r4, #1
 8002ba2:	d029      	beq.n	8002bf8 <USB_EPStartXfer+0x60>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8002ba4:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8002ba8:	f503 6430 	add.w	r4, r3, #2816	; 0xb00
 8002bac:	6926      	ldr	r6, [r4, #16]
 8002bae:	4d71      	ldr	r5, [pc, #452]	; (8002d74 <USB_EPStartXfer+0x1dc>)
 8002bb0:	4035      	ands	r5, r6
 8002bb2:	6125      	str	r5, [r4, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8002bb4:	6926      	ldr	r6, [r4, #16]
 8002bb6:	4d70      	ldr	r5, [pc, #448]	; (8002d78 <USB_EPStartXfer+0x1e0>)
 8002bb8:	4035      	ands	r5, r6
 8002bba:	6125      	str	r5, [r4, #16]
    if (ep->xfer_len == 0U)
 8002bbc:	694d      	ldr	r5, [r1, #20]
 8002bbe:	2d00      	cmp	r5, #0
 8002bc0:	f040 80aa 	bne.w	8002d18 <USB_EPStartXfer+0x180>
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8002bc4:	6925      	ldr	r5, [r4, #16]
 8002bc6:	688e      	ldr	r6, [r1, #8]
 8002bc8:	f3c6 0612 	ubfx	r6, r6, #0, #19
 8002bcc:	4335      	orrs	r5, r6
 8002bce:	6125      	str	r5, [r4, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8002bd0:	6925      	ldr	r5, [r4, #16]
 8002bd2:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8002bd6:	6125      	str	r5, [r4, #16]
    if (dma == 1U)
 8002bd8:	2a01      	cmp	r2, #1
 8002bda:	f000 80b2 	beq.w	8002d42 <USB_EPStartXfer+0x1aa>
    if (ep->type == EP_TYPE_ISOC)
 8002bde:	78ca      	ldrb	r2, [r1, #3]
 8002be0:	2a01      	cmp	r2, #1
 8002be2:	f000 80b4 	beq.w	8002d4e <USB_EPStartXfer+0x1b6>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8002be6:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8002bea:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8002bee:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
}
 8002bf2:	2000      	movs	r0, #0
 8002bf4:	b003      	add	sp, #12
 8002bf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (ep->xfer_len == 0U)
 8002bf8:	694c      	ldr	r4, [r1, #20]
 8002bfa:	2c00      	cmp	r4, #0
 8002bfc:	d13b      	bne.n	8002c76 <USB_EPStartXfer+0xde>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8002bfe:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 8002c02:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 8002c06:	4d5c      	ldr	r5, [pc, #368]	; (8002d78 <USB_EPStartXfer+0x1e0>)
 8002c08:	4035      	ands	r5, r6
 8002c0a:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8002c0e:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8002c12:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8002c16:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002c1a:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 8002c1e:	4d55      	ldr	r5, [pc, #340]	; (8002d74 <USB_EPStartXfer+0x1dc>)
 8002c20:	4035      	ands	r5, r6
 8002c22:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
    if (dma == 1U)
 8002c26:	2a01      	cmp	r2, #1
 8002c28:	d057      	beq.n	8002cda <USB_EPStartXfer+0x142>
      if (ep->type != EP_TYPE_ISOC)
 8002c2a:	78cc      	ldrb	r4, [r1, #3]
 8002c2c:	2c01      	cmp	r4, #1
 8002c2e:	d00b      	beq.n	8002c48 <USB_EPStartXfer+0xb0>
        if (ep->xfer_len > 0U)
 8002c30:	694c      	ldr	r4, [r1, #20]
 8002c32:	b14c      	cbz	r4, 8002c48 <USB_EPStartXfer+0xb0>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8002c34:	f8d0 4834 	ldr.w	r4, [r0, #2100]	; 0x834
 8002c38:	780d      	ldrb	r5, [r1, #0]
 8002c3a:	f005 060f 	and.w	r6, r5, #15
 8002c3e:	2501      	movs	r5, #1
 8002c40:	40b5      	lsls	r5, r6
 8002c42:	432c      	orrs	r4, r5
 8002c44:	f8c0 4834 	str.w	r4, [r0, #2100]	; 0x834
    if (ep->type == EP_TYPE_ISOC)
 8002c48:	78cc      	ldrb	r4, [r1, #3]
 8002c4a:	2c01      	cmp	r4, #1
 8002c4c:	d04d      	beq.n	8002cea <USB_EPStartXfer+0x152>
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8002c4e:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8002c52:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 8002c56:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8002c5a:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
    if (ep->type == EP_TYPE_ISOC)
 8002c5e:	78cb      	ldrb	r3, [r1, #3]
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d1c6      	bne.n	8002bf2 <USB_EPStartXfer+0x5a>
 8002c64:	4614      	mov	r4, r2
 8002c66:	460b      	mov	r3, r1
      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8002c68:	68c9      	ldr	r1, [r1, #12]
 8002c6a:	781a      	ldrb	r2, [r3, #0]
 8002c6c:	8a9b      	ldrh	r3, [r3, #20]
 8002c6e:	9400      	str	r4, [sp, #0]
 8002c70:	f7ff ff7e 	bl	8002b70 <USB_WritePacket>
 8002c74:	e7bd      	b.n	8002bf2 <USB_EPStartXfer+0x5a>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002c76:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 8002c7a:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 8002c7e:	4d3d      	ldr	r5, [pc, #244]	; (8002d74 <USB_EPStartXfer+0x1dc>)
 8002c80:	4035      	ands	r5, r6
 8002c82:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8002c86:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 8002c8a:	4d3b      	ldr	r5, [pc, #236]	; (8002d78 <USB_EPStartXfer+0x1e0>)
 8002c8c:	4035      	ands	r5, r6
 8002c8e:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8002c92:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 8002c96:	694d      	ldr	r5, [r1, #20]
 8002c98:	688f      	ldr	r7, [r1, #8]
 8002c9a:	443d      	add	r5, r7
 8002c9c:	3d01      	subs	r5, #1
 8002c9e:	fbb5 f5f7 	udiv	r5, r5, r7
 8002ca2:	4f36      	ldr	r7, [pc, #216]	; (8002d7c <USB_EPStartXfer+0x1e4>)
 8002ca4:	ea07 45c5 	and.w	r5, r7, r5, lsl #19
 8002ca8:	4335      	orrs	r5, r6
 8002caa:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8002cae:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8002cb2:	694e      	ldr	r6, [r1, #20]
 8002cb4:	f3c6 0612 	ubfx	r6, r6, #0, #19
 8002cb8:	4335      	orrs	r5, r6
 8002cba:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002cbe:	f504 6410 	add.w	r4, r4, #2304	; 0x900
      if (ep->type == EP_TYPE_ISOC)
 8002cc2:	78cd      	ldrb	r5, [r1, #3]
 8002cc4:	2d01      	cmp	r5, #1
 8002cc6:	d1ae      	bne.n	8002c26 <USB_EPStartXfer+0x8e>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8002cc8:	6925      	ldr	r5, [r4, #16]
 8002cca:	f025 45c0 	bic.w	r5, r5, #1610612736	; 0x60000000
 8002cce:	6125      	str	r5, [r4, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8002cd0:	6925      	ldr	r5, [r4, #16]
 8002cd2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8002cd6:	6125      	str	r5, [r4, #16]
 8002cd8:	e7a5      	b.n	8002c26 <USB_EPStartXfer+0x8e>
      if ((uint32_t)ep->dma_addr != 0U)
 8002cda:	690c      	ldr	r4, [r1, #16]
 8002cdc:	2c00      	cmp	r4, #0
 8002cde:	d0b3      	beq.n	8002c48 <USB_EPStartXfer+0xb0>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8002ce0:	eb00 1543 	add.w	r5, r0, r3, lsl #5
 8002ce4:	f8c5 4914 	str.w	r4, [r5, #2324]	; 0x914
 8002ce8:	e7ae      	b.n	8002c48 <USB_EPStartXfer+0xb0>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8002cea:	f8d0 4808 	ldr.w	r4, [r0, #2056]	; 0x808
 8002cee:	f414 7f80 	tst.w	r4, #256	; 0x100
 8002cf2:	d108      	bne.n	8002d06 <USB_EPStartXfer+0x16e>
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8002cf4:	eb00 1543 	add.w	r5, r0, r3, lsl #5
 8002cf8:	f8d5 4900 	ldr.w	r4, [r5, #2304]	; 0x900
 8002cfc:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
 8002d00:	f8c5 4900 	str.w	r4, [r5, #2304]	; 0x900
 8002d04:	e7a3      	b.n	8002c4e <USB_EPStartXfer+0xb6>
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8002d06:	eb00 1543 	add.w	r5, r0, r3, lsl #5
 8002d0a:	f8d5 4900 	ldr.w	r4, [r5, #2304]	; 0x900
 8002d0e:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 8002d12:	f8c5 4900 	str.w	r4, [r5, #2304]	; 0x900
 8002d16:	e79a      	b.n	8002c4e <USB_EPStartXfer+0xb6>
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8002d18:	688e      	ldr	r6, [r1, #8]
 8002d1a:	4435      	add	r5, r6
 8002d1c:	3d01      	subs	r5, #1
 8002d1e:	fbb5 f5f6 	udiv	r5, r5, r6
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8002d22:	6926      	ldr	r6, [r4, #16]
 8002d24:	4f15      	ldr	r7, [pc, #84]	; (8002d7c <USB_EPStartXfer+0x1e4>)
 8002d26:	ea07 47c5 	and.w	r7, r7, r5, lsl #19
 8002d2a:	433e      	orrs	r6, r7
 8002d2c:	6126      	str	r6, [r4, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8002d2e:	6927      	ldr	r7, [r4, #16]
 8002d30:	688e      	ldr	r6, [r1, #8]
 8002d32:	b2ad      	uxth	r5, r5
 8002d34:	fb06 f505 	mul.w	r5, r6, r5
 8002d38:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8002d3c:	433d      	orrs	r5, r7
 8002d3e:	6125      	str	r5, [r4, #16]
 8002d40:	e74a      	b.n	8002bd8 <USB_EPStartXfer+0x40>
      if ((uint32_t)ep->xfer_buff != 0U)
 8002d42:	68ca      	ldr	r2, [r1, #12]
 8002d44:	2a00      	cmp	r2, #0
 8002d46:	f43f af4a 	beq.w	8002bde <USB_EPStartXfer+0x46>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8002d4a:	6162      	str	r2, [r4, #20]
 8002d4c:	e747      	b.n	8002bde <USB_EPStartXfer+0x46>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8002d4e:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 8002d52:	f412 7f80 	tst.w	r2, #256	; 0x100
 8002d56:	d106      	bne.n	8002d66 <USB_EPStartXfer+0x1ce>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8002d58:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8002d5c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002d60:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 8002d64:	e73f      	b.n	8002be6 <USB_EPStartXfer+0x4e>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8002d66:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8002d6a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002d6e:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 8002d72:	e738      	b.n	8002be6 <USB_EPStartXfer+0x4e>
 8002d74:	fff80000 	.word	0xfff80000
 8002d78:	e007ffff 	.word	0xe007ffff
 8002d7c:	1ff80000 	.word	0x1ff80000

08002d80 <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8002d80:	3203      	adds	r2, #3
 8002d82:	0892      	lsrs	r2, r2, #2
  for (i = 0U; i < count32b; i++)
 8002d84:	2300      	movs	r3, #0
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d20c      	bcs.n	8002da4 <USB_ReadPacket+0x24>
{
 8002d8a:	b410      	push	{r4}
    *(__packed uint32_t *)pDest = USBx_DFIFO(0U);
 8002d8c:	f500 5480 	add.w	r4, r0, #4096	; 0x1000
 8002d90:	6824      	ldr	r4, [r4, #0]
 8002d92:	f841 4b04 	str.w	r4, [r1], #4
  for (i = 0U; i < count32b; i++)
 8002d96:	3301      	adds	r3, #1
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d3f7      	bcc.n	8002d8c <USB_ReadPacket+0xc>
}
 8002d9c:	4608      	mov	r0, r1
 8002d9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002da2:	4770      	bx	lr
 8002da4:	4608      	mov	r0, r1
 8002da6:	4770      	bx	lr

08002da8 <USB_EPSetStall>:
  uint32_t epnum = (uint32_t)ep->num;
 8002da8:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8002daa:	784a      	ldrb	r2, [r1, #1]
 8002dac:	2a01      	cmp	r2, #1
 8002dae:	d014      	beq.n	8002dda <USB_EPSetStall+0x32>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8002db0:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8002db4:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8002db8:	2a00      	cmp	r2, #0
 8002dba:	db06      	blt.n	8002dca <USB_EPSetStall+0x22>
 8002dbc:	b12b      	cbz	r3, 8002dca <USB_EPSetStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8002dbe:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8002dc2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002dc6:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8002dca:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8002dce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002dd2:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8002dd6:	2000      	movs	r0, #0
 8002dd8:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8002dda:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8002dde:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8002de2:	2a00      	cmp	r2, #0
 8002de4:	db06      	blt.n	8002df4 <USB_EPSetStall+0x4c>
 8002de6:	b12b      	cbz	r3, 8002df4 <USB_EPSetStall+0x4c>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8002de8:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8002dec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002df0:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8002df4:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8002df8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002dfc:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 8002e00:	e7e9      	b.n	8002dd6 <USB_EPSetStall+0x2e>

08002e02 <USB_EPClearStall>:
  uint32_t epnum = (uint32_t)ep->num;
 8002e02:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8002e04:	784a      	ldrb	r2, [r1, #1]
 8002e06:	2a01      	cmp	r2, #1
 8002e08:	d00e      	beq.n	8002e28 <USB_EPClearStall+0x26>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002e0a:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8002e0e:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8002e12:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002e16:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8002e1a:	78cb      	ldrb	r3, [r1, #3]
 8002e1c:	3b02      	subs	r3, #2
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d915      	bls.n	8002e50 <USB_EPClearStall+0x4e>
}
 8002e24:	2000      	movs	r0, #0
 8002e26:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002e28:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8002e2c:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8002e30:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002e34:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8002e38:	78cb      	ldrb	r3, [r1, #3]
 8002e3a:	3b02      	subs	r3, #2
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d8f0      	bhi.n	8002e24 <USB_EPClearStall+0x22>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8002e42:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8002e46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e4a:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 8002e4e:	e7e9      	b.n	8002e24 <USB_EPClearStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8002e50:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8002e54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e58:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8002e5c:	e7e2      	b.n	8002e24 <USB_EPClearStall+0x22>

08002e5e <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8002e5e:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8002e62:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002e66:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8002e6a:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8002e6e:	0109      	lsls	r1, r1, #4
 8002e70:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 8002e74:	430b      	orrs	r3, r1
 8002e76:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
}
 8002e7a:	2000      	movs	r0, #0
 8002e7c:	4770      	bx	lr

08002e7e <USB_DevConnect>:
{
 8002e7e:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8002e80:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8002e84:	f023 0302 	bic.w	r3, r3, #2
 8002e88:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 8002e8c:	2003      	movs	r0, #3
 8002e8e:	f7fd fb89 	bl	80005a4 <HAL_Delay>
}
 8002e92:	2000      	movs	r0, #0
 8002e94:	bd08      	pop	{r3, pc}

08002e96 <USB_DevDisconnect>:
{
 8002e96:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002e98:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8002e9c:	f043 0302 	orr.w	r3, r3, #2
 8002ea0:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 8002ea4:	2003      	movs	r0, #3
 8002ea6:	f7fd fb7d 	bl	80005a4 <HAL_Delay>
}
 8002eaa:	2000      	movs	r0, #0
 8002eac:	bd08      	pop	{r3, pc}

08002eae <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8002eae:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8002eb0:	6980      	ldr	r0, [r0, #24]
}
 8002eb2:	4010      	ands	r0, r2
 8002eb4:	4770      	bx	lr

08002eb6 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8002eb6:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8002eba:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8002ebe:	69c0      	ldr	r0, [r0, #28]
 8002ec0:	4018      	ands	r0, r3
}
 8002ec2:	0c00      	lsrs	r0, r0, #16
 8002ec4:	4770      	bx	lr

08002ec6 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8002ec6:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8002eca:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8002ece:	69c0      	ldr	r0, [r0, #28]
 8002ed0:	4018      	ands	r0, r3
}
 8002ed2:	b280      	uxth	r0, r0
 8002ed4:	4770      	bx	lr

08002ed6 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8002ed6:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8002eda:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8002ede:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8002ee2:	6940      	ldr	r0, [r0, #20]
}
 8002ee4:	4010      	ands	r0, r2
 8002ee6:	4770      	bx	lr

08002ee8 <USB_ReadDevInEPInterrupt>:
{
 8002ee8:	b410      	push	{r4}
  msk = USBx_DEVICE->DIEPMSK;
 8002eea:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8002eee:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8002ef2:	f001 020f 	and.w	r2, r1, #15
 8002ef6:	40d3      	lsrs	r3, r2
 8002ef8:	01db      	lsls	r3, r3, #7
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	4323      	orrs	r3, r4
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8002efe:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 8002f02:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 8002f06:	6880      	ldr	r0, [r0, #8]
}
 8002f08:	4018      	ands	r0, r3
 8002f0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002f0e:	4770      	bx	lr

08002f10 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8002f10:	6940      	ldr	r0, [r0, #20]
}
 8002f12:	f000 0001 	and.w	r0, r0, #1
 8002f16:	4770      	bx	lr

08002f18 <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8002f18:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8002f1c:	4b0b      	ldr	r3, [pc, #44]	; (8002f4c <USB_ActivateSetup+0x34>)
 8002f1e:	4013      	ands	r3, r2
 8002f20:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8002f24:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 8002f28:	689a      	ldr	r2, [r3, #8]
 8002f2a:	f002 0206 	and.w	r2, r2, #6
 8002f2e:	2a04      	cmp	r2, #4
 8002f30:	d005      	beq.n	8002f3e <USB_ActivateSetup+0x26>
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8002f32:	685a      	ldr	r2, [r3, #4]
 8002f34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f38:	605a      	str	r2, [r3, #4]
}
 8002f3a:	2000      	movs	r0, #0
 8002f3c:	4770      	bx	lr
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8002f3e:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8002f42:	f042 0203 	orr.w	r2, r2, #3
 8002f46:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
 8002f4a:	e7f2      	b.n	8002f32 <USB_ActivateSetup+0x1a>
 8002f4c:	fffff800 	.word	0xfffff800

08002f50 <USB_EP0_OutStart>:
{
 8002f50:	b410      	push	{r4}
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002f52:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8002f54:	4b15      	ldr	r3, [pc, #84]	; (8002fac <USB_EP0_OutStart+0x5c>)
 8002f56:	429c      	cmp	r4, r3
 8002f58:	d903      	bls.n	8002f62 <USB_EP0_OutStart+0x12>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002f5a:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	db16      	blt.n	8002f90 <USB_EP0_OutStart+0x40>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8002f62:	2400      	movs	r4, #0
 8002f64:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8002f68:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8002f6c:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8002f70:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8002f74:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8002f78:	f044 0418 	orr.w	r4, r4, #24
 8002f7c:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8002f80:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8002f84:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
 8002f88:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  if (dma == 1U)
 8002f8c:	2901      	cmp	r1, #1
 8002f8e:	d003      	beq.n	8002f98 <USB_EP0_OutStart+0x48>
}
 8002f90:	2000      	movs	r0, #0
 8002f92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002f96:	4770      	bx	lr
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8002f98:	f8c0 2b14 	str.w	r2, [r0, #2836]	; 0xb14
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8002f9c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8002fa0:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8002fa4:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8002fa8:	e7f2      	b.n	8002f90 <USB_EP0_OutStart+0x40>
 8002faa:	bf00      	nop
 8002fac:	4f54300a 	.word	0x4f54300a

08002fb0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8002fb0:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002fb2:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8002fb6:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8002fba:	b15b      	cbz	r3, 8002fd4 <USBD_CDC_EP0_RxReady+0x24>
 8002fbc:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8002fc0:	28ff      	cmp	r0, #255	; 0xff
 8002fc2:	d007      	beq.n	8002fd4 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8002fca:	4621      	mov	r1, r4
 8002fcc:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFFU;
 8002fce:	23ff      	movs	r3, #255	; 0xff
 8002fd0:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 8002fd4:	2000      	movs	r0, #0
 8002fd6:	bd10      	pop	{r4, pc}

08002fd8 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8002fd8:	2343      	movs	r3, #67	; 0x43
 8002fda:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8002fdc:	4800      	ldr	r0, [pc, #0]	; (8002fe0 <USBD_CDC_GetFSCfgDesc+0x8>)
 8002fde:	4770      	bx	lr
 8002fe0:	20000008 	.word	0x20000008

08002fe4 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8002fe4:	2343      	movs	r3, #67	; 0x43
 8002fe6:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8002fe8:	4800      	ldr	r0, [pc, #0]	; (8002fec <USBD_CDC_GetHSCfgDesc+0x8>)
 8002fea:	4770      	bx	lr
 8002fec:	2000004c 	.word	0x2000004c

08002ff0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8002ff0:	2343      	movs	r3, #67	; 0x43
 8002ff2:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8002ff4:	4800      	ldr	r0, [pc, #0]	; (8002ff8 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8002ff6:	4770      	bx	lr
 8002ff8:	20000090 	.word	0x20000090

08002ffc <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8002ffc:	230a      	movs	r3, #10
 8002ffe:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8003000:	4800      	ldr	r0, [pc, #0]	; (8003004 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8003002:	4770      	bx	lr
 8003004:	200000d4 	.word	0x200000d4

08003008 <USBD_CDC_DataOut>:
{
 8003008:	b538      	push	{r3, r4, r5, lr}
 800300a:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800300c:	f8d0 5290 	ldr.w	r5, [r0, #656]	; 0x290
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8003010:	f001 f9a3 	bl	800435a <USBD_LL_GetRxDataSize>
 8003014:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  if(pdev->pClassData != NULL)
 8003018:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
 800301c:	b14b      	cbz	r3, 8003032 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800301e:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 8003028:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 800302c:	4798      	blx	r3
    return USBD_OK;
 800302e:	2000      	movs	r0, #0
}
 8003030:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8003032:	2002      	movs	r0, #2
 8003034:	e7fc      	b.n	8003030 <USBD_CDC_DataOut+0x28>

08003036 <USBD_CDC_DataIn>:
{
 8003036:	b570      	push	{r4, r5, r6, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8003038:	f8d0 2290 	ldr.w	r2, [r0, #656]	; 0x290
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800303c:	f8d0 5298 	ldr.w	r5, [r0, #664]	; 0x298
  if(pdev->pClassData != NULL)
 8003040:	b1fa      	cbz	r2, 8003082 <USBD_CDC_DataIn+0x4c>
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8003042:	eb01 0481 	add.w	r4, r1, r1, lsl #2
 8003046:	00a3      	lsls	r3, r4, #2
 8003048:	4403      	add	r3, r0
 800304a:	69db      	ldr	r3, [r3, #28]
 800304c:	b14b      	cbz	r3, 8003062 <USBD_CDC_DataIn+0x2c>
 800304e:	ebc1 06c1 	rsb	r6, r1, r1, lsl #3
 8003052:	00b4      	lsls	r4, r6, #2
 8003054:	4425      	add	r5, r4
 8003056:	6c6d      	ldr	r5, [r5, #68]	; 0x44
 8003058:	fbb3 f4f5 	udiv	r4, r3, r5
 800305c:	fb05 3314 	mls	r3, r5, r4, r3
 8003060:	b11b      	cbz	r3, 800306a <USBD_CDC_DataIn+0x34>
      hcdc->TxState = 0U;
 8003062:	2000      	movs	r0, #0
 8003064:	f8c2 0214 	str.w	r0, [r2, #532]	; 0x214
}
 8003068:	bd70      	pop	{r4, r5, r6, pc}
      pdev->ep_in[epnum].total_length = 0U;
 800306a:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 800306e:	0093      	lsls	r3, r2, #2
 8003070:	4403      	add	r3, r0
 8003072:	2400      	movs	r4, #0
 8003074:	61dc      	str	r4, [r3, #28]
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8003076:	4623      	mov	r3, r4
 8003078:	4622      	mov	r2, r4
 800307a:	f001 f9e3 	bl	8004444 <USBD_LL_Transmit>
    return USBD_OK;
 800307e:	4620      	mov	r0, r4
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8003080:	e7f2      	b.n	8003068 <USBD_CDC_DataIn+0x32>
    return USBD_FAIL;
 8003082:	2002      	movs	r0, #2
 8003084:	e7f0      	b.n	8003068 <USBD_CDC_DataIn+0x32>

08003086 <USBD_CDC_Setup>:
{
 8003086:	b570      	push	{r4, r5, r6, lr}
 8003088:	b082      	sub	sp, #8
 800308a:	4605      	mov	r5, r0
 800308c:	460c      	mov	r4, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800308e:	f8d0 6290 	ldr.w	r6, [r0, #656]	; 0x290
  uint8_t ifalt = 0U;
 8003092:	2300      	movs	r3, #0
 8003094:	f88d 3007 	strb.w	r3, [sp, #7]
  uint16_t status_info = 0U;
 8003098:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800309c:	780b      	ldrb	r3, [r1, #0]
 800309e:	f013 0260 	ands.w	r2, r3, #96	; 0x60
 80030a2:	d027      	beq.n	80030f4 <USBD_CDC_Setup+0x6e>
 80030a4:	2a20      	cmp	r2, #32
 80030a6:	d156      	bne.n	8003156 <USBD_CDC_Setup+0xd0>
    if (req->wLength)
 80030a8:	88ca      	ldrh	r2, [r1, #6]
 80030aa:	b93a      	cbnz	r2, 80030bc <USBD_CDC_Setup+0x36>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80030ac:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	2200      	movs	r2, #0
 80030b4:	7848      	ldrb	r0, [r1, #1]
 80030b6:	4798      	blx	r3
  uint8_t ret = USBD_OK;
 80030b8:	2000      	movs	r0, #0
 80030ba:	e04f      	b.n	800315c <USBD_CDC_Setup+0xd6>
      if (req->bmRequest & 0x80U)
 80030bc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80030c0:	d00c      	beq.n	80030dc <USBD_CDC_Setup+0x56>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80030c2:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	4631      	mov	r1, r6
 80030ca:	7860      	ldrb	r0, [r4, #1]
 80030cc:	4798      	blx	r3
          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80030ce:	88e2      	ldrh	r2, [r4, #6]
 80030d0:	4631      	mov	r1, r6
 80030d2:	4628      	mov	r0, r5
 80030d4:	f000 fdbd 	bl	8003c52 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 80030d8:	2000      	movs	r0, #0
 80030da:	e03f      	b.n	800315c <USBD_CDC_Setup+0xd6>
        hcdc->CmdOpCode = req->bRequest;
 80030dc:	784b      	ldrb	r3, [r1, #1]
 80030de:	f886 3200 	strb.w	r3, [r6, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 80030e2:	798b      	ldrb	r3, [r1, #6]
 80030e4:	f886 3201 	strb.w	r3, [r6, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80030e8:	88ca      	ldrh	r2, [r1, #6]
 80030ea:	4631      	mov	r1, r6
 80030ec:	f000 fdc6 	bl	8003c7c <USBD_CtlPrepareRx>
  uint8_t ret = USBD_OK;
 80030f0:	2000      	movs	r0, #0
 80030f2:	e033      	b.n	800315c <USBD_CDC_Setup+0xd6>
    switch (req->bRequest)
 80030f4:	784b      	ldrb	r3, [r1, #1]
 80030f6:	2b0a      	cmp	r3, #10
 80030f8:	d014      	beq.n	8003124 <USBD_CDC_Setup+0x9e>
 80030fa:	2b0b      	cmp	r3, #11
 80030fc:	d021      	beq.n	8003142 <USBD_CDC_Setup+0xbc>
 80030fe:	b11b      	cbz	r3, 8003108 <USBD_CDC_Setup+0x82>
      USBD_CtlError (pdev, req);
 8003100:	f000 fa85 	bl	800360e <USBD_CtlError>
      ret = USBD_FAIL;
 8003104:	2002      	movs	r0, #2
      break;
 8003106:	e029      	b.n	800315c <USBD_CDC_Setup+0xd6>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003108:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800310c:	2b03      	cmp	r3, #3
 800310e:	d105      	bne.n	800311c <USBD_CDC_Setup+0x96>
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8003110:	2202      	movs	r2, #2
 8003112:	a901      	add	r1, sp, #4
 8003114:	f000 fd9d 	bl	8003c52 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8003118:	2000      	movs	r0, #0
 800311a:	e01f      	b.n	800315c <USBD_CDC_Setup+0xd6>
        USBD_CtlError (pdev, req);
 800311c:	f000 fa77 	bl	800360e <USBD_CtlError>
			  ret = USBD_FAIL;
 8003120:	2002      	movs	r0, #2
 8003122:	e01b      	b.n	800315c <USBD_CDC_Setup+0xd6>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003124:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8003128:	2b03      	cmp	r3, #3
 800312a:	d106      	bne.n	800313a <USBD_CDC_Setup+0xb4>
        USBD_CtlSendData (pdev, &ifalt, 1U);
 800312c:	2201      	movs	r2, #1
 800312e:	f10d 0107 	add.w	r1, sp, #7
 8003132:	f000 fd8e 	bl	8003c52 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8003136:	2000      	movs	r0, #0
 8003138:	e010      	b.n	800315c <USBD_CDC_Setup+0xd6>
        USBD_CtlError (pdev, req);
 800313a:	f000 fa68 	bl	800360e <USBD_CtlError>
			  ret = USBD_FAIL;
 800313e:	2002      	movs	r0, #2
 8003140:	e00c      	b.n	800315c <USBD_CDC_Setup+0xd6>
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8003142:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8003146:	2b03      	cmp	r3, #3
 8003148:	d101      	bne.n	800314e <USBD_CDC_Setup+0xc8>
  uint8_t ret = USBD_OK;
 800314a:	2000      	movs	r0, #0
 800314c:	e006      	b.n	800315c <USBD_CDC_Setup+0xd6>
        USBD_CtlError (pdev, req);
 800314e:	f000 fa5e 	bl	800360e <USBD_CtlError>
			  ret = USBD_FAIL;
 8003152:	2002      	movs	r0, #2
 8003154:	e002      	b.n	800315c <USBD_CDC_Setup+0xd6>
    USBD_CtlError (pdev, req);
 8003156:	f000 fa5a 	bl	800360e <USBD_CtlError>
    ret = USBD_FAIL;
 800315a:	2002      	movs	r0, #2
}
 800315c:	b002      	add	sp, #8
 800315e:	bd70      	pop	{r4, r5, r6, pc}

08003160 <USBD_CDC_DeInit>:
{
 8003160:	b538      	push	{r3, r4, r5, lr}
 8003162:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8003164:	2181      	movs	r1, #129	; 0x81
 8003166:	f001 f94d 	bl	8004404 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800316a:	2500      	movs	r5, #0
 800316c:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800316e:	2101      	movs	r1, #1
 8003170:	4620      	mov	r0, r4
 8003172:	f001 f947 	bl	8004404 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8003176:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800317a:	2182      	movs	r1, #130	; 0x82
 800317c:	4620      	mov	r0, r4
 800317e:	f001 f941 	bl	8004404 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8003182:	6425      	str	r5, [r4, #64]	; 0x40
  if(pdev->pClassData != NULL)
 8003184:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
 8003188:	b14b      	cbz	r3, 800319e <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800318a:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8003192:	f8d4 0290 	ldr.w	r0, [r4, #656]	; 0x290
 8003196:	f001 fa59 	bl	800464c <free>
    pdev->pClassData = NULL;
 800319a:	f8c4 5290 	str.w	r5, [r4, #656]	; 0x290
}
 800319e:	2000      	movs	r0, #0
 80031a0:	bd38      	pop	{r3, r4, r5, pc}

080031a2 <USBD_CDC_Init>:
{
 80031a2:	b538      	push	{r3, r4, r5, lr}
 80031a4:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH)
 80031a6:	7c03      	ldrb	r3, [r0, #16]
 80031a8:	bba3      	cbnz	r3, 8003214 <USBD_CDC_Init+0x72>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80031aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031ae:	2202      	movs	r2, #2
 80031b0:	2181      	movs	r1, #129	; 0x81
 80031b2:	f001 f91c 	bl	80043ee <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80031b6:	2501      	movs	r5, #1
 80031b8:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80031ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031be:	2202      	movs	r2, #2
 80031c0:	4629      	mov	r1, r5
 80031c2:	4620      	mov	r0, r4
 80031c4:	f001 f913 	bl	80043ee <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80031c8:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80031cc:	2308      	movs	r3, #8
 80031ce:	2203      	movs	r2, #3
 80031d0:	2182      	movs	r1, #130	; 0x82
 80031d2:	4620      	mov	r0, r4
 80031d4:	f001 f90b 	bl	80043ee <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80031d8:	2301      	movs	r3, #1
 80031da:	6423      	str	r3, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 80031dc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80031e0:	f001 fa2c 	bl	800463c <malloc>
 80031e4:	4605      	mov	r5, r0
 80031e6:	f8c4 0290 	str.w	r0, [r4, #656]	; 0x290
  if(pdev->pClassData == NULL)
 80031ea:	b368      	cbz	r0, 8003248 <USBD_CDC_Init+0xa6>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80031ec:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4798      	blx	r3
    hcdc->TxState = 0U;
 80031f4:	2300      	movs	r3, #0
 80031f6:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
    hcdc->RxState = 0U;
 80031fa:	f8c5 3218 	str.w	r3, [r5, #536]	; 0x218
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 80031fe:	7c23      	ldrb	r3, [r4, #16]
 8003200:	b1c3      	cbz	r3, 8003234 <USBD_CDC_Init+0x92>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8003202:	2340      	movs	r3, #64	; 0x40
 8003204:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8003208:	2101      	movs	r1, #1
 800320a:	4620      	mov	r0, r4
 800320c:	f001 f922 	bl	8004454 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8003210:	2000      	movs	r0, #0
}
 8003212:	bd38      	pop	{r3, r4, r5, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8003214:	2340      	movs	r3, #64	; 0x40
 8003216:	2202      	movs	r2, #2
 8003218:	2181      	movs	r1, #129	; 0x81
 800321a:	f001 f8e8 	bl	80043ee <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800321e:	2501      	movs	r5, #1
 8003220:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8003222:	2340      	movs	r3, #64	; 0x40
 8003224:	2202      	movs	r2, #2
 8003226:	4629      	mov	r1, r5
 8003228:	4620      	mov	r0, r4
 800322a:	f001 f8e0 	bl	80043ee <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800322e:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
 8003232:	e7cb      	b.n	80031cc <USBD_CDC_Init+0x2a>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8003234:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003238:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 800323c:	2101      	movs	r1, #1
 800323e:	4620      	mov	r0, r4
 8003240:	f001 f908 	bl	8004454 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8003244:	2000      	movs	r0, #0
 8003246:	e7e4      	b.n	8003212 <USBD_CDC_Init+0x70>
    ret = 1U;
 8003248:	2001      	movs	r0, #1
 800324a:	e7e2      	b.n	8003212 <USBD_CDC_Init+0x70>

0800324c <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if(fops != NULL)
 800324c:	b119      	cbz	r1, 8003256 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 800324e:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
    ret = USBD_OK;
 8003252:	2000      	movs	r0, #0
 8003254:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8003256:	2002      	movs	r0, #2
  }

  return ret;
}
 8003258:	4770      	bx	lr

0800325a <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800325a:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290

  hcdc->TxBuffer = pbuff;
 800325e:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8003262:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
}
 8003266:	2000      	movs	r0, #0
 8003268:	4770      	bx	lr

0800326a <USBD_CDC_SetRxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800326a:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290

  hcdc->RxBuffer = pbuff;
 800326e:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204

  return USBD_OK;
}
 8003272:	2000      	movs	r0, #0
 8003274:	4770      	bx	lr

08003276 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003276:	f8d0 2290 	ldr.w	r2, [r0, #656]	; 0x290

  if(pdev->pClassData != NULL)
 800327a:	b1a2      	cbz	r2, 80032a6 <USBD_CDC_TransmitPacket+0x30>
{
 800327c:	b508      	push	{r3, lr}
  {
    if(hcdc->TxState == 0U)
 800327e:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
 8003282:	b10b      	cbz	r3, 8003288 <USBD_CDC_TransmitPacket+0x12>

      return USBD_OK;
    }
    else
    {
      return USBD_BUSY;
 8003284:	2001      	movs	r0, #1
  }
  else
  {
    return USBD_FAIL;
  }
}
 8003286:	bd08      	pop	{r3, pc}
      hcdc->TxState = 1U;
 8003288:	2301      	movs	r3, #1
 800328a:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800328e:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 8003292:	6303      	str	r3, [r0, #48]	; 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8003294:	f8b2 3210 	ldrh.w	r3, [r2, #528]	; 0x210
 8003298:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 800329c:	2181      	movs	r1, #129	; 0x81
 800329e:	f001 f8d1 	bl	8004444 <USBD_LL_Transmit>
      return USBD_OK;
 80032a2:	2000      	movs	r0, #0
 80032a4:	e7ef      	b.n	8003286 <USBD_CDC_TransmitPacket+0x10>
    return USBD_FAIL;
 80032a6:	2002      	movs	r0, #2
}
 80032a8:	4770      	bx	lr

080032aa <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80032aa:	f8d0 2290 	ldr.w	r2, [r0, #656]	; 0x290

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 80032ae:	b19a      	cbz	r2, 80032d8 <USBD_CDC_ReceivePacket+0x2e>
{
 80032b0:	b508      	push	{r3, lr}
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 80032b2:	7c03      	ldrb	r3, [r0, #16]
 80032b4:	b13b      	cbz	r3, 80032c6 <USBD_CDC_ReceivePacket+0x1c>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80032b6:	2340      	movs	r3, #64	; 0x40
 80032b8:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 80032bc:	2101      	movs	r1, #1
 80032be:	f001 f8c9 	bl	8004454 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80032c2:	2000      	movs	r0, #0
  }
  else
  {
    return USBD_FAIL;
  }
}
 80032c4:	bd08      	pop	{r3, pc}
      USBD_LL_PrepareReceive(pdev,
 80032c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032ca:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 80032ce:	2101      	movs	r1, #1
 80032d0:	f001 f8c0 	bl	8004454 <USBD_LL_PrepareReceive>
    return USBD_OK;
 80032d4:	2000      	movs	r0, #0
 80032d6:	e7f5      	b.n	80032c4 <USBD_CDC_ReceivePacket+0x1a>
    return USBD_FAIL;
 80032d8:	2002      	movs	r0, #2
}
 80032da:	4770      	bx	lr

080032dc <USBD_Init>:
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 80032dc:	b198      	cbz	r0, 8003306 <USBD_Init+0x2a>
{
 80032de:	b508      	push	{r3, lr}
 80032e0:	4603      	mov	r3, r0
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 80032e2:	f8d0 028c 	ldr.w	r0, [r0, #652]	; 0x28c
 80032e6:	b110      	cbz	r0, 80032ee <USBD_Init+0x12>
  {
    pdev->pClass = NULL;
 80032e8:	2000      	movs	r0, #0
 80032ea:	f8c3 028c 	str.w	r0, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 80032ee:	b109      	cbz	r1, 80032f4 <USBD_Init+0x18>
  {
    pdev->pDesc = pdesc;
 80032f0:	f8c3 1288 	str.w	r1, [r3, #648]	; 0x288
 80032f4:	4618      	mov	r0, r3
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80032f6:	2301      	movs	r3, #1
 80032f8:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  pdev->id = id;
 80032fc:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80032fe:	f000 ffe1 	bl	80042c4 <USBD_LL_Init>

  return USBD_OK;
 8003302:	2000      	movs	r0, #0
}
 8003304:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8003306:	2002      	movs	r0, #2
}
 8003308:	4770      	bx	lr

0800330a <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 800330a:	b119      	cbz	r1, 8003314 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800330c:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
    status = USBD_OK;
 8003310:	2000      	movs	r0, #0
 8003312:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8003314:	2002      	movs	r0, #2
  }

  return status;
}
 8003316:	4770      	bx	lr

08003318 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8003318:	b508      	push	{r3, lr}

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800331a:	f001 f860 	bl	80043de <USBD_LL_Start>

  return USBD_OK;
}
 800331e:	2000      	movs	r0, #0
 8003320:	bd08      	pop	{r3, pc}

08003322 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003322:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;

  if(pdev->pClass != NULL)
 8003324:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8003328:	b133      	cbz	r3, 8003338 <USBD_SetClassConfig+0x16>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4798      	blx	r3
 800332e:	b908      	cbnz	r0, 8003334 <USBD_SetClassConfig+0x12>
    {
      ret = USBD_OK;
 8003330:	2000      	movs	r0, #0
    }
  }

  return ret;
}
 8003332:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8003334:	2002      	movs	r0, #2
 8003336:	e7fc      	b.n	8003332 <USBD_SetClassConfig+0x10>
 8003338:	2002      	movs	r0, #2
 800333a:	e7fa      	b.n	8003332 <USBD_SetClassConfig+0x10>

0800333c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800333c:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800333e:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	4798      	blx	r3
  return USBD_OK;
}
 8003346:	2000      	movs	r0, #0
 8003348:	bd08      	pop	{r3, pc}

0800334a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800334a:	b538      	push	{r3, r4, r5, lr}
 800334c:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800334e:	f500 7520 	add.w	r5, r0, #640	; 0x280
 8003352:	4628      	mov	r0, r5
 8003354:	f000 f947 	bl	80035e6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8003358:	2301      	movs	r3, #1
 800335a:	f8c4 326c 	str.w	r3, [r4, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 800335e:	f8b4 3286 	ldrh.w	r3, [r4, #646]	; 0x286
 8003362:	f8c4 3270 	str.w	r3, [r4, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 8003366:	f894 1280 	ldrb.w	r1, [r4, #640]	; 0x280
 800336a:	f001 031f 	and.w	r3, r1, #31
 800336e:	2b01      	cmp	r3, #1
 8003370:	d00e      	beq.n	8003390 <USBD_LL_SetupStage+0x46>
 8003372:	b13b      	cbz	r3, 8003384 <USBD_LL_SetupStage+0x3a>
 8003374:	2b02      	cmp	r3, #2
 8003376:	d010      	beq.n	800339a <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
    break;

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8003378:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800337c:	4620      	mov	r0, r4
 800337e:	f001 f849 	bl	8004414 <USBD_LL_StallEP>
    break;
 8003382:	e003      	b.n	800338c <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 8003384:	4629      	mov	r1, r5
 8003386:	4620      	mov	r0, r4
 8003388:	f000 fac5 	bl	8003916 <USBD_StdDevReq>
  }

  return USBD_OK;
}
 800338c:	2000      	movs	r0, #0
 800338e:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 8003390:	4629      	mov	r1, r5
 8003392:	4620      	mov	r0, r4
 8003394:	f000 faf3 	bl	800397e <USBD_StdItfReq>
    break;
 8003398:	e7f8      	b.n	800338c <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);
 800339a:	4629      	mov	r1, r5
 800339c:	4620      	mov	r0, r4
 800339e:	f000 fb1e 	bl	80039de <USBD_StdEPReq>
    break;
 80033a2:	e7f3      	b.n	800338c <USBD_LL_SetupStage+0x42>

080033a4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80033a4:	b538      	push	{r3, r4, r5, lr}
 80033a6:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 80033a8:	bba1      	cbnz	r1, 8003414 <USBD_LL_DataOutStage+0x70>
 80033aa:	4610      	mov	r0, r2
  {
    pep = &pdev->ep_out[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 80033ac:	f8d4 326c 	ldr.w	r3, [r4, #620]	; 0x26c
 80033b0:	2b03      	cmp	r3, #3
 80033b2:	d003      	beq.n	80033bc <USBD_LL_DataOutStage+0x18>
        USBD_CtlSendStatus(pdev);
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80033b4:	2b05      	cmp	r3, #5
 80033b6:	d024      	beq.n	8003402 <USBD_LL_DataOutStage+0x5e>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80033b8:	2000      	movs	r0, #0
 80033ba:	e037      	b.n	800342c <USBD_LL_DataOutStage+0x88>
      if(pep->rem_length > pep->maxpacket)
 80033bc:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
 80033c0:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d90d      	bls.n	80033e4 <USBD_LL_DataOutStage+0x40>
        pep->rem_length -=  pep->maxpacket;
 80033c8:	1a9b      	subs	r3, r3, r2
 80033ca:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
        USBD_CtlContinueRx (pdev,
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d906      	bls.n	80033e0 <USBD_LL_DataOutStage+0x3c>
 80033d2:	b29a      	uxth	r2, r3
 80033d4:	4601      	mov	r1, r0
 80033d6:	4620      	mov	r0, r4
 80033d8:	f000 fc5f 	bl	8003c9a <USBD_CtlContinueRx>
  return USBD_OK;
 80033dc:	2000      	movs	r0, #0
 80033de:	e025      	b.n	800342c <USBD_LL_DataOutStage+0x88>
        USBD_CtlContinueRx (pdev,
 80033e0:	b292      	uxth	r2, r2
 80033e2:	e7f7      	b.n	80033d4 <USBD_LL_DataOutStage+0x30>
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80033e4:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 80033e8:	691b      	ldr	r3, [r3, #16]
 80033ea:	b12b      	cbz	r3, 80033f8 <USBD_LL_DataOutStage+0x54>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80033ec:	f894 2274 	ldrb.w	r2, [r4, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80033f0:	2a03      	cmp	r2, #3
 80033f2:	d101      	bne.n	80033f8 <USBD_LL_DataOutStage+0x54>
          pdev->pClass->EP0_RxReady(pdev);
 80033f4:	4620      	mov	r0, r4
 80033f6:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 80033f8:	4620      	mov	r0, r4
 80033fa:	f000 fc56 	bl	8003caa <USBD_CtlSendStatus>
  return USBD_OK;
 80033fe:	2000      	movs	r0, #0
 8003400:	e014      	b.n	800342c <USBD_LL_DataOutStage+0x88>
        pdev->ep0_state = USBD_EP0_IDLE;
 8003402:	2500      	movs	r5, #0
 8003404:	f8c4 526c 	str.w	r5, [r4, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8003408:	4629      	mov	r1, r5
 800340a:	4620      	mov	r0, r4
 800340c:	f001 f802 	bl	8004414 <USBD_LL_StallEP>
  return USBD_OK;
 8003410:	4628      	mov	r0, r5
 8003412:	e00b      	b.n	800342c <USBD_LL_DataOutStage+0x88>
 8003414:	460a      	mov	r2, r1
  else if((pdev->pClass->DataOut != NULL) &&
 8003416:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800341a:	699b      	ldr	r3, [r3, #24]
 800341c:	b13b      	cbz	r3, 800342e <USBD_LL_DataOutStage+0x8a>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800341e:	f890 1274 	ldrb.w	r1, [r0, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 8003422:	2903      	cmp	r1, #3
 8003424:	d105      	bne.n	8003432 <USBD_LL_DataOutStage+0x8e>
    pdev->pClass->DataOut(pdev, epnum);
 8003426:	4611      	mov	r1, r2
 8003428:	4798      	blx	r3
  return USBD_OK;
 800342a:	2000      	movs	r0, #0
}
 800342c:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 800342e:	2002      	movs	r0, #2
 8003430:	e7fc      	b.n	800342c <USBD_LL_DataOutStage+0x88>
 8003432:	2002      	movs	r0, #2
 8003434:	e7fa      	b.n	800342c <USBD_LL_DataOutStage+0x88>

08003436 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8003436:	b510      	push	{r4, lr}
 8003438:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 800343a:	2900      	cmp	r1, #0
 800343c:	d155      	bne.n	80034ea <USBD_LL_DataInStage+0xb4>
 800343e:	4610      	mov	r0, r2
  {
    pep = &pdev->ep_in[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8003440:	f8d4 326c 	ldr.w	r3, [r4, #620]	; 0x26c
 8003444:	2b02      	cmp	r3, #2
 8003446:	d009      	beq.n	800345c <USBD_LL_DataInStage+0x26>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8003448:	2b00      	cmp	r3, #0
 800344a:	bf18      	it	ne
 800344c:	2b04      	cmpne	r3, #4
 800344e:	d043      	beq.n	80034d8 <USBD_LL_DataInStage+0xa2>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 8003450:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
 8003454:	2b01      	cmp	r3, #1
 8003456:	d044      	beq.n	80034e2 <USBD_LL_DataInStage+0xac>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8003458:	2000      	movs	r0, #0
 800345a:	e052      	b.n	8003502 <USBD_LL_DataInStage+0xcc>
      if(pep->rem_length > pep->maxpacket)
 800345c:	6a23      	ldr	r3, [r4, #32]
 800345e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003460:	4293      	cmp	r3, r2
 8003462:	d81d      	bhi.n	80034a0 <USBD_LL_DataInStage+0x6a>
        if((pep->total_length % pep->maxpacket == 0U) &&
 8003464:	69e1      	ldr	r1, [r4, #28]
 8003466:	fbb1 f3f2 	udiv	r3, r1, r2
 800346a:	fb02 1313 	mls	r3, r2, r3, r1
 800346e:	b92b      	cbnz	r3, 800347c <USBD_LL_DataInStage+0x46>
 8003470:	428a      	cmp	r2, r1
 8003472:	d803      	bhi.n	800347c <USBD_LL_DataInStage+0x46>
           (pep->total_length < pdev->ep0_data_len))
 8003474:	f8d4 3270 	ldr.w	r3, [r4, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 8003478:	4299      	cmp	r1, r3
 800347a:	d31f      	bcc.n	80034bc <USBD_LL_DataInStage+0x86>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800347c:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	b12b      	cbz	r3, 8003490 <USBD_LL_DataInStage+0x5a>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003484:	f894 2274 	ldrb.w	r2, [r4, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8003488:	2a03      	cmp	r2, #3
 800348a:	d101      	bne.n	8003490 <USBD_LL_DataInStage+0x5a>
            pdev->pClass->EP0_TxSent(pdev);
 800348c:	4620      	mov	r0, r4
 800348e:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 8003490:	2180      	movs	r1, #128	; 0x80
 8003492:	4620      	mov	r0, r4
 8003494:	f000 ffbe 	bl	8004414 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8003498:	4620      	mov	r0, r4
 800349a:	f000 fc11 	bl	8003cc0 <USBD_CtlReceiveStatus>
 800349e:	e7d7      	b.n	8003450 <USBD_LL_DataInStage+0x1a>
        pep->rem_length -= pep->maxpacket;
 80034a0:	1a9a      	subs	r2, r3, r2
 80034a2:	6222      	str	r2, [r4, #32]
        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 80034a4:	b292      	uxth	r2, r2
 80034a6:	4601      	mov	r1, r0
 80034a8:	4620      	mov	r0, r4
 80034aa:	f000 fbdf 	bl	8003c6c <USBD_CtlContinueSendData>
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80034ae:	2300      	movs	r3, #0
 80034b0:	461a      	mov	r2, r3
 80034b2:	4619      	mov	r1, r3
 80034b4:	4620      	mov	r0, r4
 80034b6:	f000 ffcd 	bl	8004454 <USBD_LL_PrepareReceive>
 80034ba:	e7c9      	b.n	8003450 <USBD_LL_DataInStage+0x1a>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80034bc:	2200      	movs	r2, #0
 80034be:	4611      	mov	r1, r2
 80034c0:	4620      	mov	r0, r4
 80034c2:	f000 fbd3 	bl	8003c6c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80034c6:	2100      	movs	r1, #0
 80034c8:	f8c4 1270 	str.w	r1, [r4, #624]	; 0x270
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80034cc:	460b      	mov	r3, r1
 80034ce:	460a      	mov	r2, r1
 80034d0:	4620      	mov	r0, r4
 80034d2:	f000 ffbf 	bl	8004454 <USBD_LL_PrepareReceive>
 80034d6:	e7bb      	b.n	8003450 <USBD_LL_DataInStage+0x1a>
        USBD_LL_StallEP(pdev, 0x80U);
 80034d8:	2180      	movs	r1, #128	; 0x80
 80034da:	4620      	mov	r0, r4
 80034dc:	f000 ff9a 	bl	8004414 <USBD_LL_StallEP>
 80034e0:	e7b6      	b.n	8003450 <USBD_LL_DataInStage+0x1a>
      pdev->dev_test_mode = 0U;
 80034e2:	2000      	movs	r0, #0
 80034e4:	f884 0278 	strb.w	r0, [r4, #632]	; 0x278
 80034e8:	e00b      	b.n	8003502 <USBD_LL_DataInStage+0xcc>
 80034ea:	460a      	mov	r2, r1
  else if((pdev->pClass->DataIn != NULL) &&
 80034ec:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80034f0:	695b      	ldr	r3, [r3, #20]
 80034f2:	b13b      	cbz	r3, 8003504 <USBD_LL_DataInStage+0xce>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80034f4:	f890 1274 	ldrb.w	r1, [r0, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 80034f8:	2903      	cmp	r1, #3
 80034fa:	d105      	bne.n	8003508 <USBD_LL_DataInStage+0xd2>
    pdev->pClass->DataIn(pdev, epnum);
 80034fc:	4611      	mov	r1, r2
 80034fe:	4798      	blx	r3
  return USBD_OK;
 8003500:	2000      	movs	r0, #0
}
 8003502:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8003504:	2002      	movs	r0, #2
 8003506:	e7fc      	b.n	8003502 <USBD_LL_DataInStage+0xcc>
 8003508:	2002      	movs	r0, #2
 800350a:	e7fa      	b.n	8003502 <USBD_LL_DataInStage+0xcc>

0800350c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800350c:	b570      	push	{r4, r5, r6, lr}
 800350e:	4604      	mov	r4, r0
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003510:	2340      	movs	r3, #64	; 0x40
 8003512:	2200      	movs	r2, #0
 8003514:	4611      	mov	r1, r2
 8003516:	f000 ff6a 	bl	80043ee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800351a:	2501      	movs	r5, #1
 800351c:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8003520:	2640      	movs	r6, #64	; 0x40
 8003522:	f8c4 6150 	str.w	r6, [r4, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003526:	4633      	mov	r3, r6
 8003528:	2200      	movs	r2, #0
 800352a:	2180      	movs	r1, #128	; 0x80
 800352c:	4620      	mov	r0, r4
 800352e:	f000 ff5e 	bl	80043ee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8003532:	61a5      	str	r5, [r4, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8003534:	6266      	str	r6, [r4, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003536:	f884 5274 	strb.w	r5, [r4, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 800353a:	2300      	movs	r3, #0
 800353c:	f8c4 326c 	str.w	r3, [r4, #620]	; 0x26c
  pdev->dev_config= 0U;
 8003540:	6063      	str	r3, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8003542:	f8c4 327c 	str.w	r3, [r4, #636]	; 0x27c

  if (pdev->pClassData)
 8003546:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
 800354a:	b12b      	cbz	r3, 8003558 <USBD_LL_Reset+0x4c>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800354c:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	2100      	movs	r1, #0
 8003554:	4620      	mov	r0, r4
 8003556:	4798      	blx	r3
  }

  return USBD_OK;
}
 8003558:	2000      	movs	r0, #0
 800355a:	bd70      	pop	{r4, r5, r6, pc}

0800355c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800355c:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 800355e:	2000      	movs	r0, #0
 8003560:	4770      	bx	lr

08003562 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8003562:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8003566:	f880 3275 	strb.w	r3, [r0, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800356a:	2304      	movs	r3, #4
 800356c:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  return USBD_OK;
}
 8003570:	2000      	movs	r0, #0
 8003572:	4770      	bx	lr

08003574 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;
 8003574:	f890 3275 	ldrb.w	r3, [r0, #629]	; 0x275
 8003578:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  return USBD_OK;
}
 800357c:	2000      	movs	r0, #0
 800357e:	4770      	bx	lr

08003580 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8003580:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8003582:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8003586:	2b03      	cmp	r3, #3
 8003588:	d001      	beq.n	800358e <USBD_LL_SOF+0xe>
    {
      pdev->pClass->SOF(pdev);
    }
  }
  return USBD_OK;
}
 800358a:	2000      	movs	r0, #0
 800358c:	bd08      	pop	{r3, pc}
    if(pdev->pClass->SOF != NULL)
 800358e:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8003592:	69db      	ldr	r3, [r3, #28]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d0f8      	beq.n	800358a <USBD_LL_SOF+0xa>
      pdev->pClass->SOF(pdev);
 8003598:	4798      	blx	r3
 800359a:	e7f6      	b.n	800358a <USBD_LL_SOF+0xa>

0800359c <USBD_LL_IsoINIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 800359c:	2000      	movs	r0, #0
 800359e:	4770      	bx	lr

080035a0 <USBD_LL_IsoOUTIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 80035a0:	2000      	movs	r0, #0
 80035a2:	4770      	bx	lr

080035a4 <USBD_LL_DevConnected>:
{
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
}
 80035a4:	2000      	movs	r0, #0
 80035a6:	4770      	bx	lr

080035a8 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 80035a8:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80035aa:	2201      	movs	r2, #1
 80035ac:	f880 2274 	strb.w	r2, [r0, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80035b0:	f8d0 228c 	ldr.w	r2, [r0, #652]	; 0x28c
 80035b4:	6852      	ldr	r2, [r2, #4]
 80035b6:	7901      	ldrb	r1, [r0, #4]
 80035b8:	4790      	blx	r2

  return USBD_OK;
}
 80035ba:	2000      	movs	r0, #0
 80035bc:	bd08      	pop	{r3, pc}

080035be <USBD_GetLen>:
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0U;
 80035be:	2300      	movs	r3, #0

    while (*buf != '\0')
 80035c0:	e002      	b.n	80035c8 <USBD_GetLen+0xa>
    {
        len++;
 80035c2:	3301      	adds	r3, #1
 80035c4:	b2db      	uxtb	r3, r3
        buf++;
 80035c6:	3001      	adds	r0, #1
    while (*buf != '\0')
 80035c8:	7802      	ldrb	r2, [r0, #0]
 80035ca:	2a00      	cmp	r2, #0
 80035cc:	d1f9      	bne.n	80035c2 <USBD_GetLen+0x4>
    }

    return len;
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	4770      	bx	lr

080035d2 <USBD_SetFeature>:
{
 80035d2:	b508      	push	{r3, lr}
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80035d4:	884b      	ldrh	r3, [r1, #2]
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d000      	beq.n	80035dc <USBD_SetFeature+0xa>
}
 80035da:	bd08      	pop	{r3, pc}
    pdev->dev_remote_wakeup = 1U;
 80035dc:	f8c0 327c 	str.w	r3, [r0, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 80035e0:	f000 fb63 	bl	8003caa <USBD_CtlSendStatus>
}
 80035e4:	e7f9      	b.n	80035da <USBD_SetFeature+0x8>

080035e6 <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 80035e6:	780b      	ldrb	r3, [r1, #0]
 80035e8:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80035ea:	784b      	ldrb	r3, [r1, #1]
 80035ec:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80035ee:	788b      	ldrb	r3, [r1, #2]
 80035f0:	78ca      	ldrb	r2, [r1, #3]
 80035f2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80035f6:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80035f8:	790b      	ldrb	r3, [r1, #4]
 80035fa:	794a      	ldrb	r2, [r1, #5]
 80035fc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003600:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8003602:	798b      	ldrb	r3, [r1, #6]
 8003604:	79ca      	ldrb	r2, [r1, #7]
 8003606:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800360a:	80c3      	strh	r3, [r0, #6]
}
 800360c:	4770      	bx	lr

0800360e <USBD_CtlError>:
{
 800360e:	b510      	push	{r4, lr}
 8003610:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80U);
 8003612:	2180      	movs	r1, #128	; 0x80
 8003614:	f000 fefe 	bl	8004414 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8003618:	2100      	movs	r1, #0
 800361a:	4620      	mov	r0, r4
 800361c:	f000 fefa 	bl	8004414 <USBD_LL_StallEP>
}
 8003620:	bd10      	pop	{r4, pc}

08003622 <USBD_GetDescriptor>:
{
 8003622:	b530      	push	{r4, r5, lr}
 8003624:	b083      	sub	sp, #12
 8003626:	4605      	mov	r5, r0
 8003628:	460c      	mov	r4, r1
  switch (req->wValue >> 8)
 800362a:	884a      	ldrh	r2, [r1, #2]
 800362c:	0a13      	lsrs	r3, r2, #8
 800362e:	3b01      	subs	r3, #1
 8003630:	2b0e      	cmp	r3, #14
 8003632:	f200 8091 	bhi.w	8003758 <USBD_GetDescriptor+0x136>
 8003636:	e8df f003 	tbb	[pc, r3]
 800363a:	231b      	.short	0x231b
 800363c:	738f8f37 	.word	0x738f8f37
 8003640:	8f8f8f80 	.word	0x8f8f8f80
 8003644:	8f8f8f8f 	.word	0x8f8f8f8f
 8003648:	08          	.byte	0x08
 8003649:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800364a:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800364e:	69db      	ldr	r3, [r3, #28]
 8003650:	f10d 0106 	add.w	r1, sp, #6
 8003654:	7c00      	ldrb	r0, [r0, #16]
 8003656:	4798      	blx	r3
  if((len != 0U) && (req->wLength != 0U))
 8003658:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800365c:	b112      	cbz	r2, 8003664 <USBD_GetDescriptor+0x42>
 800365e:	88e3      	ldrh	r3, [r4, #6]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d17d      	bne.n	8003760 <USBD_GetDescriptor+0x13e>
  if(req->wLength == 0U)
 8003664:	88e3      	ldrh	r3, [r4, #6]
 8003666:	2b00      	cmp	r3, #0
 8003668:	f000 8084 	beq.w	8003774 <USBD_GetDescriptor+0x152>
}
 800366c:	b003      	add	sp, #12
 800366e:	bd30      	pop	{r4, r5, pc}
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8003670:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f10d 0106 	add.w	r1, sp, #6
 800367a:	7c00      	ldrb	r0, [r0, #16]
 800367c:	4798      	blx	r3
    break;
 800367e:	e7eb      	b.n	8003658 <USBD_GetDescriptor+0x36>
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8003680:	7c03      	ldrb	r3, [r0, #16]
 8003682:	b943      	cbnz	r3, 8003696 <USBD_GetDescriptor+0x74>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8003684:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8003688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800368a:	f10d 0006 	add.w	r0, sp, #6
 800368e:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8003690:	2302      	movs	r3, #2
 8003692:	7043      	strb	r3, [r0, #1]
 8003694:	e7e0      	b.n	8003658 <USBD_GetDescriptor+0x36>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8003696:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800369a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369c:	f10d 0006 	add.w	r0, sp, #6
 80036a0:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80036a2:	2302      	movs	r3, #2
 80036a4:	7043      	strb	r3, [r0, #1]
 80036a6:	e7d7      	b.n	8003658 <USBD_GetDescriptor+0x36>
    switch ((uint8_t)(req->wValue))
 80036a8:	b2d2      	uxtb	r2, r2
 80036aa:	2a05      	cmp	r2, #5
 80036ac:	d834      	bhi.n	8003718 <USBD_GetDescriptor+0xf6>
 80036ae:	e8df f002 	tbb	[pc, r2]
 80036b2:	0b03      	.short	0x0b03
 80036b4:	2b231b13 	.word	0x2b231b13
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80036b8:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f10d 0106 	add.w	r1, sp, #6
 80036c2:	7c00      	ldrb	r0, [r0, #16]
 80036c4:	4798      	blx	r3
      break;
 80036c6:	e7c7      	b.n	8003658 <USBD_GetDescriptor+0x36>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80036c8:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	f10d 0106 	add.w	r1, sp, #6
 80036d2:	7c00      	ldrb	r0, [r0, #16]
 80036d4:	4798      	blx	r3
      break;
 80036d6:	e7bf      	b.n	8003658 <USBD_GetDescriptor+0x36>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80036d8:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	f10d 0106 	add.w	r1, sp, #6
 80036e2:	7c00      	ldrb	r0, [r0, #16]
 80036e4:	4798      	blx	r3
      break;
 80036e6:	e7b7      	b.n	8003658 <USBD_GetDescriptor+0x36>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80036e8:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 80036ec:	691b      	ldr	r3, [r3, #16]
 80036ee:	f10d 0106 	add.w	r1, sp, #6
 80036f2:	7c00      	ldrb	r0, [r0, #16]
 80036f4:	4798      	blx	r3
      break;
 80036f6:	e7af      	b.n	8003658 <USBD_GetDescriptor+0x36>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80036f8:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 80036fc:	695b      	ldr	r3, [r3, #20]
 80036fe:	f10d 0106 	add.w	r1, sp, #6
 8003702:	7c00      	ldrb	r0, [r0, #16]
 8003704:	4798      	blx	r3
      break;
 8003706:	e7a7      	b.n	8003658 <USBD_GetDescriptor+0x36>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8003708:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800370c:	699b      	ldr	r3, [r3, #24]
 800370e:	f10d 0106 	add.w	r1, sp, #6
 8003712:	7c00      	ldrb	r0, [r0, #16]
 8003714:	4798      	blx	r3
      break;
 8003716:	e79f      	b.n	8003658 <USBD_GetDescriptor+0x36>
       USBD_CtlError(pdev , req);
 8003718:	4621      	mov	r1, r4
 800371a:	f7ff ff78 	bl	800360e <USBD_CtlError>
      return;
 800371e:	e7a5      	b.n	800366c <USBD_GetDescriptor+0x4a>
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8003720:	7c03      	ldrb	r3, [r0, #16]
 8003722:	b933      	cbnz	r3, 8003732 <USBD_GetDescriptor+0x110>
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8003724:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8003728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800372a:	f10d 0006 	add.w	r0, sp, #6
 800372e:	4798      	blx	r3
      break;
 8003730:	e792      	b.n	8003658 <USBD_GetDescriptor+0x36>
      USBD_CtlError(pdev , req);
 8003732:	4621      	mov	r1, r4
 8003734:	f7ff ff6b 	bl	800360e <USBD_CtlError>
      return;
 8003738:	e798      	b.n	800366c <USBD_GetDescriptor+0x4a>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800373a:	7c03      	ldrb	r3, [r0, #16]
 800373c:	b943      	cbnz	r3, 8003750 <USBD_GetDescriptor+0x12e>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800373e:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8003742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003744:	f10d 0006 	add.w	r0, sp, #6
 8003748:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800374a:	2307      	movs	r3, #7
 800374c:	7043      	strb	r3, [r0, #1]
      break;
 800374e:	e783      	b.n	8003658 <USBD_GetDescriptor+0x36>
      USBD_CtlError(pdev , req);
 8003750:	4621      	mov	r1, r4
 8003752:	f7ff ff5c 	bl	800360e <USBD_CtlError>
      return;
 8003756:	e789      	b.n	800366c <USBD_GetDescriptor+0x4a>
     USBD_CtlError(pdev , req);
 8003758:	4621      	mov	r1, r4
 800375a:	f7ff ff58 	bl	800360e <USBD_CtlError>
    return;
 800375e:	e785      	b.n	800366c <USBD_GetDescriptor+0x4a>
    len = MIN(len, req->wLength);
 8003760:	429a      	cmp	r2, r3
 8003762:	bf28      	it	cs
 8003764:	461a      	movcs	r2, r3
 8003766:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, pbuf, len);
 800376a:	4601      	mov	r1, r0
 800376c:	4628      	mov	r0, r5
 800376e:	f000 fa70 	bl	8003c52 <USBD_CtlSendData>
 8003772:	e777      	b.n	8003664 <USBD_GetDescriptor+0x42>
   USBD_CtlSendStatus(pdev);
 8003774:	4628      	mov	r0, r5
 8003776:	f000 fa98 	bl	8003caa <USBD_CtlSendStatus>
 800377a:	e777      	b.n	800366c <USBD_GetDescriptor+0x4a>

0800377c <USBD_SetAddress>:
{
 800377c:	b538      	push	{r3, r4, r5, lr}
 800377e:	4604      	mov	r4, r0
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8003780:	888b      	ldrh	r3, [r1, #4]
 8003782:	b9f3      	cbnz	r3, 80037c2 <USBD_SetAddress+0x46>
 8003784:	88cb      	ldrh	r3, [r1, #6]
 8003786:	b9e3      	cbnz	r3, 80037c2 <USBD_SetAddress+0x46>
 8003788:	884b      	ldrh	r3, [r1, #2]
 800378a:	2b7f      	cmp	r3, #127	; 0x7f
 800378c:	d819      	bhi.n	80037c2 <USBD_SetAddress+0x46>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800378e:	f003 057f 	and.w	r5, r3, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003792:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8003796:	2b03      	cmp	r3, #3
 8003798:	d00c      	beq.n	80037b4 <USBD_SetAddress+0x38>
      pdev->dev_address = dev_addr;
 800379a:	f880 5276 	strb.w	r5, [r0, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800379e:	4629      	mov	r1, r5
 80037a0:	f000 fe48 	bl	8004434 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80037a4:	4620      	mov	r0, r4
 80037a6:	f000 fa80 	bl	8003caa <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 80037aa:	b135      	cbz	r5, 80037ba <USBD_SetAddress+0x3e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80037ac:	2302      	movs	r3, #2
 80037ae:	f884 3274 	strb.w	r3, [r4, #628]	; 0x274
 80037b2:	e009      	b.n	80037c8 <USBD_SetAddress+0x4c>
      USBD_CtlError(pdev , req);
 80037b4:	f7ff ff2b 	bl	800360e <USBD_CtlError>
 80037b8:	e006      	b.n	80037c8 <USBD_SetAddress+0x4c>
        pdev->dev_state = USBD_STATE_DEFAULT;
 80037ba:	2301      	movs	r3, #1
 80037bc:	f884 3274 	strb.w	r3, [r4, #628]	; 0x274
 80037c0:	e002      	b.n	80037c8 <USBD_SetAddress+0x4c>
    USBD_CtlError(pdev, req);
 80037c2:	4620      	mov	r0, r4
 80037c4:	f7ff ff23 	bl	800360e <USBD_CtlError>
}
 80037c8:	bd38      	pop	{r3, r4, r5, pc}
	...

080037cc <USBD_SetConfig>:
{
 80037cc:	b538      	push	{r3, r4, r5, lr}
 80037ce:	4604      	mov	r4, r0
 80037d0:	460d      	mov	r5, r1
  cfgidx = (uint8_t)(req->wValue);
 80037d2:	7889      	ldrb	r1, [r1, #2]
 80037d4:	4b28      	ldr	r3, [pc, #160]	; (8003878 <USBD_SetConfig+0xac>)
 80037d6:	7019      	strb	r1, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80037d8:	2901      	cmp	r1, #1
 80037da:	d80e      	bhi.n	80037fa <USBD_SetConfig+0x2e>
    switch (pdev->dev_state)
 80037dc:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80037e0:	2b02      	cmp	r3, #2
 80037e2:	d00e      	beq.n	8003802 <USBD_SetConfig+0x36>
 80037e4:	2b03      	cmp	r3, #3
 80037e6:	d021      	beq.n	800382c <USBD_SetConfig+0x60>
      USBD_CtlError(pdev, req);
 80037e8:	4629      	mov	r1, r5
 80037ea:	f7ff ff10 	bl	800360e <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 80037ee:	4b22      	ldr	r3, [pc, #136]	; (8003878 <USBD_SetConfig+0xac>)
 80037f0:	7819      	ldrb	r1, [r3, #0]
 80037f2:	4620      	mov	r0, r4
 80037f4:	f7ff fda2 	bl	800333c <USBD_ClrClassConfig>
      break;
 80037f8:	e002      	b.n	8003800 <USBD_SetConfig+0x34>
    USBD_CtlError(pdev, req);
 80037fa:	4629      	mov	r1, r5
 80037fc:	f7ff ff07 	bl	800360e <USBD_CtlError>
}
 8003800:	bd38      	pop	{r3, r4, r5, pc}
      if (cfgidx)
 8003802:	b181      	cbz	r1, 8003826 <USBD_SetConfig+0x5a>
        pdev->dev_config = cfgidx;
 8003804:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8003806:	2303      	movs	r3, #3
 8003808:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800380c:	f7ff fd89 	bl	8003322 <USBD_SetClassConfig>
 8003810:	2802      	cmp	r0, #2
 8003812:	d003      	beq.n	800381c <USBD_SetConfig+0x50>
        USBD_CtlSendStatus(pdev);
 8003814:	4620      	mov	r0, r4
 8003816:	f000 fa48 	bl	8003caa <USBD_CtlSendStatus>
 800381a:	e7f1      	b.n	8003800 <USBD_SetConfig+0x34>
          USBD_CtlError(pdev, req);
 800381c:	4629      	mov	r1, r5
 800381e:	4620      	mov	r0, r4
 8003820:	f7ff fef5 	bl	800360e <USBD_CtlError>
          return;
 8003824:	e7ec      	b.n	8003800 <USBD_SetConfig+0x34>
        USBD_CtlSendStatus(pdev);
 8003826:	f000 fa40 	bl	8003caa <USBD_CtlSendStatus>
 800382a:	e7e9      	b.n	8003800 <USBD_SetConfig+0x34>
      if (cfgidx == 0U)
 800382c:	b189      	cbz	r1, 8003852 <USBD_SetConfig+0x86>
      else if (cfgidx != pdev->dev_config)
 800382e:	6843      	ldr	r3, [r0, #4]
 8003830:	4299      	cmp	r1, r3
 8003832:	d01d      	beq.n	8003870 <USBD_SetConfig+0xa4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8003834:	b2d9      	uxtb	r1, r3
 8003836:	f7ff fd81 	bl	800333c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800383a:	4b0f      	ldr	r3, [pc, #60]	; (8003878 <USBD_SetConfig+0xac>)
 800383c:	7819      	ldrb	r1, [r3, #0]
 800383e:	6061      	str	r1, [r4, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8003840:	4620      	mov	r0, r4
 8003842:	f7ff fd6e 	bl	8003322 <USBD_SetClassConfig>
 8003846:	2802      	cmp	r0, #2
 8003848:	d00d      	beq.n	8003866 <USBD_SetConfig+0x9a>
        USBD_CtlSendStatus(pdev);
 800384a:	4620      	mov	r0, r4
 800384c:	f000 fa2d 	bl	8003caa <USBD_CtlSendStatus>
 8003850:	e7d6      	b.n	8003800 <USBD_SetConfig+0x34>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8003852:	2302      	movs	r3, #2
 8003854:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8003858:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 800385a:	f7ff fd6f 	bl	800333c <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800385e:	4620      	mov	r0, r4
 8003860:	f000 fa23 	bl	8003caa <USBD_CtlSendStatus>
 8003864:	e7cc      	b.n	8003800 <USBD_SetConfig+0x34>
          USBD_CtlError(pdev, req);
 8003866:	4629      	mov	r1, r5
 8003868:	4620      	mov	r0, r4
 800386a:	f7ff fed0 	bl	800360e <USBD_CtlError>
          return;
 800386e:	e7c7      	b.n	8003800 <USBD_SetConfig+0x34>
        USBD_CtlSendStatus(pdev);
 8003870:	f000 fa1b 	bl	8003caa <USBD_CtlSendStatus>
 8003874:	e7c4      	b.n	8003800 <USBD_SetConfig+0x34>
 8003876:	bf00      	nop
 8003878:	2000020c 	.word	0x2000020c

0800387c <USBD_GetConfig>:
{
 800387c:	b508      	push	{r3, lr}
  if (req->wLength != 1U)
 800387e:	88cb      	ldrh	r3, [r1, #6]
 8003880:	2b01      	cmp	r3, #1
 8003882:	d10b      	bne.n	800389c <USBD_GetConfig+0x20>
    switch (pdev->dev_state)
 8003884:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8003888:	b19b      	cbz	r3, 80038b2 <USBD_GetConfig+0x36>
 800388a:	2b02      	cmp	r3, #2
 800388c:	d909      	bls.n	80038a2 <USBD_GetConfig+0x26>
 800388e:	2b03      	cmp	r3, #3
 8003890:	d10f      	bne.n	80038b2 <USBD_GetConfig+0x36>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8003892:	2201      	movs	r2, #1
 8003894:	1d01      	adds	r1, r0, #4
 8003896:	f000 f9dc 	bl	8003c52 <USBD_CtlSendData>
      break;
 800389a:	e001      	b.n	80038a0 <USBD_GetConfig+0x24>
    USBD_CtlError(pdev , req);
 800389c:	f7ff feb7 	bl	800360e <USBD_CtlError>
}
 80038a0:	bd08      	pop	{r3, pc}
      pdev->dev_default_config = 0U;
 80038a2:	4601      	mov	r1, r0
 80038a4:	2300      	movs	r3, #0
 80038a6:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80038aa:	2201      	movs	r2, #1
 80038ac:	f000 f9d1 	bl	8003c52 <USBD_CtlSendData>
      break;
 80038b0:	e7f6      	b.n	80038a0 <USBD_GetConfig+0x24>
      USBD_CtlError(pdev , req);
 80038b2:	f7ff feac 	bl	800360e <USBD_CtlError>
}
 80038b6:	e7f3      	b.n	80038a0 <USBD_GetConfig+0x24>

080038b8 <USBD_GetStatus>:
{
 80038b8:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 80038ba:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80038be:	3b01      	subs	r3, #1
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	d812      	bhi.n	80038ea <USBD_GetStatus+0x32>
    if(req->wLength != 0x2U)
 80038c4:	88cb      	ldrh	r3, [r1, #6]
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d10c      	bne.n	80038e4 <USBD_GetStatus+0x2c>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80038ca:	2301      	movs	r3, #1
 80038cc:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup)
 80038ce:	f8d0 327c 	ldr.w	r3, [r0, #636]	; 0x27c
 80038d2:	b10b      	cbz	r3, 80038d8 <USBD_GetStatus+0x20>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80038d4:	2303      	movs	r3, #3
 80038d6:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80038d8:	2202      	movs	r2, #2
 80038da:	f100 010c 	add.w	r1, r0, #12
 80038de:	f000 f9b8 	bl	8003c52 <USBD_CtlSendData>
}
 80038e2:	bd08      	pop	{r3, pc}
      USBD_CtlError(pdev, req);
 80038e4:	f7ff fe93 	bl	800360e <USBD_CtlError>
      break;
 80038e8:	e7fb      	b.n	80038e2 <USBD_GetStatus+0x2a>
    USBD_CtlError(pdev , req);
 80038ea:	f7ff fe90 	bl	800360e <USBD_CtlError>
}
 80038ee:	e7f8      	b.n	80038e2 <USBD_GetStatus+0x2a>

080038f0 <USBD_ClrFeature>:
{
 80038f0:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 80038f2:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80038f6:	3b01      	subs	r3, #1
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	d809      	bhi.n	8003910 <USBD_ClrFeature+0x20>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80038fc:	884b      	ldrh	r3, [r1, #2]
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d000      	beq.n	8003904 <USBD_ClrFeature+0x14>
}
 8003902:	bd08      	pop	{r3, pc}
      pdev->dev_remote_wakeup = 0U;
 8003904:	2300      	movs	r3, #0
 8003906:	f8c0 327c 	str.w	r3, [r0, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 800390a:	f000 f9ce 	bl	8003caa <USBD_CtlSendStatus>
 800390e:	e7f8      	b.n	8003902 <USBD_ClrFeature+0x12>
     USBD_CtlError(pdev , req);
 8003910:	f7ff fe7d 	bl	800360e <USBD_CtlError>
}
 8003914:	e7f5      	b.n	8003902 <USBD_ClrFeature+0x12>

08003916 <USBD_StdDevReq>:
{
 8003916:	b508      	push	{r3, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003918:	780b      	ldrb	r3, [r1, #0]
 800391a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800391e:	2b20      	cmp	r3, #32
 8003920:	d005      	beq.n	800392e <USBD_StdDevReq+0x18>
 8003922:	2b40      	cmp	r3, #64	; 0x40
 8003924:	d003      	beq.n	800392e <USBD_StdDevReq+0x18>
 8003926:	b143      	cbz	r3, 800393a <USBD_StdDevReq+0x24>
    USBD_CtlError(pdev, req);
 8003928:	f7ff fe71 	bl	800360e <USBD_CtlError>
    break;
 800392c:	e003      	b.n	8003936 <USBD_StdDevReq+0x20>
    pdev->pClass->Setup(pdev, req);
 800392e:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	4798      	blx	r3
}
 8003936:	2000      	movs	r0, #0
 8003938:	bd08      	pop	{r3, pc}
    switch (req->bRequest)
 800393a:	784b      	ldrb	r3, [r1, #1]
 800393c:	2b09      	cmp	r3, #9
 800393e:	d81b      	bhi.n	8003978 <USBD_StdDevReq+0x62>
 8003940:	e8df f003 	tbb	[pc, r3]
 8003944:	141a1711 	.word	0x141a1711
 8003948:	1a05081a 	.word	0x1a05081a
 800394c:	0b0e      	.short	0x0b0e
      USBD_GetDescriptor (pdev, req);
 800394e:	f7ff fe68 	bl	8003622 <USBD_GetDescriptor>
      break;
 8003952:	e7f0      	b.n	8003936 <USBD_StdDevReq+0x20>
      USBD_SetAddress (pdev, req);
 8003954:	f7ff ff12 	bl	800377c <USBD_SetAddress>
      break;
 8003958:	e7ed      	b.n	8003936 <USBD_StdDevReq+0x20>
      USBD_SetConfig (pdev, req);
 800395a:	f7ff ff37 	bl	80037cc <USBD_SetConfig>
      break;
 800395e:	e7ea      	b.n	8003936 <USBD_StdDevReq+0x20>
      USBD_GetConfig (pdev, req);
 8003960:	f7ff ff8c 	bl	800387c <USBD_GetConfig>
      break;
 8003964:	e7e7      	b.n	8003936 <USBD_StdDevReq+0x20>
      USBD_GetStatus (pdev, req);
 8003966:	f7ff ffa7 	bl	80038b8 <USBD_GetStatus>
      break;
 800396a:	e7e4      	b.n	8003936 <USBD_StdDevReq+0x20>
      USBD_SetFeature (pdev, req);
 800396c:	f7ff fe31 	bl	80035d2 <USBD_SetFeature>
      break;
 8003970:	e7e1      	b.n	8003936 <USBD_StdDevReq+0x20>
      USBD_ClrFeature (pdev, req);
 8003972:	f7ff ffbd 	bl	80038f0 <USBD_ClrFeature>
      break;
 8003976:	e7de      	b.n	8003936 <USBD_StdDevReq+0x20>
      USBD_CtlError(pdev, req);
 8003978:	f7ff fe49 	bl	800360e <USBD_CtlError>
      break;
 800397c:	e7db      	b.n	8003936 <USBD_StdDevReq+0x20>

0800397e <USBD_StdItfReq>:
{
 800397e:	b538      	push	{r3, r4, r5, lr}
 8003980:	4605      	mov	r5, r0
 8003982:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003984:	780b      	ldrb	r3, [r1, #0]
 8003986:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800398a:	2b20      	cmp	r3, #32
 800398c:	d006      	beq.n	800399c <USBD_StdItfReq+0x1e>
 800398e:	2b40      	cmp	r3, #64	; 0x40
 8003990:	d004      	beq.n	800399c <USBD_StdItfReq+0x1e>
 8003992:	b11b      	cbz	r3, 800399c <USBD_StdItfReq+0x1e>
    USBD_CtlError(pdev, req);
 8003994:	f7ff fe3b 	bl	800360e <USBD_CtlError>
}
 8003998:	2000      	movs	r0, #0
 800399a:	bd38      	pop	{r3, r4, r5, pc}
    switch (pdev->dev_state)
 800399c:	f895 3274 	ldrb.w	r3, [r5, #628]	; 0x274
 80039a0:	3b01      	subs	r3, #1
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d816      	bhi.n	80039d4 <USBD_StdItfReq+0x56>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80039a6:	7923      	ldrb	r3, [r4, #4]
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d80e      	bhi.n	80039ca <USBD_StdItfReq+0x4c>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 80039ac:	f8d5 328c 	ldr.w	r3, [r5, #652]	; 0x28c
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	4621      	mov	r1, r4
 80039b4:	4628      	mov	r0, r5
 80039b6:	4798      	blx	r3
        if ((req->wLength == 0U) && (ret == USBD_OK))
 80039b8:	88e3      	ldrh	r3, [r4, #6]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d1ec      	bne.n	8003998 <USBD_StdItfReq+0x1a>
 80039be:	2800      	cmp	r0, #0
 80039c0:	d1ea      	bne.n	8003998 <USBD_StdItfReq+0x1a>
          USBD_CtlSendStatus(pdev);
 80039c2:	4628      	mov	r0, r5
 80039c4:	f000 f971 	bl	8003caa <USBD_CtlSendStatus>
 80039c8:	e7e6      	b.n	8003998 <USBD_StdItfReq+0x1a>
        USBD_CtlError(pdev, req);
 80039ca:	4621      	mov	r1, r4
 80039cc:	4628      	mov	r0, r5
 80039ce:	f7ff fe1e 	bl	800360e <USBD_CtlError>
 80039d2:	e7e1      	b.n	8003998 <USBD_StdItfReq+0x1a>
      USBD_CtlError(pdev, req);
 80039d4:	4621      	mov	r1, r4
 80039d6:	4628      	mov	r0, r5
 80039d8:	f7ff fe19 	bl	800360e <USBD_CtlError>
      break;
 80039dc:	e7dc      	b.n	8003998 <USBD_StdItfReq+0x1a>

080039de <USBD_StdEPReq>:
{
 80039de:	b538      	push	{r3, r4, r5, lr}
 80039e0:	4604      	mov	r4, r0
  ep_addr  = LOBYTE(req->wIndex);
 80039e2:	888a      	ldrh	r2, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80039e4:	780b      	ldrb	r3, [r1, #0]
 80039e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80039ea:	2b20      	cmp	r3, #32
 80039ec:	d008      	beq.n	8003a00 <USBD_StdEPReq+0x22>
 80039ee:	b2d0      	uxtb	r0, r2
 80039f0:	2b40      	cmp	r3, #64	; 0x40
 80039f2:	d005      	beq.n	8003a00 <USBD_StdEPReq+0x22>
 80039f4:	b15b      	cbz	r3, 8003a0e <USBD_StdEPReq+0x30>
    USBD_CtlError(pdev, req);
 80039f6:	4620      	mov	r0, r4
 80039f8:	f7ff fe09 	bl	800360e <USBD_CtlError>
  return ret;
 80039fc:	2000      	movs	r0, #0
    break;
 80039fe:	e005      	b.n	8003a0c <USBD_StdEPReq+0x2e>
    pdev->pClass->Setup (pdev, req);
 8003a00:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	4620      	mov	r0, r4
 8003a08:	4798      	blx	r3
  return ret;
 8003a0a:	2000      	movs	r0, #0
}
 8003a0c:	bd38      	pop	{r3, r4, r5, pc}
    if ((req->bmRequest & 0x60U) == 0x20U)
 8003a0e:	2b20      	cmp	r3, #32
 8003a10:	d105      	bne.n	8003a1e <USBD_StdEPReq+0x40>
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8003a12:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	4620      	mov	r0, r4
 8003a1a:	4798      	blx	r3
      return ret;
 8003a1c:	e7f6      	b.n	8003a0c <USBD_StdEPReq+0x2e>
    switch (req->bRequest)
 8003a1e:	784b      	ldrb	r3, [r1, #1]
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d03c      	beq.n	8003a9e <USBD_StdEPReq+0xc0>
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d06d      	beq.n	8003b04 <USBD_StdEPReq+0x126>
 8003a28:	2b03      	cmp	r3, #3
 8003a2a:	f040 80ef 	bne.w	8003c0c <USBD_StdEPReq+0x22e>
      switch (pdev->dev_state)
 8003a2e:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d006      	beq.n	8003a44 <USBD_StdEPReq+0x66>
 8003a36:	2b03      	cmp	r3, #3
 8003a38:	d01b      	beq.n	8003a72 <USBD_StdEPReq+0x94>
        USBD_CtlError(pdev, req);
 8003a3a:	4620      	mov	r0, r4
 8003a3c:	f7ff fde7 	bl	800360e <USBD_CtlError>
  return ret;
 8003a40:	2000      	movs	r0, #0
        break;
 8003a42:	e7e3      	b.n	8003a0c <USBD_StdEPReq+0x2e>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8003a44:	f1b0 0380 	subs.w	r3, r0, #128	; 0x80
 8003a48:	bf18      	it	ne
 8003a4a:	2301      	movne	r3, #1
 8003a4c:	2800      	cmp	r0, #0
 8003a4e:	bf08      	it	eq
 8003a50:	2300      	moveq	r3, #0
 8003a52:	b14b      	cbz	r3, 8003a68 <USBD_StdEPReq+0x8a>
          USBD_LL_StallEP(pdev, ep_addr);
 8003a54:	4601      	mov	r1, r0
 8003a56:	4620      	mov	r0, r4
 8003a58:	f000 fcdc 	bl	8004414 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8003a5c:	2180      	movs	r1, #128	; 0x80
 8003a5e:	4620      	mov	r0, r4
 8003a60:	f000 fcd8 	bl	8004414 <USBD_LL_StallEP>
  return ret;
 8003a64:	2000      	movs	r0, #0
 8003a66:	e7d1      	b.n	8003a0c <USBD_StdEPReq+0x2e>
          USBD_CtlError(pdev, req);
 8003a68:	4620      	mov	r0, r4
 8003a6a:	f7ff fdd0 	bl	800360e <USBD_CtlError>
  return ret;
 8003a6e:	2000      	movs	r0, #0
 8003a70:	e7cc      	b.n	8003a0c <USBD_StdEPReq+0x2e>
        if (req->wValue == USB_FEATURE_EP_HALT)
 8003a72:	884b      	ldrh	r3, [r1, #2]
 8003a74:	b94b      	cbnz	r3, 8003a8a <USBD_StdEPReq+0xac>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8003a76:	f1b0 0380 	subs.w	r3, r0, #128	; 0x80
 8003a7a:	bf18      	it	ne
 8003a7c:	2301      	movne	r3, #1
 8003a7e:	2800      	cmp	r0, #0
 8003a80:	bf08      	it	eq
 8003a82:	2300      	moveq	r3, #0
 8003a84:	b10b      	cbz	r3, 8003a8a <USBD_StdEPReq+0xac>
 8003a86:	88cb      	ldrh	r3, [r1, #6]
 8003a88:	b123      	cbz	r3, 8003a94 <USBD_StdEPReq+0xb6>
        USBD_CtlSendStatus(pdev);
 8003a8a:	4620      	mov	r0, r4
 8003a8c:	f000 f90d 	bl	8003caa <USBD_CtlSendStatus>
  return ret;
 8003a90:	2000      	movs	r0, #0
        break;
 8003a92:	e7bb      	b.n	8003a0c <USBD_StdEPReq+0x2e>
            USBD_LL_StallEP(pdev, ep_addr);
 8003a94:	4601      	mov	r1, r0
 8003a96:	4620      	mov	r0, r4
 8003a98:	f000 fcbc 	bl	8004414 <USBD_LL_StallEP>
 8003a9c:	e7f5      	b.n	8003a8a <USBD_StdEPReq+0xac>
      switch (pdev->dev_state)
 8003a9e:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d006      	beq.n	8003ab4 <USBD_StdEPReq+0xd6>
 8003aa6:	2b03      	cmp	r3, #3
 8003aa8:	d01b      	beq.n	8003ae2 <USBD_StdEPReq+0x104>
        USBD_CtlError(pdev, req);
 8003aaa:	4620      	mov	r0, r4
 8003aac:	f7ff fdaf 	bl	800360e <USBD_CtlError>
  return ret;
 8003ab0:	2000      	movs	r0, #0
        break;
 8003ab2:	e7ab      	b.n	8003a0c <USBD_StdEPReq+0x2e>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8003ab4:	f1b0 0380 	subs.w	r3, r0, #128	; 0x80
 8003ab8:	bf18      	it	ne
 8003aba:	2301      	movne	r3, #1
 8003abc:	2800      	cmp	r0, #0
 8003abe:	bf08      	it	eq
 8003ac0:	2300      	moveq	r3, #0
 8003ac2:	b14b      	cbz	r3, 8003ad8 <USBD_StdEPReq+0xfa>
          USBD_LL_StallEP(pdev, ep_addr);
 8003ac4:	4601      	mov	r1, r0
 8003ac6:	4620      	mov	r0, r4
 8003ac8:	f000 fca4 	bl	8004414 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8003acc:	2180      	movs	r1, #128	; 0x80
 8003ace:	4620      	mov	r0, r4
 8003ad0:	f000 fca0 	bl	8004414 <USBD_LL_StallEP>
  return ret;
 8003ad4:	2000      	movs	r0, #0
 8003ad6:	e799      	b.n	8003a0c <USBD_StdEPReq+0x2e>
          USBD_CtlError(pdev, req);
 8003ad8:	4620      	mov	r0, r4
 8003ada:	f7ff fd98 	bl	800360e <USBD_CtlError>
  return ret;
 8003ade:	2000      	movs	r0, #0
 8003ae0:	e794      	b.n	8003a0c <USBD_StdEPReq+0x2e>
        if (req->wValue == USB_FEATURE_EP_HALT)
 8003ae2:	884b      	ldrh	r3, [r1, #2]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	f040 8096 	bne.w	8003c16 <USBD_StdEPReq+0x238>
          if ((ep_addr & 0x7FU) != 0x00U)
 8003aea:	f010 0f7f 	tst.w	r0, #127	; 0x7f
 8003aee:	d104      	bne.n	8003afa <USBD_StdEPReq+0x11c>
          USBD_CtlSendStatus(pdev);
 8003af0:	4620      	mov	r0, r4
 8003af2:	f000 f8da 	bl	8003caa <USBD_CtlSendStatus>
  return ret;
 8003af6:	2000      	movs	r0, #0
 8003af8:	e788      	b.n	8003a0c <USBD_StdEPReq+0x2e>
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8003afa:	4601      	mov	r1, r0
 8003afc:	4620      	mov	r0, r4
 8003afe:	f000 fc91 	bl	8004424 <USBD_LL_ClearStallEP>
 8003b02:	e7f5      	b.n	8003af0 <USBD_StdEPReq+0x112>
      switch (pdev->dev_state)
 8003b04:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d006      	beq.n	8003b1a <USBD_StdEPReq+0x13c>
 8003b0c:	2b03      	cmp	r3, #3
 8003b0e:	d02e      	beq.n	8003b6e <USBD_StdEPReq+0x190>
        USBD_CtlError(pdev, req);
 8003b10:	4620      	mov	r0, r4
 8003b12:	f7ff fd7c 	bl	800360e <USBD_CtlError>
  return ret;
 8003b16:	2000      	movs	r0, #0
        break;
 8003b18:	e778      	b.n	8003a0c <USBD_StdEPReq+0x2e>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8003b1a:	f1b0 0380 	subs.w	r3, r0, #128	; 0x80
 8003b1e:	bf18      	it	ne
 8003b20:	2301      	movne	r3, #1
 8003b22:	2800      	cmp	r0, #0
 8003b24:	bf08      	it	eq
 8003b26:	2300      	moveq	r3, #0
 8003b28:	b993      	cbnz	r3, 8003b50 <USBD_StdEPReq+0x172>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8003b2a:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003b2e:	d114      	bne.n	8003b5a <USBD_StdEPReq+0x17c>
          &pdev->ep_out[ep_addr & 0x7FU];
 8003b30:	f000 007f 	and.w	r0, r0, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8003b34:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003b38:	0083      	lsls	r3, r0, #2
 8003b3a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8003b3e:	18e1      	adds	r1, r4, r3
          pep->status = 0x0000U;
 8003b40:	2500      	movs	r5, #0
 8003b42:	600d      	str	r5, [r1, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8003b44:	2202      	movs	r2, #2
 8003b46:	4620      	mov	r0, r4
 8003b48:	f000 f883 	bl	8003c52 <USBD_CtlSendData>
  return ret;
 8003b4c:	4628      	mov	r0, r5
          break;
 8003b4e:	e75d      	b.n	8003a0c <USBD_StdEPReq+0x2e>
          USBD_CtlError(pdev, req);
 8003b50:	4620      	mov	r0, r4
 8003b52:	f7ff fd5c 	bl	800360e <USBD_CtlError>
  return ret;
 8003b56:	2000      	movs	r0, #0
          break;
 8003b58:	e758      	b.n	8003a0c <USBD_StdEPReq+0x2e>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8003b5a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8003b5e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003b62:	0083      	lsls	r3, r0, #2
 8003b64:	f103 0110 	add.w	r1, r3, #16
 8003b68:	4421      	add	r1, r4
 8003b6a:	3104      	adds	r1, #4
 8003b6c:	e7e8      	b.n	8003b40 <USBD_StdEPReq+0x162>
        if((ep_addr & 0x80U) == 0x80U)
 8003b6e:	b252      	sxtb	r2, r2
 8003b70:	2a00      	cmp	r2, #0
 8003b72:	db23      	blt.n	8003bbc <USBD_StdEPReq+0x1de>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8003b74:	f000 030f 	and.w	r3, r0, #15
 8003b78:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003b7c:	009d      	lsls	r5, r3, #2
 8003b7e:	4425      	add	r5, r4
 8003b80:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
 8003b84:	b343      	cbz	r3, 8003bd8 <USBD_StdEPReq+0x1fa>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8003b86:	2a00      	cmp	r2, #0
 8003b88:	db2b      	blt.n	8003be2 <USBD_StdEPReq+0x204>
          &pdev->ep_out[ep_addr & 0x7FU];
 8003b8a:	f000 027f 	and.w	r2, r0, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8003b8e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003b92:	0093      	lsls	r3, r2, #2
 8003b94:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8003b98:	18e5      	adds	r5, r4, r3
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8003b9a:	2880      	cmp	r0, #128	; 0x80
 8003b9c:	bf14      	ite	ne
 8003b9e:	2300      	movne	r3, #0
 8003ba0:	2301      	moveq	r3, #1
 8003ba2:	2800      	cmp	r0, #0
 8003ba4:	bf08      	it	eq
 8003ba6:	2301      	moveq	r3, #1
 8003ba8:	b32b      	cbz	r3, 8003bf6 <USBD_StdEPReq+0x218>
            pep->status = 0x0000U;
 8003baa:	2300      	movs	r3, #0
 8003bac:	602b      	str	r3, [r5, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8003bae:	2202      	movs	r2, #2
 8003bb0:	4629      	mov	r1, r5
 8003bb2:	4620      	mov	r0, r4
 8003bb4:	f000 f84d 	bl	8003c52 <USBD_CtlSendData>
  return ret;
 8003bb8:	2000      	movs	r0, #0
          break;
 8003bba:	e727      	b.n	8003a0c <USBD_StdEPReq+0x2e>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8003bbc:	f000 030f 	and.w	r3, r0, #15
 8003bc0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003bc4:	009d      	lsls	r5, r3, #2
 8003bc6:	4425      	add	r5, r4
 8003bc8:	69ab      	ldr	r3, [r5, #24]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d1db      	bne.n	8003b86 <USBD_StdEPReq+0x1a8>
            USBD_CtlError(pdev, req);
 8003bce:	4620      	mov	r0, r4
 8003bd0:	f7ff fd1d 	bl	800360e <USBD_CtlError>
  return ret;
 8003bd4:	2000      	movs	r0, #0
            break;
 8003bd6:	e719      	b.n	8003a0c <USBD_StdEPReq+0x2e>
            USBD_CtlError(pdev, req);
 8003bd8:	4620      	mov	r0, r4
 8003bda:	f7ff fd18 	bl	800360e <USBD_CtlError>
  return ret;
 8003bde:	2000      	movs	r0, #0
            break;
 8003be0:	e714      	b.n	8003a0c <USBD_StdEPReq+0x2e>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8003be2:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 8003be6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003bea:	0093      	lsls	r3, r2, #2
 8003bec:	f103 0510 	add.w	r5, r3, #16
 8003bf0:	4425      	add	r5, r4
 8003bf2:	3504      	adds	r5, #4
 8003bf4:	e7d1      	b.n	8003b9a <USBD_StdEPReq+0x1bc>
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8003bf6:	4601      	mov	r1, r0
 8003bf8:	4620      	mov	r0, r4
 8003bfa:	f000 fb97 	bl	800432c <USBD_LL_IsStallEP>
 8003bfe:	b110      	cbz	r0, 8003c06 <USBD_StdEPReq+0x228>
            pep->status = 0x0001U;
 8003c00:	2301      	movs	r3, #1
 8003c02:	602b      	str	r3, [r5, #0]
 8003c04:	e7d3      	b.n	8003bae <USBD_StdEPReq+0x1d0>
            pep->status = 0x0000U;
 8003c06:	2300      	movs	r3, #0
 8003c08:	602b      	str	r3, [r5, #0]
 8003c0a:	e7d0      	b.n	8003bae <USBD_StdEPReq+0x1d0>
      USBD_CtlError(pdev, req);
 8003c0c:	4620      	mov	r0, r4
 8003c0e:	f7ff fcfe 	bl	800360e <USBD_CtlError>
  return ret;
 8003c12:	2000      	movs	r0, #0
      break;
 8003c14:	e6fa      	b.n	8003a0c <USBD_StdEPReq+0x2e>
  return ret;
 8003c16:	2000      	movs	r0, #0
 8003c18:	e6f8      	b.n	8003a0c <USBD_StdEPReq+0x2e>

08003c1a <USBD_GetString>:
  if (desc != NULL)
 8003c1a:	b1c8      	cbz	r0, 8003c50 <USBD_GetString+0x36>
{
 8003c1c:	b570      	push	{r4, r5, r6, lr}
 8003c1e:	460d      	mov	r5, r1
 8003c20:	4616      	mov	r6, r2
 8003c22:	4604      	mov	r4, r0
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8003c24:	f7ff fccb 	bl	80035be <USBD_GetLen>
 8003c28:	3001      	adds	r0, #1
 8003c2a:	0040      	lsls	r0, r0, #1
 8003c2c:	8030      	strh	r0, [r6, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8003c2e:	7028      	strb	r0, [r5, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8003c30:	2303      	movs	r3, #3
 8003c32:	706b      	strb	r3, [r5, #1]
 8003c34:	2302      	movs	r3, #2
    while (*desc != '\0')
 8003c36:	e007      	b.n	8003c48 <USBD_GetString+0x2e>
      unicode[idx++] = *desc++;
 8003c38:	3401      	adds	r4, #1
 8003c3a:	1c5a      	adds	r2, r3, #1
 8003c3c:	b2d2      	uxtb	r2, r2
 8003c3e:	54e9      	strb	r1, [r5, r3]
      unicode[idx++] =  0U;
 8003c40:	3302      	adds	r3, #2
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	2100      	movs	r1, #0
 8003c46:	54a9      	strb	r1, [r5, r2]
    while (*desc != '\0')
 8003c48:	7821      	ldrb	r1, [r4, #0]
 8003c4a:	2900      	cmp	r1, #0
 8003c4c:	d1f4      	bne.n	8003c38 <USBD_GetString+0x1e>
}
 8003c4e:	bd70      	pop	{r4, r5, r6, pc}
 8003c50:	4770      	bx	lr

08003c52 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8003c52:	b510      	push	{r4, lr}
 8003c54:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8003c56:	2202      	movs	r2, #2
 8003c58:	f8c0 226c 	str.w	r2, [r0, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8003c5c:	61c3      	str	r3, [r0, #28]
  pdev->ep_in[0].rem_length   = len;
 8003c5e:	6203      	str	r3, [r0, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8003c60:	460a      	mov	r2, r1
 8003c62:	2100      	movs	r1, #0
 8003c64:	f000 fbee 	bl	8004444 <USBD_LL_Transmit>

  return USBD_OK;
}
 8003c68:	2000      	movs	r0, #0
 8003c6a:	bd10      	pop	{r4, pc}

08003c6c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8003c6c:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8003c6e:	4613      	mov	r3, r2
 8003c70:	460a      	mov	r2, r1
 8003c72:	2100      	movs	r1, #0
 8003c74:	f000 fbe6 	bl	8004444 <USBD_LL_Transmit>

  return USBD_OK;
}
 8003c78:	2000      	movs	r0, #0
 8003c7a:	bd08      	pop	{r3, pc}

08003c7c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8003c7c:	b510      	push	{r4, lr}
 8003c7e:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8003c80:	2203      	movs	r2, #3
 8003c82:	f8c0 226c 	str.w	r2, [r0, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8003c86:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 8003c8a:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8003c8e:	460a      	mov	r2, r1
 8003c90:	2100      	movs	r1, #0
 8003c92:	f000 fbdf 	bl	8004454 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8003c96:	2000      	movs	r0, #0
 8003c98:	bd10      	pop	{r4, pc}

08003c9a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8003c9a:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	460a      	mov	r2, r1
 8003ca0:	2100      	movs	r1, #0
 8003ca2:	f000 fbd7 	bl	8004454 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8003ca6:	2000      	movs	r0, #0
 8003ca8:	bd08      	pop	{r3, pc}

08003caa <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8003caa:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8003cac:	2304      	movs	r3, #4
 8003cae:	f8c0 326c 	str.w	r3, [r0, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	4619      	mov	r1, r3
 8003cb8:	f000 fbc4 	bl	8004444 <USBD_LL_Transmit>

  return USBD_OK;
}
 8003cbc:	2000      	movs	r0, #0
 8003cbe:	bd08      	pop	{r3, pc}

08003cc0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8003cc0:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8003cc2:	2305      	movs	r3, #5
 8003cc4:	f8c0 326c 	str.w	r3, [r0, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8003cc8:	2300      	movs	r3, #0
 8003cca:	461a      	mov	r2, r3
 8003ccc:	4619      	mov	r1, r3
 8003cce:	f000 fbc1 	bl	8004454 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8003cd2:	2000      	movs	r0, #0
 8003cd4:	bd08      	pop	{r3, pc}
	...

08003cd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cda:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cdc:	2400      	movs	r4, #0
 8003cde:	9407      	str	r4, [sp, #28]
 8003ce0:	9408      	str	r4, [sp, #32]
 8003ce2:	9409      	str	r4, [sp, #36]	; 0x24
 8003ce4:	940a      	str	r4, [sp, #40]	; 0x28
 8003ce6:	940b      	str	r4, [sp, #44]	; 0x2c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ce8:	4b35      	ldr	r3, [pc, #212]	; (8003dc0 <MX_GPIO_Init+0xe8>)
 8003cea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cec:	f042 0204 	orr.w	r2, r2, #4
 8003cf0:	631a      	str	r2, [r3, #48]	; 0x30
 8003cf2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cf4:	f002 0204 	and.w	r2, r2, #4
 8003cf8:	9201      	str	r2, [sp, #4]
 8003cfa:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003cfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cfe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003d02:	631a      	str	r2, [r3, #48]	; 0x30
 8003d04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d06:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8003d0a:	9202      	str	r2, [sp, #8]
 8003d0c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d10:	f042 0202 	orr.w	r2, r2, #2
 8003d14:	631a      	str	r2, [r3, #48]	; 0x30
 8003d16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d18:	f002 0202 	and.w	r2, r2, #2
 8003d1c:	9203      	str	r2, [sp, #12]
 8003d1e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003d20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d22:	f042 0208 	orr.w	r2, r2, #8
 8003d26:	631a      	str	r2, [r3, #48]	; 0x30
 8003d28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d2a:	f002 0208 	and.w	r2, r2, #8
 8003d2e:	9204      	str	r2, [sp, #16]
 8003d30:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003d32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d38:	631a      	str	r2, [r3, #48]	; 0x30
 8003d3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d3c:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8003d40:	9205      	str	r2, [sp, #20]
 8003d42:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d46:	f042 0201 	orr.w	r2, r2, #1
 8003d4a:	631a      	str	r2, [r3, #48]	; 0x30
 8003d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4e:	f003 0301 	and.w	r3, r3, #1
 8003d52:	9306      	str	r3, [sp, #24]
 8003d54:	9b06      	ldr	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8003d56:	4f1b      	ldr	r7, [pc, #108]	; (8003dc4 <MX_GPIO_Init+0xec>)
 8003d58:	4622      	mov	r2, r4
 8003d5a:	f244 0181 	movw	r1, #16513	; 0x4081
 8003d5e:	4638      	mov	r0, r7
 8003d60:	f7fc fd80 	bl	8000864 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8003d64:	4d18      	ldr	r5, [pc, #96]	; (8003dc8 <MX_GPIO_Init+0xf0>)
 8003d66:	4622      	mov	r2, r4
 8003d68:	2140      	movs	r1, #64	; 0x40
 8003d6a:	4628      	mov	r0, r5
 8003d6c:	f7fc fd7a 	bl	8000864 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8003d70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d74:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003d76:	4b15      	ldr	r3, [pc, #84]	; (8003dcc <MX_GPIO_Init+0xf4>)
 8003d78:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d7a:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8003d7c:	a907      	add	r1, sp, #28
 8003d7e:	4814      	ldr	r0, [pc, #80]	; (8003dd0 <MX_GPIO_Init+0xf8>)
 8003d80:	f7fc fc8c 	bl	800069c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8003d84:	f244 0381 	movw	r3, #16513	; 0x4081
 8003d88:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d8a:	2601      	movs	r6, #1
 8003d8c:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d8e:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d90:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d92:	a907      	add	r1, sp, #28
 8003d94:	4638      	mov	r0, r7
 8003d96:	f7fc fc81 	bl	800069c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8003d9a:	2340      	movs	r3, #64	; 0x40
 8003d9c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d9e:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003da0:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003da2:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8003da4:	a907      	add	r1, sp, #28
 8003da6:	4628      	mov	r0, r5
 8003da8:	f7fc fc78 	bl	800069c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8003dac:	2380      	movs	r3, #128	; 0x80
 8003dae:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003db0:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003db2:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003db4:	a907      	add	r1, sp, #28
 8003db6:	4628      	mov	r0, r5
 8003db8:	f7fc fc70 	bl	800069c <HAL_GPIO_Init>

}
 8003dbc:	b00d      	add	sp, #52	; 0x34
 8003dbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003dc0:	40023800 	.word	0x40023800
 8003dc4:	40020400 	.word	0x40020400
 8003dc8:	40021800 	.word	0x40021800
 8003dcc:	10110000 	.word	0x10110000
 8003dd0:	40020800 	.word	0x40020800

08003dd4 <MX_USART3_UART_Init>:
{
 8003dd4:	b508      	push	{r3, lr}
  huart3.Instance = USART3;
 8003dd6:	4809      	ldr	r0, [pc, #36]	; (8003dfc <MX_USART3_UART_Init+0x28>)
 8003dd8:	4b09      	ldr	r3, [pc, #36]	; (8003e00 <MX_USART3_UART_Init+0x2c>)
 8003dda:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 8003ddc:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8003de0:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003de2:	2300      	movs	r3, #0
 8003de4:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003de6:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003de8:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003dea:	220c      	movs	r2, #12
 8003dec:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003dee:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003df0:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003df2:	6203      	str	r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003df4:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003df6:	f7fe fb68 	bl	80024ca <HAL_UART_Init>
}
 8003dfa:	bd08      	pop	{r3, pc}
 8003dfc:	20000224 	.word	0x20000224
 8003e00:	40004800 	.word	0x40004800

08003e04 <SystemClock_Config>:
{
 8003e04:	b530      	push	{r4, r5, lr}
 8003e06:	b0b5      	sub	sp, #212	; 0xd4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003e08:	2230      	movs	r2, #48	; 0x30
 8003e0a:	2100      	movs	r1, #0
 8003e0c:	a828      	add	r0, sp, #160	; 0xa0
 8003e0e:	f000 fc25 	bl	800465c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003e12:	2400      	movs	r4, #0
 8003e14:	9423      	str	r4, [sp, #140]	; 0x8c
 8003e16:	9424      	str	r4, [sp, #144]	; 0x90
 8003e18:	9425      	str	r4, [sp, #148]	; 0x94
 8003e1a:	9426      	str	r4, [sp, #152]	; 0x98
 8003e1c:	9427      	str	r4, [sp, #156]	; 0x9c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003e1e:	2280      	movs	r2, #128	; 0x80
 8003e20:	4621      	mov	r1, r4
 8003e22:	a803      	add	r0, sp, #12
 8003e24:	f000 fc1a 	bl	800465c <memset>
  HAL_PWR_EnableBkUpAccess();
 8003e28:	f7fd faf8 	bl	800141c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e2c:	4b20      	ldr	r3, [pc, #128]	; (8003eb0 <SystemClock_Config+0xac>)
 8003e2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e30:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003e34:	641a      	str	r2, [r3, #64]	; 0x40
 8003e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e3c:	9301      	str	r3, [sp, #4]
 8003e3e:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e40:	4b1c      	ldr	r3, [pc, #112]	; (8003eb4 <SystemClock_Config+0xb0>)
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003e48:	601a      	str	r2, [r3, #0]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003e50:	9302      	str	r3, [sp, #8]
 8003e52:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003e54:	2301      	movs	r3, #1
 8003e56:	9328      	str	r3, [sp, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003e58:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003e5c:	9329      	str	r3, [sp, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003e5e:	2502      	movs	r5, #2
 8003e60:	952e      	str	r5, [sp, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003e62:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003e66:	932f      	str	r3, [sp, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003e68:	2304      	movs	r3, #4
 8003e6a:	9330      	str	r3, [sp, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 216;
 8003e6c:	23d8      	movs	r3, #216	; 0xd8
 8003e6e:	9331      	str	r3, [sp, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003e70:	9532      	str	r5, [sp, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8003e72:	2309      	movs	r3, #9
 8003e74:	9333      	str	r3, [sp, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003e76:	a828      	add	r0, sp, #160	; 0xa0
 8003e78:	f7fd fb16 	bl	80014a8 <HAL_RCC_OscConfig>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003e7c:	f7fd fad6 	bl	800142c <HAL_PWREx_EnableOverDrive>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003e80:	230f      	movs	r3, #15
 8003e82:	9323      	str	r3, [sp, #140]	; 0x8c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003e84:	9524      	str	r5, [sp, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003e86:	9425      	str	r4, [sp, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003e88:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003e8c:	9326      	str	r3, [sp, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003e8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e92:	9327      	str	r3, [sp, #156]	; 0x9c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8003e94:	2107      	movs	r1, #7
 8003e96:	a823      	add	r0, sp, #140	; 0x8c
 8003e98:	f7fd fd5c 	bl	8001954 <HAL_RCC_ClockConfig>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8003e9c:	4b06      	ldr	r3, [pc, #24]	; (8003eb8 <SystemClock_Config+0xb4>)
 8003e9e:	9303      	str	r3, [sp, #12]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003ea0:	9414      	str	r4, [sp, #80]	; 0x50
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8003ea2:	9420      	str	r4, [sp, #128]	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003ea4:	a803      	add	r0, sp, #12
 8003ea6:	f7fd fe2d 	bl	8001b04 <HAL_RCCEx_PeriphCLKConfig>
}
 8003eaa:	b035      	add	sp, #212	; 0xd4
 8003eac:	bd30      	pop	{r4, r5, pc}
 8003eae:	bf00      	nop
 8003eb0:	40023800 	.word	0x40023800
 8003eb4:	40007000 	.word	0x40007000
 8003eb8:	00200100 	.word	0x00200100

08003ebc <main>:
{
 8003ebc:	b500      	push	{lr}
 8003ebe:	b085      	sub	sp, #20
	uint8_t buffer[]="Tau mamma\n\r";
 8003ec0:	4b13      	ldr	r3, [pc, #76]	; (8003f10 <main+0x54>)
 8003ec2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003ec6:	ab04      	add	r3, sp, #16
 8003ec8:	e903 0007 	stmdb	r3, {r0, r1, r2}
  HAL_Init();
 8003ecc:	f7fc fb4c 	bl	8000568 <HAL_Init>
  SystemClock_Config();
 8003ed0:	f7ff ff98 	bl	8003e04 <SystemClock_Config>
  MX_GPIO_Init();
 8003ed4:	f7ff ff00 	bl	8003cd8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8003ed8:	f7ff ff7c 	bl	8003dd4 <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 8003edc:	f000 f8c6 	bl	800406c <MX_USB_DEVICE_Init>
	  HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_SET);
 8003ee0:	4c0c      	ldr	r4, [pc, #48]	; (8003f14 <main+0x58>)
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	2180      	movs	r1, #128	; 0x80
 8003ee6:	4620      	mov	r0, r4
 8003ee8:	f7fc fcbc 	bl	8000864 <HAL_GPIO_WritePin>
	  CDC_Transmit_FS(buffer, sizeof(buffer));
 8003eec:	210c      	movs	r1, #12
 8003eee:	a801      	add	r0, sp, #4
 8003ef0:	f000 f90c 	bl	800410c <CDC_Transmit_FS>
	  HAL_Delay(1000);
 8003ef4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003ef8:	f7fc fb54 	bl	80005a4 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_RESET);
 8003efc:	2200      	movs	r2, #0
 8003efe:	2180      	movs	r1, #128	; 0x80
 8003f00:	4620      	mov	r0, r4
 8003f02:	f7fc fcaf 	bl	8000864 <HAL_GPIO_WritePin>
	  HAL_Delay(2500);
 8003f06:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8003f0a:	f7fc fb4b 	bl	80005a4 <HAL_Delay>
 8003f0e:	e7e7      	b.n	8003ee0 <main+0x24>
 8003f10:	08004810 	.word	0x08004810
 8003f14:	40020400 	.word	0x40020400

08003f18 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003f18:	4770      	bx	lr
	...

08003f1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003f1c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003f1e:	4b0a      	ldr	r3, [pc, #40]	; (8003f48 <HAL_MspInit+0x2c>)
 8003f20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f22:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003f26:	641a      	str	r2, [r3, #64]	; 0x40
 8003f28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f2a:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8003f2e:	9200      	str	r2, [sp, #0]
 8003f30:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f32:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f34:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f38:	645a      	str	r2, [r3, #68]	; 0x44
 8003f3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f40:	9301      	str	r3, [sp, #4]
 8003f42:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f44:	b002      	add	sp, #8
 8003f46:	4770      	bx	lr
 8003f48:	40023800 	.word	0x40023800

08003f4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003f4c:	b500      	push	{lr}
 8003f4e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f50:	2300      	movs	r3, #0
 8003f52:	9303      	str	r3, [sp, #12]
 8003f54:	9304      	str	r3, [sp, #16]
 8003f56:	9305      	str	r3, [sp, #20]
 8003f58:	9306      	str	r3, [sp, #24]
 8003f5a:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART3)
 8003f5c:	6802      	ldr	r2, [r0, #0]
 8003f5e:	4b14      	ldr	r3, [pc, #80]	; (8003fb0 <HAL_UART_MspInit+0x64>)
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d002      	beq.n	8003f6a <HAL_UART_MspInit+0x1e>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003f64:	b009      	add	sp, #36	; 0x24
 8003f66:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART3_CLK_ENABLE();
 8003f6a:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 8003f6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f70:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003f74:	641a      	str	r2, [r3, #64]	; 0x40
 8003f76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f78:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8003f7c:	9201      	str	r2, [sp, #4]
 8003f7e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f82:	f042 0208 	orr.w	r2, r2, #8
 8003f86:	631a      	str	r2, [r3, #48]	; 0x30
 8003f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f8a:	f003 0308 	and.w	r3, r3, #8
 8003f8e:	9302      	str	r3, [sp, #8]
 8003f90:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8003f92:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003f96:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f98:	2302      	movs	r3, #2
 8003f9a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f9c:	2303      	movs	r3, #3
 8003f9e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003fa0:	2307      	movs	r3, #7
 8003fa2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003fa4:	a903      	add	r1, sp, #12
 8003fa6:	4803      	ldr	r0, [pc, #12]	; (8003fb4 <HAL_UART_MspInit+0x68>)
 8003fa8:	f7fc fb78 	bl	800069c <HAL_GPIO_Init>
}
 8003fac:	e7da      	b.n	8003f64 <HAL_UART_MspInit+0x18>
 8003fae:	bf00      	nop
 8003fb0:	40004800 	.word	0x40004800
 8003fb4:	40020c00 	.word	0x40020c00

08003fb8 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003fb8:	4770      	bx	lr

08003fba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003fba:	e7fe      	b.n	8003fba <HardFault_Handler>

08003fbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003fbc:	e7fe      	b.n	8003fbc <MemManage_Handler>

08003fbe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003fbe:	e7fe      	b.n	8003fbe <BusFault_Handler>

08003fc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003fc0:	e7fe      	b.n	8003fc0 <UsageFault_Handler>

08003fc2 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003fc2:	4770      	bx	lr

08003fc4 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003fc4:	4770      	bx	lr

08003fc6 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003fc6:	4770      	bx	lr

08003fc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003fc8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003fca:	f7fc fad9 	bl	8000580 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003fce:	bd08      	pop	{r3, pc}

08003fd0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003fd0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003fd2:	4802      	ldr	r0, [pc, #8]	; (8003fdc <OTG_FS_IRQHandler+0xc>)
 8003fd4:	f7fc fe0e 	bl	8000bf4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003fd8:	bd08      	pop	{r3, pc}
 8003fda:	bf00      	nop
 8003fdc:	20001540 	.word	0x20001540

08003fe0 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8003fe0:	b508      	push	{r3, lr}
 8003fe2:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003fe4:	4a0b      	ldr	r2, [pc, #44]	; (8004014 <_sbrk+0x34>)
 8003fe6:	6812      	ldr	r2, [r2, #0]
 8003fe8:	b142      	cbz	r2, 8003ffc <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 8003fea:	4a0a      	ldr	r2, [pc, #40]	; (8004014 <_sbrk+0x34>)
 8003fec:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8003fee:	4403      	add	r3, r0
 8003ff0:	466a      	mov	r2, sp
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d806      	bhi.n	8004004 <_sbrk+0x24>
//		abort();
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8003ff6:	4a07      	ldr	r2, [pc, #28]	; (8004014 <_sbrk+0x34>)
 8003ff8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8003ffa:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8003ffc:	4a05      	ldr	r2, [pc, #20]	; (8004014 <_sbrk+0x34>)
 8003ffe:	4906      	ldr	r1, [pc, #24]	; (8004018 <_sbrk+0x38>)
 8004000:	6011      	str	r1, [r2, #0]
 8004002:	e7f2      	b.n	8003fea <_sbrk+0xa>
		errno = ENOMEM;
 8004004:	f000 faf0 	bl	80045e8 <__errno>
 8004008:	230c      	movs	r3, #12
 800400a:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 800400c:	f04f 30ff 	mov.w	r0, #4294967295
 8004010:	e7f3      	b.n	8003ffa <_sbrk+0x1a>
 8004012:	bf00      	nop
 8004014:	20000210 	.word	0x20000210
 8004018:	20001b48 	.word	0x20001b48

0800401c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800401c:	b410      	push	{r4}
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800401e:	4a0f      	ldr	r2, [pc, #60]	; (800405c <SystemInit+0x40>)
 8004020:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004024:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004028:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800402c:	4b0c      	ldr	r3, [pc, #48]	; (8004060 <SystemInit+0x44>)
 800402e:	6819      	ldr	r1, [r3, #0]
 8004030:	f041 0101 	orr.w	r1, r1, #1
 8004034:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004036:	2000      	movs	r0, #0
 8004038:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800403a:	681c      	ldr	r4, [r3, #0]
 800403c:	4909      	ldr	r1, [pc, #36]	; (8004064 <SystemInit+0x48>)
 800403e:	4021      	ands	r1, r4
 8004040:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004042:	4909      	ldr	r1, [pc, #36]	; (8004068 <SystemInit+0x4c>)
 8004044:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004046:	6819      	ldr	r1, [r3, #0]
 8004048:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800404c:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800404e:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004050:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004054:	6093      	str	r3, [r2, #8]
#endif
}
 8004056:	f85d 4b04 	ldr.w	r4, [sp], #4
 800405a:	4770      	bx	lr
 800405c:	e000ed00 	.word	0xe000ed00
 8004060:	40023800 	.word	0x40023800
 8004064:	fef6ffff 	.word	0xfef6ffff
 8004068:	24003010 	.word	0x24003010

0800406c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800406c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800406e:	2200      	movs	r2, #0
 8004070:	490f      	ldr	r1, [pc, #60]	; (80040b0 <MX_USB_DEVICE_Init+0x44>)
 8004072:	4810      	ldr	r0, [pc, #64]	; (80040b4 <MX_USB_DEVICE_Init+0x48>)
 8004074:	f7ff f932 	bl	80032dc <USBD_Init>
 8004078:	b970      	cbnz	r0, 8004098 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800407a:	490f      	ldr	r1, [pc, #60]	; (80040b8 <MX_USB_DEVICE_Init+0x4c>)
 800407c:	480d      	ldr	r0, [pc, #52]	; (80040b4 <MX_USB_DEVICE_Init+0x48>)
 800407e:	f7ff f944 	bl	800330a <USBD_RegisterClass>
 8004082:	b960      	cbnz	r0, 800409e <MX_USB_DEVICE_Init+0x32>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8004084:	490d      	ldr	r1, [pc, #52]	; (80040bc <MX_USB_DEVICE_Init+0x50>)
 8004086:	480b      	ldr	r0, [pc, #44]	; (80040b4 <MX_USB_DEVICE_Init+0x48>)
 8004088:	f7ff f8e0 	bl	800324c <USBD_CDC_RegisterInterface>
 800408c:	b950      	cbnz	r0, 80040a4 <MX_USB_DEVICE_Init+0x38>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800408e:	4809      	ldr	r0, [pc, #36]	; (80040b4 <MX_USB_DEVICE_Init+0x48>)
 8004090:	f7ff f942 	bl	8003318 <USBD_Start>
 8004094:	b948      	cbnz	r0, 80040aa <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8004096:	bd08      	pop	{r3, pc}
    Error_Handler();
 8004098:	f7ff ff3e 	bl	8003f18 <Error_Handler>
 800409c:	e7ed      	b.n	800407a <MX_USB_DEVICE_Init+0xe>
    Error_Handler();
 800409e:	f7ff ff3b 	bl	8003f18 <Error_Handler>
 80040a2:	e7ef      	b.n	8004084 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 80040a4:	f7ff ff38 	bl	8003f18 <Error_Handler>
 80040a8:	e7f1      	b.n	800408e <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 80040aa:	f7ff ff35 	bl	8003f18 <Error_Handler>
}
 80040ae:	e7f2      	b.n	8004096 <MX_USB_DEVICE_Init+0x2a>
 80040b0:	2000016c 	.word	0x2000016c
 80040b4:	200002a4 	.word	0x200002a4
 80040b8:	200000e0 	.word	0x200000e0
 80040bc:	2000011c 	.word	0x2000011c

080040c0 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 80040c0:	2000      	movs	r0, #0
 80040c2:	4770      	bx	lr

080040c4 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 80040c4:	2000      	movs	r0, #0
 80040c6:	4770      	bx	lr

080040c8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80040c8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80040ca:	4c05      	ldr	r4, [pc, #20]	; (80040e0 <CDC_Receive_FS+0x18>)
 80040cc:	4601      	mov	r1, r0
 80040ce:	4620      	mov	r0, r4
 80040d0:	f7ff f8cb 	bl	800326a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80040d4:	4620      	mov	r0, r4
 80040d6:	f7ff f8e8 	bl	80032aa <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 80040da:	2000      	movs	r0, #0
 80040dc:	bd10      	pop	{r4, pc}
 80040de:	bf00      	nop
 80040e0:	200002a4 	.word	0x200002a4

080040e4 <CDC_Init_FS>:
{
 80040e4:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80040e6:	4c06      	ldr	r4, [pc, #24]	; (8004100 <CDC_Init_FS+0x1c>)
 80040e8:	2200      	movs	r2, #0
 80040ea:	4906      	ldr	r1, [pc, #24]	; (8004104 <CDC_Init_FS+0x20>)
 80040ec:	4620      	mov	r0, r4
 80040ee:	f7ff f8b4 	bl	800325a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80040f2:	4905      	ldr	r1, [pc, #20]	; (8004108 <CDC_Init_FS+0x24>)
 80040f4:	4620      	mov	r0, r4
 80040f6:	f7ff f8b8 	bl	800326a <USBD_CDC_SetRxBuffer>
}
 80040fa:	2000      	movs	r0, #0
 80040fc:	bd10      	pop	{r4, pc}
 80040fe:	bf00      	nop
 8004100:	200002a4 	.word	0x200002a4
 8004104:	20000d40 	.word	0x20000d40
 8004108:	20000540 	.word	0x20000540

0800410c <CDC_Transmit_FS>:
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800410c:	4b09      	ldr	r3, [pc, #36]	; (8004134 <CDC_Transmit_FS+0x28>)
 800410e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
  if (hcdc->TxState != 0){
 8004112:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004116:	b10b      	cbz	r3, 800411c <CDC_Transmit_FS+0x10>
    return USBD_BUSY;
 8004118:	2001      	movs	r0, #1
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
  /* USER CODE END 7 */
  return result;
}
 800411a:	4770      	bx	lr
{
 800411c:	b510      	push	{r4, lr}
 800411e:	460a      	mov	r2, r1
 8004120:	4601      	mov	r1, r0
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8004122:	4c04      	ldr	r4, [pc, #16]	; (8004134 <CDC_Transmit_FS+0x28>)
 8004124:	4620      	mov	r0, r4
 8004126:	f7ff f898 	bl	800325a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800412a:	4620      	mov	r0, r4
 800412c:	f7ff f8a3 	bl	8003276 <USBD_CDC_TransmitPacket>
}
 8004130:	bd10      	pop	{r4, pc}
 8004132:	bf00      	nop
 8004134:	200002a4 	.word	0x200002a4

08004138 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8004138:	b508      	push	{r3, lr}
  SystemClock_Config();
 800413a:	f7ff fe63 	bl	8003e04 <SystemClock_Config>
}
 800413e:	bd08      	pop	{r3, pc}

08004140 <HAL_PCD_MspInit>:
{
 8004140:	b570      	push	{r4, r5, r6, lr}
 8004142:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004144:	2300      	movs	r3, #0
 8004146:	9303      	str	r3, [sp, #12]
 8004148:	9304      	str	r3, [sp, #16]
 800414a:	9305      	str	r3, [sp, #20]
 800414c:	9306      	str	r3, [sp, #24]
 800414e:	9307      	str	r3, [sp, #28]
  if(pcdHandle->Instance==USB_OTG_FS)
 8004150:	6803      	ldr	r3, [r0, #0]
 8004152:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004156:	d001      	beq.n	800415c <HAL_PCD_MspInit+0x1c>
}
 8004158:	b008      	add	sp, #32
 800415a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800415c:	4c1e      	ldr	r4, [pc, #120]	; (80041d8 <HAL_PCD_MspInit+0x98>)
 800415e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004160:	f043 0301 	orr.w	r3, r3, #1
 8004164:	6323      	str	r3, [r4, #48]	; 0x30
 8004166:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004168:	f003 0301 	and.w	r3, r3, #1
 800416c:	9300      	str	r3, [sp, #0]
 800416e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8004170:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8004174:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004176:	2302      	movs	r3, #2
 8004178:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800417a:	2303      	movs	r3, #3
 800417c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800417e:	230a      	movs	r3, #10
 8004180:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004182:	4e16      	ldr	r6, [pc, #88]	; (80041dc <HAL_PCD_MspInit+0x9c>)
 8004184:	a903      	add	r1, sp, #12
 8004186:	4630      	mov	r0, r6
 8004188:	f7fc fa88 	bl	800069c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800418c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004190:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004192:	2500      	movs	r5, #0
 8004194:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004196:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8004198:	a903      	add	r1, sp, #12
 800419a:	4630      	mov	r0, r6
 800419c:	f7fc fa7e 	bl	800069c <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80041a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80041a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041a6:	6363      	str	r3, [r4, #52]	; 0x34
 80041a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80041aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ae:	9301      	str	r3, [sp, #4]
 80041b0:	9b01      	ldr	r3, [sp, #4]
 80041b2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80041b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80041b8:	6463      	str	r3, [r4, #68]	; 0x44
 80041ba:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80041bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041c0:	9302      	str	r3, [sp, #8]
 80041c2:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80041c4:	462a      	mov	r2, r5
 80041c6:	4629      	mov	r1, r5
 80041c8:	2043      	movs	r0, #67	; 0x43
 80041ca:	f7fc fa11 	bl	80005f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80041ce:	2043      	movs	r0, #67	; 0x43
 80041d0:	f7fc fa40 	bl	8000654 <HAL_NVIC_EnableIRQ>
}
 80041d4:	e7c0      	b.n	8004158 <HAL_PCD_MspInit+0x18>
 80041d6:	bf00      	nop
 80041d8:	40023800 	.word	0x40023800
 80041dc:	40020000 	.word	0x40020000

080041e0 <HAL_PCD_SetupStageCallback>:
{
 80041e0:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80041e2:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 80041e6:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 80041ea:	f7ff f8ae 	bl	800334a <USBD_LL_SetupStage>
}
 80041ee:	bd08      	pop	{r3, pc}

080041f0 <HAL_PCD_DataOutStageCallback>:
{
 80041f0:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80041f2:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 80041f6:	0093      	lsls	r3, r2, #2
 80041f8:	4403      	add	r3, r0
 80041fa:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80041fe:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8004202:	f7ff f8cf 	bl	80033a4 <USBD_LL_DataOutStage>
}
 8004206:	bd08      	pop	{r3, pc}

08004208 <HAL_PCD_DataInStageCallback>:
{
 8004208:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800420a:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 800420e:	0093      	lsls	r3, r2, #2
 8004210:	4403      	add	r3, r0
 8004212:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004214:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8004218:	f7ff f90d 	bl	8003436 <USBD_LL_DataInStage>
}
 800421c:	bd08      	pop	{r3, pc}

0800421e <HAL_PCD_SOFCallback>:
{
 800421e:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8004220:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8004224:	f7ff f9ac 	bl	8003580 <USBD_LL_SOF>
}
 8004228:	bd08      	pop	{r3, pc}

0800422a <HAL_PCD_ResetCallback>:
{ 
 800422a:	b510      	push	{r4, lr}
 800422c:	4604      	mov	r4, r0
  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800422e:	68c3      	ldr	r3, [r0, #12]
 8004230:	b12b      	cbz	r3, 800423e <HAL_PCD_ResetCallback+0x14>
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8004232:	2b02      	cmp	r3, #2
 8004234:	d00d      	beq.n	8004252 <HAL_PCD_ResetCallback+0x28>
    Error_Handler();
 8004236:	f7ff fe6f 	bl	8003f18 <Error_Handler>
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800423a:	2101      	movs	r1, #1
 800423c:	e000      	b.n	8004240 <HAL_PCD_ResetCallback+0x16>
    speed = USBD_SPEED_HIGH;
 800423e:	2100      	movs	r1, #0
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8004240:	f8d4 0400 	ldr.w	r0, [r4, #1024]	; 0x400
 8004244:	f7ff f98a 	bl	800355c <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8004248:	f8d4 0400 	ldr.w	r0, [r4, #1024]	; 0x400
 800424c:	f7ff f95e 	bl	800350c <USBD_LL_Reset>
}
 8004250:	bd10      	pop	{r4, pc}
    speed = USBD_SPEED_FULL;
 8004252:	2101      	movs	r1, #1
 8004254:	e7f4      	b.n	8004240 <HAL_PCD_ResetCallback+0x16>
	...

08004258 <HAL_PCD_SuspendCallback>:
{
 8004258:	b510      	push	{r4, lr}
 800425a:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800425c:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8004260:	f7ff f97f 	bl	8003562 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8004264:	6822      	ldr	r2, [r4, #0]
 8004266:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 800426a:	f043 0301 	orr.w	r3, r3, #1
 800426e:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  if (hpcd->Init.low_power_enable)
 8004272:	6a23      	ldr	r3, [r4, #32]
 8004274:	b123      	cbz	r3, 8004280 <HAL_PCD_SuspendCallback+0x28>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8004276:	4a03      	ldr	r2, [pc, #12]	; (8004284 <HAL_PCD_SuspendCallback+0x2c>)
 8004278:	6913      	ldr	r3, [r2, #16]
 800427a:	f043 0306 	orr.w	r3, r3, #6
 800427e:	6113      	str	r3, [r2, #16]
}
 8004280:	bd10      	pop	{r4, pc}
 8004282:	bf00      	nop
 8004284:	e000ed00 	.word	0xe000ed00

08004288 <HAL_PCD_ResumeCallback>:
{
 8004288:	b508      	push	{r3, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800428a:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 800428e:	f7ff f971 	bl	8003574 <USBD_LL_Resume>
}
 8004292:	bd08      	pop	{r3, pc}

08004294 <HAL_PCD_ISOOUTIncompleteCallback>:
{
 8004294:	b508      	push	{r3, lr}
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8004296:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 800429a:	f7ff f981 	bl	80035a0 <USBD_LL_IsoOUTIncomplete>
}
 800429e:	bd08      	pop	{r3, pc}

080042a0 <HAL_PCD_ISOINIncompleteCallback>:
{
 80042a0:	b508      	push	{r3, lr}
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80042a2:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 80042a6:	f7ff f979 	bl	800359c <USBD_LL_IsoINIncomplete>
}
 80042aa:	bd08      	pop	{r3, pc}

080042ac <HAL_PCD_ConnectCallback>:
{
 80042ac:	b508      	push	{r3, lr}
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80042ae:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 80042b2:	f7ff f977 	bl	80035a4 <USBD_LL_DevConnected>
}
 80042b6:	bd08      	pop	{r3, pc}

080042b8 <HAL_PCD_DisconnectCallback>:
{
 80042b8:	b508      	push	{r3, lr}
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80042ba:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 80042be:	f7ff f973 	bl	80035a8 <USBD_LL_DevDisconnected>
}
 80042c2:	bd08      	pop	{r3, pc}

080042c4 <USBD_LL_Init>:
  if (pdev->id == DEVICE_FS) {
 80042c4:	7803      	ldrb	r3, [r0, #0]
 80042c6:	b10b      	cbz	r3, 80042cc <USBD_LL_Init+0x8>
}
 80042c8:	2000      	movs	r0, #0
 80042ca:	4770      	bx	lr
{
 80042cc:	b510      	push	{r4, lr}
 80042ce:	4603      	mov	r3, r0
  hpcd_USB_OTG_FS.pData = pdev;
 80042d0:	4815      	ldr	r0, [pc, #84]	; (8004328 <USBD_LL_Init+0x64>)
 80042d2:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  pdev->pData = &hpcd_USB_OTG_FS;
 80042d6:	f8c3 0298 	str.w	r0, [r3, #664]	; 0x298
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80042da:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80042de:	6003      	str	r3, [r0, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80042e0:	2306      	movs	r3, #6
 80042e2:	6043      	str	r3, [r0, #4]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80042e4:	2300      	movs	r3, #0
 80042e6:	6103      	str	r3, [r0, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80042e8:	2202      	movs	r2, #2
 80042ea:	6182      	str	r2, [r0, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80042ec:	2201      	movs	r2, #1
 80042ee:	61c2      	str	r2, [r0, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80042f0:	6203      	str	r3, [r0, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80042f2:	6243      	str	r3, [r0, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80042f4:	6282      	str	r2, [r0, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80042f6:	62c2      	str	r2, [r0, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80042f8:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80042fa:	f7fc fb23 	bl	8000944 <HAL_PCD_Init>
 80042fe:	b980      	cbnz	r0, 8004322 <USBD_LL_Init+0x5e>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8004300:	4c09      	ldr	r4, [pc, #36]	; (8004328 <USBD_LL_Init+0x64>)
 8004302:	2180      	movs	r1, #128	; 0x80
 8004304:	4620      	mov	r0, r4
 8004306:	f7fd f870 	bl	80013ea <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800430a:	2240      	movs	r2, #64	; 0x40
 800430c:	2100      	movs	r1, #0
 800430e:	4620      	mov	r0, r4
 8004310:	f7fd f847 	bl	80013a2 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8004314:	2280      	movs	r2, #128	; 0x80
 8004316:	2101      	movs	r1, #1
 8004318:	4620      	mov	r0, r4
 800431a:	f7fd f842 	bl	80013a2 <HAL_PCDEx_SetTxFiFo>
}
 800431e:	2000      	movs	r0, #0
 8004320:	bd10      	pop	{r4, pc}
    Error_Handler( );
 8004322:	f7ff fdf9 	bl	8003f18 <Error_Handler>
 8004326:	e7eb      	b.n	8004300 <USBD_LL_Init+0x3c>
 8004328:	20001540 	.word	0x20001540

0800432c <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800432c:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
  if((ep_addr & 0x80) == 0x80)
 8004330:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004334:	d108      	bne.n	8004348 <USBD_LL_IsStallEP+0x1c>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8004336:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800433a:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800433e:	008a      	lsls	r2, r1, #2
 8004340:	4413      	add	r3, r2
 8004342:	f893 01fe 	ldrb.w	r0, [r3, #510]	; 0x1fe
}
 8004346:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8004348:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800434c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8004350:	008a      	lsls	r2, r1, #2
 8004352:	4413      	add	r3, r2
 8004354:	f893 003e 	ldrb.w	r0, [r3, #62]	; 0x3e
 8004358:	4770      	bx	lr

0800435a <USBD_LL_GetRxDataSize>:
{
 800435a:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800435c:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8004360:	f7fc ff74 	bl	800124c <HAL_PCD_EP_GetRxCount>
}
 8004364:	bd08      	pop	{r3, pc}
	...

08004368 <HAL_PCDEx_LPM_Callback>:
{
 8004368:	b510      	push	{r4, lr}
 800436a:	4604      	mov	r4, r0
  switch (msg)
 800436c:	b111      	cbz	r1, 8004374 <HAL_PCDEx_LPM_Callback+0xc>
 800436e:	2901      	cmp	r1, #1
 8004370:	d016      	beq.n	80043a0 <HAL_PCDEx_LPM_Callback+0x38>
}
 8004372:	bd10      	pop	{r4, pc}
    if (hpcd->Init.low_power_enable)
 8004374:	6a03      	ldr	r3, [r0, #32]
 8004376:	b95b      	cbnz	r3, 8004390 <HAL_PCDEx_LPM_Callback+0x28>
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8004378:	6822      	ldr	r2, [r4, #0]
 800437a:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 800437e:	f023 0301 	bic.w	r3, r3, #1
 8004382:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
    USBD_LL_Resume(hpcd->pData);
 8004386:	f8d4 0400 	ldr.w	r0, [r4, #1024]	; 0x400
 800438a:	f7ff f8f3 	bl	8003574 <USBD_LL_Resume>
    break;
 800438e:	e7f0      	b.n	8004372 <HAL_PCDEx_LPM_Callback+0xa>
      SystemClockConfig_Resume();
 8004390:	f7ff fed2 	bl	8004138 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8004394:	4a0c      	ldr	r2, [pc, #48]	; (80043c8 <HAL_PCDEx_LPM_Callback+0x60>)
 8004396:	6913      	ldr	r3, [r2, #16]
 8004398:	f023 0306 	bic.w	r3, r3, #6
 800439c:	6113      	str	r3, [r2, #16]
 800439e:	e7eb      	b.n	8004378 <HAL_PCDEx_LPM_Callback+0x10>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80043a0:	6802      	ldr	r2, [r0, #0]
 80043a2:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 80043a6:	f043 0301 	orr.w	r3, r3, #1
 80043aa:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
    USBD_LL_Suspend(hpcd->pData);
 80043ae:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 80043b2:	f7ff f8d6 	bl	8003562 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80043b6:	6a23      	ldr	r3, [r4, #32]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d0da      	beq.n	8004372 <HAL_PCDEx_LPM_Callback+0xa>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80043bc:	4a02      	ldr	r2, [pc, #8]	; (80043c8 <HAL_PCDEx_LPM_Callback+0x60>)
 80043be:	6913      	ldr	r3, [r2, #16]
 80043c0:	f043 0306 	orr.w	r3, r3, #6
 80043c4:	6113      	str	r3, [r2, #16]
}
 80043c6:	e7d4      	b.n	8004372 <HAL_PCDEx_LPM_Callback+0xa>
 80043c8:	e000ed00 	.word	0xe000ed00

080043cc <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 80043cc:	b118      	cbz	r0, 80043d6 <USBD_Get_USB_Status+0xa>
 80043ce:	2802      	cmp	r0, #2
 80043d0:	d003      	beq.n	80043da <USBD_Get_USB_Status+0xe>
  {
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80043d2:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 80043d4:	4770      	bx	lr
      usb_status = USBD_OK;
 80043d6:	2000      	movs	r0, #0
 80043d8:	4770      	bx	lr
      usb_status = USBD_BUSY;
 80043da:	2001      	movs	r0, #1
    break;
 80043dc:	4770      	bx	lr

080043de <USBD_LL_Start>:
{
 80043de:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 80043e0:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 80043e4:	f7fc fb3f 	bl	8000a66 <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);     
 80043e8:	f7ff fff0 	bl	80043cc <USBD_Get_USB_Status>
}
 80043ec:	bd08      	pop	{r3, pc}

080043ee <USBD_LL_OpenEP>:
{
 80043ee:	b510      	push	{r4, lr}
 80043f0:	461c      	mov	r4, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80043f2:	4613      	mov	r3, r2
 80043f4:	4622      	mov	r2, r4
 80043f6:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 80043fa:	f7fc fe81 	bl	8001100 <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80043fe:	f7ff ffe5 	bl	80043cc <USBD_Get_USB_Status>
}
 8004402:	bd10      	pop	{r4, pc}

08004404 <USBD_LL_CloseEP>:
{
 8004404:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8004406:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800440a:	f7fc feba 	bl	8001182 <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);    
 800440e:	f7ff ffdd 	bl	80043cc <USBD_Get_USB_Status>
}
 8004412:	bd08      	pop	{r3, pc}

08004414 <USBD_LL_StallEP>:
{
 8004414:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8004416:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800441a:	f7fc ff4a 	bl	80012b2 <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800441e:	f7ff ffd5 	bl	80043cc <USBD_Get_USB_Status>
}
 8004422:	bd08      	pop	{r3, pc}

08004424 <USBD_LL_ClearStallEP>:
{
 8004424:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8004426:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800442a:	f7fc ff83 	bl	8001334 <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);  
 800442e:	f7ff ffcd 	bl	80043cc <USBD_Get_USB_Status>
}
 8004432:	bd08      	pop	{r3, pc}

08004434 <USBD_LL_SetUSBAddress>:
{
 8004434:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8004436:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800443a:	f7fc fe4d 	bl	80010d8 <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800443e:	f7ff ffc5 	bl	80043cc <USBD_Get_USB_Status>
}
 8004442:	bd08      	pop	{r3, pc}

08004444 <USBD_LL_Transmit>:
{
 8004444:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8004446:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800444a:	f7fc ff08 	bl	800125e <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status); 
 800444e:	f7ff ffbd 	bl	80043cc <USBD_Get_USB_Status>
}
 8004452:	bd08      	pop	{r3, pc}

08004454 <USBD_LL_PrepareReceive>:
{
 8004454:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8004456:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800445a:	f7fc fec9 	bl	80011f0 <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);   
 800445e:	f7ff ffb5 	bl	80043cc <USBD_Get_USB_Status>
}
 8004462:	bd08      	pop	{r3, pc}

08004464 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8004464:	2312      	movs	r3, #18
 8004466:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8004468:	4800      	ldr	r0, [pc, #0]	; (800446c <USBD_FS_DeviceDescriptor+0x8>)
 800446a:	4770      	bx	lr
 800446c:	2000012c 	.word	0x2000012c

08004470 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8004470:	2304      	movs	r3, #4
 8004472:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8004474:	4800      	ldr	r0, [pc, #0]	; (8004478 <USBD_FS_LangIDStrDescriptor+0x8>)
 8004476:	4770      	bx	lr
 8004478:	20000140 	.word	0x20000140

0800447c <USBD_FS_USR_BOSDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800447c:	230c      	movs	r3, #12
 800447e:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
}
 8004480:	4800      	ldr	r0, [pc, #0]	; (8004484 <USBD_FS_USR_BOSDescriptor+0x8>)
 8004482:	4770      	bx	lr
 8004484:	20000144 	.word	0x20000144

08004488 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 8004488:	2300      	movs	r3, #0
 800448a:	4293      	cmp	r3, r2
 800448c:	d216      	bcs.n	80044bc <IntToUnicode+0x34>
{
 800448e:	b430      	push	{r4, r5}
 8004490:	e00b      	b.n	80044aa <IntToUnicode+0x22>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8004492:	3437      	adds	r4, #55	; 0x37
 8004494:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    }

    value = value << 4;
 8004498:	0100      	lsls	r0, r0, #4

    pbuf[2 * idx + 1] = 0;
 800449a:	005c      	lsls	r4, r3, #1
 800449c:	3401      	adds	r4, #1
 800449e:	2500      	movs	r5, #0
 80044a0:	550d      	strb	r5, [r1, r4]
  for (idx = 0; idx < len; idx++)
 80044a2:	3301      	adds	r3, #1
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d206      	bcs.n	80044b8 <IntToUnicode+0x30>
    if (((value >> 28)) < 0xA)
 80044aa:	0f04      	lsrs	r4, r0, #28
 80044ac:	2c09      	cmp	r4, #9
 80044ae:	d8f0      	bhi.n	8004492 <IntToUnicode+0xa>
      pbuf[2 * idx] = (value >> 28) + '0';
 80044b0:	3430      	adds	r4, #48	; 0x30
 80044b2:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
 80044b6:	e7ef      	b.n	8004498 <IntToUnicode+0x10>
  }
}
 80044b8:	bc30      	pop	{r4, r5}
 80044ba:	4770      	bx	lr
 80044bc:	4770      	bx	lr
	...

080044c0 <Get_SerialNum>:
{
 80044c0:	b538      	push	{r3, r4, r5, lr}
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80044c2:	4b0b      	ldr	r3, [pc, #44]	; (80044f0 <Get_SerialNum+0x30>)
 80044c4:	6818      	ldr	r0, [r3, #0]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80044c6:	3304      	adds	r3, #4
 80044c8:	681c      	ldr	r4, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80044ca:	3304      	adds	r3, #4
 80044cc:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 80044ce:	18c0      	adds	r0, r0, r3
 80044d0:	d100      	bne.n	80044d4 <Get_SerialNum+0x14>
}
 80044d2:	bd38      	pop	{r3, r4, r5, pc}
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80044d4:	4d07      	ldr	r5, [pc, #28]	; (80044f4 <Get_SerialNum+0x34>)
 80044d6:	2208      	movs	r2, #8
 80044d8:	f105 0126 	add.w	r1, r5, #38	; 0x26
 80044dc:	f7ff ffd4 	bl	8004488 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80044e0:	2204      	movs	r2, #4
 80044e2:	f105 0136 	add.w	r1, r5, #54	; 0x36
 80044e6:	4620      	mov	r0, r4
 80044e8:	f7ff ffce 	bl	8004488 <IntToUnicode>
}
 80044ec:	e7f1      	b.n	80044d2 <Get_SerialNum+0x12>
 80044ee:	bf00      	nop
 80044f0:	1ff07a10 	.word	0x1ff07a10
 80044f4:	2000012c 	.word	0x2000012c

080044f8 <USBD_FS_SerialStrDescriptor>:
{
 80044f8:	b508      	push	{r3, lr}
  *length = USB_SIZ_STRING_SERIAL;
 80044fa:	231a      	movs	r3, #26
 80044fc:	800b      	strh	r3, [r1, #0]
  Get_SerialNum();
 80044fe:	f7ff ffdf 	bl	80044c0 <Get_SerialNum>
}
 8004502:	4801      	ldr	r0, [pc, #4]	; (8004508 <USBD_FS_SerialStrDescriptor+0x10>)
 8004504:	bd08      	pop	{r3, pc}
 8004506:	bf00      	nop
 8004508:	20000150 	.word	0x20000150

0800450c <USBD_FS_ProductStrDescriptor>:
{
 800450c:	b508      	push	{r3, lr}
 800450e:	460a      	mov	r2, r1
  if(speed == 0)
 8004510:	b128      	cbz	r0, 800451e <USBD_FS_ProductStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8004512:	4905      	ldr	r1, [pc, #20]	; (8004528 <USBD_FS_ProductStrDescriptor+0x1c>)
 8004514:	4805      	ldr	r0, [pc, #20]	; (800452c <USBD_FS_ProductStrDescriptor+0x20>)
 8004516:	f7ff fb80 	bl	8003c1a <USBD_GetString>
}
 800451a:	4803      	ldr	r0, [pc, #12]	; (8004528 <USBD_FS_ProductStrDescriptor+0x1c>)
 800451c:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800451e:	4902      	ldr	r1, [pc, #8]	; (8004528 <USBD_FS_ProductStrDescriptor+0x1c>)
 8004520:	4802      	ldr	r0, [pc, #8]	; (800452c <USBD_FS_ProductStrDescriptor+0x20>)
 8004522:	f7ff fb7a 	bl	8003c1a <USBD_GetString>
 8004526:	e7f8      	b.n	800451a <USBD_FS_ProductStrDescriptor+0xe>
 8004528:	20001944 	.word	0x20001944
 800452c:	0800481c 	.word	0x0800481c

08004530 <USBD_FS_ManufacturerStrDescriptor>:
{
 8004530:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8004532:	4c04      	ldr	r4, [pc, #16]	; (8004544 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8004534:	460a      	mov	r2, r1
 8004536:	4621      	mov	r1, r4
 8004538:	4803      	ldr	r0, [pc, #12]	; (8004548 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 800453a:	f7ff fb6e 	bl	8003c1a <USBD_GetString>
}
 800453e:	4620      	mov	r0, r4
 8004540:	bd10      	pop	{r4, pc}
 8004542:	bf00      	nop
 8004544:	20001944 	.word	0x20001944
 8004548:	08004834 	.word	0x08004834

0800454c <USBD_FS_ConfigStrDescriptor>:
{
 800454c:	b508      	push	{r3, lr}
 800454e:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 8004550:	b128      	cbz	r0, 800455e <USBD_FS_ConfigStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8004552:	4905      	ldr	r1, [pc, #20]	; (8004568 <USBD_FS_ConfigStrDescriptor+0x1c>)
 8004554:	4805      	ldr	r0, [pc, #20]	; (800456c <USBD_FS_ConfigStrDescriptor+0x20>)
 8004556:	f7ff fb60 	bl	8003c1a <USBD_GetString>
}
 800455a:	4803      	ldr	r0, [pc, #12]	; (8004568 <USBD_FS_ConfigStrDescriptor+0x1c>)
 800455c:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800455e:	4902      	ldr	r1, [pc, #8]	; (8004568 <USBD_FS_ConfigStrDescriptor+0x1c>)
 8004560:	4802      	ldr	r0, [pc, #8]	; (800456c <USBD_FS_ConfigStrDescriptor+0x20>)
 8004562:	f7ff fb5a 	bl	8003c1a <USBD_GetString>
 8004566:	e7f8      	b.n	800455a <USBD_FS_ConfigStrDescriptor+0xe>
 8004568:	20001944 	.word	0x20001944
 800456c:	08004848 	.word	0x08004848

08004570 <USBD_FS_InterfaceStrDescriptor>:
{
 8004570:	b508      	push	{r3, lr}
 8004572:	460a      	mov	r2, r1
  if(speed == 0)
 8004574:	b128      	cbz	r0, 8004582 <USBD_FS_InterfaceStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8004576:	4905      	ldr	r1, [pc, #20]	; (800458c <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8004578:	4805      	ldr	r0, [pc, #20]	; (8004590 <USBD_FS_InterfaceStrDescriptor+0x20>)
 800457a:	f7ff fb4e 	bl	8003c1a <USBD_GetString>
}
 800457e:	4803      	ldr	r0, [pc, #12]	; (800458c <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8004580:	bd08      	pop	{r3, pc}
	  USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8004582:	4902      	ldr	r1, [pc, #8]	; (800458c <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8004584:	4802      	ldr	r0, [pc, #8]	; (8004590 <USBD_FS_InterfaceStrDescriptor+0x20>)
 8004586:	f7ff fb48 	bl	8003c1a <USBD_GetString>
 800458a:	e7f8      	b.n	800457e <USBD_FS_InterfaceStrDescriptor+0xe>
 800458c:	20001944 	.word	0x20001944
 8004590:	08004854 	.word	0x08004854

08004594 <Reset_Handler>:
 8004594:	f8df d034 	ldr.w	sp, [pc, #52]	; 80045cc <LoopFillZerobss+0x14>
 8004598:	2100      	movs	r1, #0
 800459a:	e003      	b.n	80045a4 <LoopCopyDataInit>

0800459c <CopyDataInit>:
 800459c:	4b0c      	ldr	r3, [pc, #48]	; (80045d0 <LoopFillZerobss+0x18>)
 800459e:	585b      	ldr	r3, [r3, r1]
 80045a0:	5043      	str	r3, [r0, r1]
 80045a2:	3104      	adds	r1, #4

080045a4 <LoopCopyDataInit>:
 80045a4:	480b      	ldr	r0, [pc, #44]	; (80045d4 <LoopFillZerobss+0x1c>)
 80045a6:	4b0c      	ldr	r3, [pc, #48]	; (80045d8 <LoopFillZerobss+0x20>)
 80045a8:	1842      	adds	r2, r0, r1
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d3f6      	bcc.n	800459c <CopyDataInit>
 80045ae:	4a0b      	ldr	r2, [pc, #44]	; (80045dc <LoopFillZerobss+0x24>)
 80045b0:	e002      	b.n	80045b8 <LoopFillZerobss>

080045b2 <FillZerobss>:
 80045b2:	2300      	movs	r3, #0
 80045b4:	f842 3b04 	str.w	r3, [r2], #4

080045b8 <LoopFillZerobss>:
 80045b8:	4b09      	ldr	r3, [pc, #36]	; (80045e0 <LoopFillZerobss+0x28>)
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d3f9      	bcc.n	80045b2 <FillZerobss>
 80045be:	f7ff fd2d 	bl	800401c <SystemInit>
 80045c2:	f000 f817 	bl	80045f4 <__libc_init_array>
 80045c6:	f7ff fc79 	bl	8003ebc <main>
 80045ca:	4770      	bx	lr
 80045cc:	20040000 	.word	0x20040000
 80045d0:	08004874 	.word	0x08004874
 80045d4:	20000000 	.word	0x20000000
 80045d8:	200001f0 	.word	0x200001f0
 80045dc:	200001f0 	.word	0x200001f0
 80045e0:	20001b48 	.word	0x20001b48

080045e4 <ADC_IRQHandler>:
 80045e4:	e7fe      	b.n	80045e4 <ADC_IRQHandler>
	...

080045e8 <__errno>:
 80045e8:	4b01      	ldr	r3, [pc, #4]	; (80045f0 <__errno+0x8>)
 80045ea:	6818      	ldr	r0, [r3, #0]
 80045ec:	4770      	bx	lr
 80045ee:	bf00      	nop
 80045f0:	2000018c 	.word	0x2000018c

080045f4 <__libc_init_array>:
 80045f4:	b570      	push	{r4, r5, r6, lr}
 80045f6:	4e0d      	ldr	r6, [pc, #52]	; (800462c <__libc_init_array+0x38>)
 80045f8:	4c0d      	ldr	r4, [pc, #52]	; (8004630 <__libc_init_array+0x3c>)
 80045fa:	1ba4      	subs	r4, r4, r6
 80045fc:	10a4      	asrs	r4, r4, #2
 80045fe:	2500      	movs	r5, #0
 8004600:	42a5      	cmp	r5, r4
 8004602:	d109      	bne.n	8004618 <__libc_init_array+0x24>
 8004604:	4e0b      	ldr	r6, [pc, #44]	; (8004634 <__libc_init_array+0x40>)
 8004606:	4c0c      	ldr	r4, [pc, #48]	; (8004638 <__libc_init_array+0x44>)
 8004608:	f000 f8ea 	bl	80047e0 <_init>
 800460c:	1ba4      	subs	r4, r4, r6
 800460e:	10a4      	asrs	r4, r4, #2
 8004610:	2500      	movs	r5, #0
 8004612:	42a5      	cmp	r5, r4
 8004614:	d105      	bne.n	8004622 <__libc_init_array+0x2e>
 8004616:	bd70      	pop	{r4, r5, r6, pc}
 8004618:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800461c:	4798      	blx	r3
 800461e:	3501      	adds	r5, #1
 8004620:	e7ee      	b.n	8004600 <__libc_init_array+0xc>
 8004622:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004626:	4798      	blx	r3
 8004628:	3501      	adds	r5, #1
 800462a:	e7f2      	b.n	8004612 <__libc_init_array+0x1e>
 800462c:	0800486c 	.word	0x0800486c
 8004630:	0800486c 	.word	0x0800486c
 8004634:	0800486c 	.word	0x0800486c
 8004638:	08004870 	.word	0x08004870

0800463c <malloc>:
 800463c:	4b02      	ldr	r3, [pc, #8]	; (8004648 <malloc+0xc>)
 800463e:	4601      	mov	r1, r0
 8004640:	6818      	ldr	r0, [r3, #0]
 8004642:	f000 b861 	b.w	8004708 <_malloc_r>
 8004646:	bf00      	nop
 8004648:	2000018c 	.word	0x2000018c

0800464c <free>:
 800464c:	4b02      	ldr	r3, [pc, #8]	; (8004658 <free+0xc>)
 800464e:	4601      	mov	r1, r0
 8004650:	6818      	ldr	r0, [r3, #0]
 8004652:	f000 b80b 	b.w	800466c <_free_r>
 8004656:	bf00      	nop
 8004658:	2000018c 	.word	0x2000018c

0800465c <memset>:
 800465c:	4402      	add	r2, r0
 800465e:	4603      	mov	r3, r0
 8004660:	4293      	cmp	r3, r2
 8004662:	d100      	bne.n	8004666 <memset+0xa>
 8004664:	4770      	bx	lr
 8004666:	f803 1b01 	strb.w	r1, [r3], #1
 800466a:	e7f9      	b.n	8004660 <memset+0x4>

0800466c <_free_r>:
 800466c:	b538      	push	{r3, r4, r5, lr}
 800466e:	4605      	mov	r5, r0
 8004670:	2900      	cmp	r1, #0
 8004672:	d045      	beq.n	8004700 <_free_r+0x94>
 8004674:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004678:	1f0c      	subs	r4, r1, #4
 800467a:	2b00      	cmp	r3, #0
 800467c:	bfb8      	it	lt
 800467e:	18e4      	addlt	r4, r4, r3
 8004680:	f000 f8ac 	bl	80047dc <__malloc_lock>
 8004684:	4a1f      	ldr	r2, [pc, #124]	; (8004704 <_free_r+0x98>)
 8004686:	6813      	ldr	r3, [r2, #0]
 8004688:	4610      	mov	r0, r2
 800468a:	b933      	cbnz	r3, 800469a <_free_r+0x2e>
 800468c:	6063      	str	r3, [r4, #4]
 800468e:	6014      	str	r4, [r2, #0]
 8004690:	4628      	mov	r0, r5
 8004692:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004696:	f000 b8a2 	b.w	80047de <__malloc_unlock>
 800469a:	42a3      	cmp	r3, r4
 800469c:	d90c      	bls.n	80046b8 <_free_r+0x4c>
 800469e:	6821      	ldr	r1, [r4, #0]
 80046a0:	1862      	adds	r2, r4, r1
 80046a2:	4293      	cmp	r3, r2
 80046a4:	bf04      	itt	eq
 80046a6:	681a      	ldreq	r2, [r3, #0]
 80046a8:	685b      	ldreq	r3, [r3, #4]
 80046aa:	6063      	str	r3, [r4, #4]
 80046ac:	bf04      	itt	eq
 80046ae:	1852      	addeq	r2, r2, r1
 80046b0:	6022      	streq	r2, [r4, #0]
 80046b2:	6004      	str	r4, [r0, #0]
 80046b4:	e7ec      	b.n	8004690 <_free_r+0x24>
 80046b6:	4613      	mov	r3, r2
 80046b8:	685a      	ldr	r2, [r3, #4]
 80046ba:	b10a      	cbz	r2, 80046c0 <_free_r+0x54>
 80046bc:	42a2      	cmp	r2, r4
 80046be:	d9fa      	bls.n	80046b6 <_free_r+0x4a>
 80046c0:	6819      	ldr	r1, [r3, #0]
 80046c2:	1858      	adds	r0, r3, r1
 80046c4:	42a0      	cmp	r0, r4
 80046c6:	d10b      	bne.n	80046e0 <_free_r+0x74>
 80046c8:	6820      	ldr	r0, [r4, #0]
 80046ca:	4401      	add	r1, r0
 80046cc:	1858      	adds	r0, r3, r1
 80046ce:	4282      	cmp	r2, r0
 80046d0:	6019      	str	r1, [r3, #0]
 80046d2:	d1dd      	bne.n	8004690 <_free_r+0x24>
 80046d4:	6810      	ldr	r0, [r2, #0]
 80046d6:	6852      	ldr	r2, [r2, #4]
 80046d8:	605a      	str	r2, [r3, #4]
 80046da:	4401      	add	r1, r0
 80046dc:	6019      	str	r1, [r3, #0]
 80046de:	e7d7      	b.n	8004690 <_free_r+0x24>
 80046e0:	d902      	bls.n	80046e8 <_free_r+0x7c>
 80046e2:	230c      	movs	r3, #12
 80046e4:	602b      	str	r3, [r5, #0]
 80046e6:	e7d3      	b.n	8004690 <_free_r+0x24>
 80046e8:	6820      	ldr	r0, [r4, #0]
 80046ea:	1821      	adds	r1, r4, r0
 80046ec:	428a      	cmp	r2, r1
 80046ee:	bf04      	itt	eq
 80046f0:	6811      	ldreq	r1, [r2, #0]
 80046f2:	6852      	ldreq	r2, [r2, #4]
 80046f4:	6062      	str	r2, [r4, #4]
 80046f6:	bf04      	itt	eq
 80046f8:	1809      	addeq	r1, r1, r0
 80046fa:	6021      	streq	r1, [r4, #0]
 80046fc:	605c      	str	r4, [r3, #4]
 80046fe:	e7c7      	b.n	8004690 <_free_r+0x24>
 8004700:	bd38      	pop	{r3, r4, r5, pc}
 8004702:	bf00      	nop
 8004704:	20000218 	.word	0x20000218

08004708 <_malloc_r>:
 8004708:	b570      	push	{r4, r5, r6, lr}
 800470a:	1ccd      	adds	r5, r1, #3
 800470c:	f025 0503 	bic.w	r5, r5, #3
 8004710:	3508      	adds	r5, #8
 8004712:	2d0c      	cmp	r5, #12
 8004714:	bf38      	it	cc
 8004716:	250c      	movcc	r5, #12
 8004718:	2d00      	cmp	r5, #0
 800471a:	4606      	mov	r6, r0
 800471c:	db01      	blt.n	8004722 <_malloc_r+0x1a>
 800471e:	42a9      	cmp	r1, r5
 8004720:	d903      	bls.n	800472a <_malloc_r+0x22>
 8004722:	230c      	movs	r3, #12
 8004724:	6033      	str	r3, [r6, #0]
 8004726:	2000      	movs	r0, #0
 8004728:	bd70      	pop	{r4, r5, r6, pc}
 800472a:	f000 f857 	bl	80047dc <__malloc_lock>
 800472e:	4a21      	ldr	r2, [pc, #132]	; (80047b4 <_malloc_r+0xac>)
 8004730:	6814      	ldr	r4, [r2, #0]
 8004732:	4621      	mov	r1, r4
 8004734:	b991      	cbnz	r1, 800475c <_malloc_r+0x54>
 8004736:	4c20      	ldr	r4, [pc, #128]	; (80047b8 <_malloc_r+0xb0>)
 8004738:	6823      	ldr	r3, [r4, #0]
 800473a:	b91b      	cbnz	r3, 8004744 <_malloc_r+0x3c>
 800473c:	4630      	mov	r0, r6
 800473e:	f000 f83d 	bl	80047bc <_sbrk_r>
 8004742:	6020      	str	r0, [r4, #0]
 8004744:	4629      	mov	r1, r5
 8004746:	4630      	mov	r0, r6
 8004748:	f000 f838 	bl	80047bc <_sbrk_r>
 800474c:	1c43      	adds	r3, r0, #1
 800474e:	d124      	bne.n	800479a <_malloc_r+0x92>
 8004750:	230c      	movs	r3, #12
 8004752:	6033      	str	r3, [r6, #0]
 8004754:	4630      	mov	r0, r6
 8004756:	f000 f842 	bl	80047de <__malloc_unlock>
 800475a:	e7e4      	b.n	8004726 <_malloc_r+0x1e>
 800475c:	680b      	ldr	r3, [r1, #0]
 800475e:	1b5b      	subs	r3, r3, r5
 8004760:	d418      	bmi.n	8004794 <_malloc_r+0x8c>
 8004762:	2b0b      	cmp	r3, #11
 8004764:	d90f      	bls.n	8004786 <_malloc_r+0x7e>
 8004766:	600b      	str	r3, [r1, #0]
 8004768:	50cd      	str	r5, [r1, r3]
 800476a:	18cc      	adds	r4, r1, r3
 800476c:	4630      	mov	r0, r6
 800476e:	f000 f836 	bl	80047de <__malloc_unlock>
 8004772:	f104 000b 	add.w	r0, r4, #11
 8004776:	1d23      	adds	r3, r4, #4
 8004778:	f020 0007 	bic.w	r0, r0, #7
 800477c:	1ac3      	subs	r3, r0, r3
 800477e:	d0d3      	beq.n	8004728 <_malloc_r+0x20>
 8004780:	425a      	negs	r2, r3
 8004782:	50e2      	str	r2, [r4, r3]
 8004784:	e7d0      	b.n	8004728 <_malloc_r+0x20>
 8004786:	428c      	cmp	r4, r1
 8004788:	684b      	ldr	r3, [r1, #4]
 800478a:	bf16      	itet	ne
 800478c:	6063      	strne	r3, [r4, #4]
 800478e:	6013      	streq	r3, [r2, #0]
 8004790:	460c      	movne	r4, r1
 8004792:	e7eb      	b.n	800476c <_malloc_r+0x64>
 8004794:	460c      	mov	r4, r1
 8004796:	6849      	ldr	r1, [r1, #4]
 8004798:	e7cc      	b.n	8004734 <_malloc_r+0x2c>
 800479a:	1cc4      	adds	r4, r0, #3
 800479c:	f024 0403 	bic.w	r4, r4, #3
 80047a0:	42a0      	cmp	r0, r4
 80047a2:	d005      	beq.n	80047b0 <_malloc_r+0xa8>
 80047a4:	1a21      	subs	r1, r4, r0
 80047a6:	4630      	mov	r0, r6
 80047a8:	f000 f808 	bl	80047bc <_sbrk_r>
 80047ac:	3001      	adds	r0, #1
 80047ae:	d0cf      	beq.n	8004750 <_malloc_r+0x48>
 80047b0:	6025      	str	r5, [r4, #0]
 80047b2:	e7db      	b.n	800476c <_malloc_r+0x64>
 80047b4:	20000218 	.word	0x20000218
 80047b8:	2000021c 	.word	0x2000021c

080047bc <_sbrk_r>:
 80047bc:	b538      	push	{r3, r4, r5, lr}
 80047be:	4c06      	ldr	r4, [pc, #24]	; (80047d8 <_sbrk_r+0x1c>)
 80047c0:	2300      	movs	r3, #0
 80047c2:	4605      	mov	r5, r0
 80047c4:	4608      	mov	r0, r1
 80047c6:	6023      	str	r3, [r4, #0]
 80047c8:	f7ff fc0a 	bl	8003fe0 <_sbrk>
 80047cc:	1c43      	adds	r3, r0, #1
 80047ce:	d102      	bne.n	80047d6 <_sbrk_r+0x1a>
 80047d0:	6823      	ldr	r3, [r4, #0]
 80047d2:	b103      	cbz	r3, 80047d6 <_sbrk_r+0x1a>
 80047d4:	602b      	str	r3, [r5, #0]
 80047d6:	bd38      	pop	{r3, r4, r5, pc}
 80047d8:	20001b44 	.word	0x20001b44

080047dc <__malloc_lock>:
 80047dc:	4770      	bx	lr

080047de <__malloc_unlock>:
 80047de:	4770      	bx	lr

080047e0 <_init>:
 80047e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047e2:	bf00      	nop
 80047e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047e6:	bc08      	pop	{r3}
 80047e8:	469e      	mov	lr, r3
 80047ea:	4770      	bx	lr

080047ec <_fini>:
 80047ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047ee:	bf00      	nop
 80047f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047f2:	bc08      	pop	{r3}
 80047f4:	469e      	mov	lr, r3
 80047f6:	4770      	bx	lr
